// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nchf_OfflineOnlyCharging
 *
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.2.0-alpha.1
 */

package openapi


import (
	"errors"
)



type Trigger struct {

	TriggerType TriggerType `json:"triggerType"`

	TriggerCategory TriggerCategory `json:"triggerCategory"`

	// indicating a time in seconds.
	TimeLimit int32 `json:"timeLimit,omitempty"`

	// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
	VolumeLimit int32 `json:"volumeLimit,omitempty"`

	// Integer where the allowed values correspond to the value range of an unsigned 64-bit integer. 
	VolumeLimit64 int32 `json:"volumeLimit64,omitempty"`

	// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
	EventLimit int32 `json:"eventLimit,omitempty"`

	// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
	MaxNumberOfccc int32 `json:"maxNumberOfccc,omitempty"`
}

// AssertTriggerRequired checks if the required fields are not zero-ed
func AssertTriggerRequired(obj Trigger) error {
	elements := map[string]interface{}{
		"triggerType": obj.TriggerType,
		"triggerCategory": obj.TriggerCategory,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertTriggerTypeRequired(obj.TriggerType); err != nil {
		return err
	}
	if err := AssertTriggerCategoryRequired(obj.TriggerCategory); err != nil {
		return err
	}
	return nil
}

// AssertTriggerConstraints checks if the values respects the defined constraints
func AssertTriggerConstraints(obj Trigger) error {
	if obj.VolumeLimit < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.VolumeLimit > 4294967295 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.VolumeLimit64 < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.VolumeLimit64 > -1 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.EventLimit < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.EventLimit > 4294967295 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.MaxNumberOfccc < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.MaxNumberOfccc > 4294967295 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
