// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nchf_OfflineOnlyCharging
 *
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.2.0-alpha.1
 */

package openapi




type NfIdentification struct {

	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	NFName string `json:"nFName,omitempty"`

	// String identifying a IPv4 address formatted in the 'dotted decimal' notation as defined in RFC 1166. 
	NFIPv4Address string `json:"nFIPv4Address,omitempty"`

	NFIPv6Address Ipv6Addr `json:"nFIPv6Address,omitempty"`

	NFPLMNID PlmnId `json:"nFPLMNID,omitempty"`

	NodeFunctionality NodeFunctionality `json:"nodeFunctionality"`

	NFFqdn string `json:"nFFqdn,omitempty"`
}

// AssertNfIdentificationRequired checks if the required fields are not zero-ed
func AssertNfIdentificationRequired(obj NfIdentification) error {
	elements := map[string]interface{}{
		"nodeFunctionality": obj.NodeFunctionality,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertIpv6AddrRequired(obj.NFIPv6Address); err != nil {
		return err
	}
	if err := AssertPlmnIdRequired(obj.NFPLMNID); err != nil {
		return err
	}
	if err := AssertNodeFunctionalityRequired(obj.NodeFunctionality); err != nil {
		return err
	}
	return nil
}

// AssertNfIdentificationConstraints checks if the values respects the defined constraints
func AssertNfIdentificationConstraints(obj NfIdentification) error {
	return nil
}
