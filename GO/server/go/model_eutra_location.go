// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nchf_OfflineOnlyCharging
 *
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.2.0-alpha.1
 */

package openapi


import (
	"time"
	"errors"
)



// EutraLocation - Contains the E-UTRA user location.
type EutraLocation struct {

	Tai Tai `json:"tai"`

	IgnoreTai bool `json:"ignoreTai,omitempty"`

	Ecgi Ecgi `json:"ecgi"`

	// This flag when present shall indicate that the Ecgi shall be ignored When present, it shall be set as follows: - true: ecgi shall be ignored. - false (default): ecgi shall not be ignored. 
	IgnoreEcgi bool `json:"ignoreEcgi,omitempty"`

	// The value represents the elapsed time in minutes since the last network contact of the mobile station.  Value \"0\" indicates that the location information was obtained after a successful paging procedure for Active Location Retrieval when the UE is in idle mode or after a successful NG-RAN location reporting procedure with the eNB when the UE is in connected mode.  Any other value than \"0\" indicates that the location information is the last known one.  See 3GPP TS 29.002 clause 17.7.8. 
	AgeOfLocationInformation int32 `json:"ageOfLocationInformation,omitempty"`

	// string with format 'date-time' as defined in OpenAPI.
	UeLocationTimestamp time.Time `json:"ueLocationTimestamp,omitempty"`

	// Refer to geographical Information. See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used. 
	GeographicalInformation string `json:"geographicalInformation,omitempty"`

	// Refers to Calling Geodetic Location. See ITU-T Recommendation Q.763 (1999) [24] clause 3.88.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used. 
	GeodeticInformation string `json:"geodeticInformation,omitempty"`

	GlobalNgenbId GlobalRanNodeId `json:"globalNgenbId,omitempty"`

	GlobalENbId GlobalRanNodeId `json:"globalENbId,omitempty"`
}

// AssertEutraLocationRequired checks if the required fields are not zero-ed
func AssertEutraLocationRequired(obj EutraLocation) error {
	elements := map[string]interface{}{
		"tai": obj.Tai,
		"ecgi": obj.Ecgi,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertTaiRequired(obj.Tai); err != nil {
		return err
	}
	if err := AssertEcgiRequired(obj.Ecgi); err != nil {
		return err
	}
	if err := AssertGlobalRanNodeIdRequired(obj.GlobalNgenbId); err != nil {
		return err
	}
	if err := AssertGlobalRanNodeIdRequired(obj.GlobalENbId); err != nil {
		return err
	}
	return nil
}

// AssertEutraLocationConstraints checks if the values respects the defined constraints
func AssertEutraLocationConstraints(obj EutraLocation) error {
	if obj.AgeOfLocationInformation < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.AgeOfLocationInformation > 32767 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
