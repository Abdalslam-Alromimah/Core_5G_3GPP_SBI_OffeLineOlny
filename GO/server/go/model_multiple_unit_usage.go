// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nchf_OfflineOnlyCharging
 *
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.2.0-alpha.1
 */

package openapi


import (
	"errors"
)



type MultipleUnitUsage struct {

	// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
	RatingGroup int32 `json:"ratingGroup"`

	UsedUnitContainer []UsedUnitContainer `json:"usedUnitContainer,omitempty"`

	// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
	UPFID string `json:"uPFID,omitempty"`

	MultihomedPDUAddress PduAddress `json:"multihomedPDUAddress,omitempty"`
}

// AssertMultipleUnitUsageRequired checks if the required fields are not zero-ed
func AssertMultipleUnitUsageRequired(obj MultipleUnitUsage) error {
	elements := map[string]interface{}{
		"ratingGroup": obj.RatingGroup,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.UsedUnitContainer {
		if err := AssertUsedUnitContainerRequired(el); err != nil {
			return err
		}
	}
	if err := AssertPduAddressRequired(obj.MultihomedPDUAddress); err != nil {
		return err
	}
	return nil
}

// AssertMultipleUnitUsageConstraints checks if the values respects the defined constraints
func AssertMultipleUnitUsageConstraints(obj MultipleUnitUsage) error {
	if obj.RatingGroup < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.RatingGroup > 4294967295 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
