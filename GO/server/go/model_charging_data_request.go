// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nchf_OfflineOnlyCharging
 *
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.2.0-alpha.1
 */

package openapi


import (
	"time"
	"errors"
)



type ChargingDataRequest struct {

	// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \"imsi-<imsi>\", where <imsi> shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \"nai-<nai>, where <nai> shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \"gci-<gci>\", where <gci> shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \"gli-<gli>\", where <gli> shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \"lower-with-hyphen\" naming convention    defined in 3GPP TS 29.501. 
	SubscriberIdentifier string `json:"subscriberIdentifier,omitempty"`

	NfConsumerIdentification NfIdentification `json:"nfConsumerIdentification"`

	// string with format 'date-time' as defined in OpenAPI.
	InvocationTimeStamp time.Time `json:"invocationTimeStamp"`

	// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
	InvocationSequenceNumber int32 `json:"invocationSequenceNumber"`

	RetransmissionIndicator bool `json:"retransmissionIndicator,omitempty"`

	ServiceSpecificationInfo string `json:"serviceSpecificationInfo,omitempty"`

	MultipleUnitUsage []MultipleUnitUsage `json:"multipleUnitUsage,omitempty"`

	Triggers []Trigger `json:"triggers,omitempty"`

	PDUSessionChargingInformation PduSessionChargingInformation `json:"pDUSessionChargingInformation,omitempty"`

	RoamingQBCInformation RoamingQbcInformation `json:"roamingQBCInformation,omitempty"`
}

// AssertChargingDataRequestRequired checks if the required fields are not zero-ed
func AssertChargingDataRequestRequired(obj ChargingDataRequest) error {
	elements := map[string]interface{}{
		"nfConsumerIdentification": obj.NfConsumerIdentification,
		"invocationTimeStamp": obj.InvocationTimeStamp,
		"invocationSequenceNumber": obj.InvocationSequenceNumber,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertNfIdentificationRequired(obj.NfConsumerIdentification); err != nil {
		return err
	}
	for _, el := range obj.MultipleUnitUsage {
		if err := AssertMultipleUnitUsageRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Triggers {
		if err := AssertTriggerRequired(el); err != nil {
			return err
		}
	}
	if err := AssertPduSessionChargingInformationRequired(obj.PDUSessionChargingInformation); err != nil {
		return err
	}
	if err := AssertRoamingQbcInformationRequired(obj.RoamingQBCInformation); err != nil {
		return err
	}
	return nil
}

// AssertChargingDataRequestConstraints checks if the values respects the defined constraints
func AssertChargingDataRequestConstraints(obj ChargingDataRequest) error {
	if obj.InvocationSequenceNumber < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.InvocationSequenceNumber > 4294967295 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
