// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Nchf_OfflineOnlyCharging
 *
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * API version: 1.2.0-alpha.1
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) Router {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"OfflinechargingdataOfflineChargingDataRefReleasePost": Route{
			strings.ToUpper("Post"),
			"/nchf-offlineonlycharging/v1/offlinechargingdata/{OfflineChargingDataRef}/release",
			c.OfflinechargingdataOfflineChargingDataRefReleasePost,
		},
		"OfflinechargingdataOfflineChargingDataRefUpdatePost": Route{
			strings.ToUpper("Post"),
			"/nchf-offlineonlycharging/v1/offlinechargingdata/{OfflineChargingDataRef}/update",
			c.OfflinechargingdataOfflineChargingDataRefUpdatePost,
		},
		"OfflinechargingdataPost": Route{
			strings.ToUpper("Post"),
			"/nchf-offlineonlycharging/v1/offlinechargingdata",
			c.OfflinechargingdataPost,
		},
	}
}

// OfflinechargingdataOfflineChargingDataRefReleasePost - 
func (c *DefaultAPIController) OfflinechargingdataOfflineChargingDataRefReleasePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	offlineChargingDataRefParam := params["OfflineChargingDataRef"]
	if offlineChargingDataRefParam == "" {
		c.errorHandler(w, r, &RequiredError{"OfflineChargingDataRef"}, nil)
		return
	}
	chargingDataRequestParam := ChargingDataRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&chargingDataRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertChargingDataRequestRequired(chargingDataRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertChargingDataRequestConstraints(chargingDataRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.OfflinechargingdataOfflineChargingDataRefReleasePost(r.Context(), offlineChargingDataRefParam, chargingDataRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// OfflinechargingdataOfflineChargingDataRefUpdatePost - 
func (c *DefaultAPIController) OfflinechargingdataOfflineChargingDataRefUpdatePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	offlineChargingDataRefParam := params["OfflineChargingDataRef"]
	if offlineChargingDataRefParam == "" {
		c.errorHandler(w, r, &RequiredError{"OfflineChargingDataRef"}, nil)
		return
	}
	chargingDataRequestParam := ChargingDataRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&chargingDataRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertChargingDataRequestRequired(chargingDataRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertChargingDataRequestConstraints(chargingDataRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.OfflinechargingdataOfflineChargingDataRefUpdatePost(r.Context(), offlineChargingDataRefParam, chargingDataRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// OfflinechargingdataPost - 
func (c *DefaultAPIController) OfflinechargingdataPost(w http.ResponseWriter, r *http.Request) {
	chargingDataRequestParam := ChargingDataRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&chargingDataRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertChargingDataRequestRequired(chargingDataRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertChargingDataRequestConstraints(chargingDataRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.OfflinechargingdataPost(r.Context(), chargingDataRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
