/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ChargingDataRequest.h
 *
 * 
 */

#ifndef ChargingDataRequest_H_
#define ChargingDataRequest_H_


#include "PDUSessionChargingInformation.h"
#include "Trigger.h"
#include "RoamingQBCInformation.h"
#include <string>
#include "MultipleUnitUsage.h"
#include "NFIdentification.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  ChargingDataRequest
{
public:
    ChargingDataRequest();
    virtual ~ChargingDataRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ChargingDataRequest& rhs) const;
    bool operator!=(const ChargingDataRequest& rhs) const;

    /////////////////////////////////////////////
    /// ChargingDataRequest members

    /// <summary>
    /// String identifying a Supi that shall contain either an IMSI, a network specific identifier, a Global Cable Identifier (GCI) or a Global Line Identifier (GLI) as specified in clause  2.2A of 3GPP TS 23.003. It shall be formatted as follows  - for an IMSI \&quot;imsi-&lt;imsi&gt;\&quot;, where &lt;imsi&gt; shall be formatted according to clause 2.2    of 3GPP TS 23.003 that describes an IMSI.  - for a network specific identifier \&quot;nai-&lt;nai&gt;, where &lt;nai&gt; shall be formatted    according to clause 28.7.2 of 3GPP TS 23.003 that describes an NAI.  - for a GCI \&quot;gci-&lt;gci&gt;\&quot;, where &lt;gci&gt; shall be formatted according to clause 28.15.2    of 3GPP TS 23.003.  - for a GLI \&quot;gli-&lt;gli&gt;\&quot;, where &lt;gli&gt; shall be formatted according to clause 28.16.2 of    3GPP TS 23.003.To enable that the value is used as part of an URI, the string shall    only contain characters allowed according to the \&quot;lower-with-hyphen\&quot; naming convention    defined in 3GPP TS 29.501. 
    /// </summary>
    std::string getSubscriberIdentifier() const;
    void setSubscriberIdentifier(std::string const& value);
    bool subscriberIdentifierIsSet() const;
    void unsetSubscriberIdentifier();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::NFIdentification getNfConsumerIdentification() const;
    void setNfConsumerIdentification(org::openapitools::server::model::NFIdentification const& value);
    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    std::string getInvocationTimeStamp() const;
    void setInvocationTimeStamp(std::string const& value);
    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
    /// </summary>
    int32_t getInvocationSequenceNumber() const;
    void setInvocationSequenceNumber(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    bool isRetransmissionIndicator() const;
    void setRetransmissionIndicator(bool const value);
    bool retransmissionIndicatorIsSet() const;
    void unsetRetransmissionIndicator();
    /// <summary>
    /// 
    /// </summary>
    std::string getServiceSpecificationInfo() const;
    void setServiceSpecificationInfo(std::string const& value);
    bool serviceSpecificationInfoIsSet() const;
    void unsetServiceSpecificationInfo();
    /// <summary>
    /// 
    /// </summary>
    std::vector<org::openapitools::server::model::MultipleUnitUsage> getMultipleUnitUsage() const;
    void setMultipleUnitUsage(std::vector<org::openapitools::server::model::MultipleUnitUsage> const& value);
    bool multipleUnitUsageIsSet() const;
    void unsetMultipleUnitUsage();
    /// <summary>
    /// 
    /// </summary>
    std::vector<org::openapitools::server::model::Trigger> getTriggers() const;
    void setTriggers(std::vector<org::openapitools::server::model::Trigger> const& value);
    bool triggersIsSet() const;
    void unsetTriggers();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PDUSessionChargingInformation getPDUSessionChargingInformation() const;
    void setPDUSessionChargingInformation(org::openapitools::server::model::PDUSessionChargingInformation const& value);
    bool pDUSessionChargingInformationIsSet() const;
    void unsetPDUSessionChargingInformation();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::RoamingQBCInformation getRoamingQBCInformation() const;
    void setRoamingQBCInformation(org::openapitools::server::model::RoamingQBCInformation const& value);
    bool roamingQBCInformationIsSet() const;
    void unsetRoamingQBCInformation();

    friend  void to_json(nlohmann::json& j, const ChargingDataRequest& o);
    friend  void from_json(const nlohmann::json& j, ChargingDataRequest& o);
protected:
    std::string m_SubscriberIdentifier;
    bool m_SubscriberIdentifierIsSet;
    org::openapitools::server::model::NFIdentification m_NfConsumerIdentification;

    std::string m_InvocationTimeStamp;

    int32_t m_InvocationSequenceNumber;

    bool m_RetransmissionIndicator;
    bool m_RetransmissionIndicatorIsSet;
    std::string m_ServiceSpecificationInfo;
    bool m_ServiceSpecificationInfoIsSet;
    std::vector<org::openapitools::server::model::MultipleUnitUsage> m_MultipleUnitUsage;
    bool m_MultipleUnitUsageIsSet;
    std::vector<org::openapitools::server::model::Trigger> m_Triggers;
    bool m_TriggersIsSet;
    org::openapitools::server::model::PDUSessionChargingInformation m_PDUSessionChargingInformation;
    bool m_PDUSessionChargingInformationIsSet;
    org::openapitools::server::model::RoamingQBCInformation m_RoamingQBCInformation;
    bool m_RoamingQBCInformationIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ChargingDataRequest_H_ */
