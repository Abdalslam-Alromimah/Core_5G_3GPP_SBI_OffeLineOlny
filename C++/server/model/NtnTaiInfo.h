/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * NtnTaiInfo.h
 *
 * 
 */

#ifndef NtnTaiInfo_H_
#define NtnTaiInfo_H_


#include "PlmnIdNid.h"
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  NtnTaiInfo
{
public:
    NtnTaiInfo();
    virtual ~NtnTaiInfo() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const NtnTaiInfo& rhs) const;
    bool operator!=(const NtnTaiInfo& rhs) const;

    /////////////////////////////////////////////
    /// NtnTaiInfo members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PlmnIdNid getPlmnId() const;
    void setPlmnId(org::openapitools::server::model::PlmnIdNid const& value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<org::openapitools::server::model::std::string> getTacList() const;
    void setTacList(std::vector<org::openapitools::server::model::std::string> const& value);
    /// <summary>
    /// 2 or 3-octet string identifying a tracking area code as specified in clause 9.3.3.10  of 3GPP TS 38.413, in hexadecimal representation. Each character in the string shall  take a value of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4 bits. The most significant character representing the 4 most significant bits of the TAC shall  appear first in the string, and the character representing the 4 least significant bit  of the TAC shall appear last in the string.  
    /// </summary>
    std::string getDerivedTac() const;
    void setDerivedTac(std::string const& value);
    bool derivedTacIsSet() const;
    void unsetDerivedTac();

    friend  void to_json(nlohmann::json& j, const NtnTaiInfo& o);
    friend  void from_json(const nlohmann::json& j, NtnTaiInfo& o);
protected:
    org::openapitools::server::model::PlmnIdNid m_PlmnId;

    std::vector<org::openapitools::server::model::std::string> m_TacList;

    std::string m_DerivedTac;
    bool m_DerivedTacIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* NtnTaiInfo_H_ */
