/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "InvocationResult.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

InvocationResult::InvocationResult()
{
    m_ErrorIsSet = false;
    m_FailureHandlingIsSet = false;
    
}

void InvocationResult::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool InvocationResult::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool InvocationResult::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "InvocationResult" : pathPrefix;

            
    return success;
}

bool InvocationResult::operator==(const InvocationResult& rhs) const
{
    return
    
    
    
    ((!errorIsSet() && !rhs.errorIsSet()) || (errorIsSet() && rhs.errorIsSet() && getError() == rhs.getError())) &&
    
    
    ((!failureHandlingIsSet() && !rhs.failureHandlingIsSet()) || (failureHandlingIsSet() && rhs.failureHandlingIsSet() && getFailureHandling() == rhs.getFailureHandling()))
    
    ;
}

bool InvocationResult::operator!=(const InvocationResult& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const InvocationResult& o)
{
    j = nlohmann::json::object();
    if(o.errorIsSet())
        j["error"] = o.m_Error;
    if(o.failureHandlingIsSet())
        j["failureHandling"] = o.m_FailureHandling;
    
}

void from_json(const nlohmann::json& j, InvocationResult& o)
{
    if(j.find("error") != j.end())
    {
        j.at("error").get_to(o.m_Error);
        o.m_ErrorIsSet = true;
    } 
    if(j.find("failureHandling") != j.end())
    {
        j.at("failureHandling").get_to(o.m_FailureHandling);
        o.m_FailureHandlingIsSet = true;
    } 
    
}

org::openapitools::server::model::ProblemDetails InvocationResult::getError() const
{
    return m_Error;
}
void InvocationResult::setError(org::openapitools::server::model::ProblemDetails const& value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}
bool InvocationResult::errorIsSet() const
{
    return m_ErrorIsSet;
}
void InvocationResult::unsetError()
{
    m_ErrorIsSet = false;
}
org::openapitools::server::model::FailureHandling InvocationResult::getFailureHandling() const
{
    return m_FailureHandling;
}
void InvocationResult::setFailureHandling(org::openapitools::server::model::FailureHandling const& value)
{
    m_FailureHandling = value;
    m_FailureHandlingIsSet = true;
}
bool InvocationResult::failureHandlingIsSet() const
{
    return m_FailureHandlingIsSet;
}
void InvocationResult::unsetFailureHandling()
{
    m_FailureHandlingIsSet = false;
}


} // namespace org::openapitools::server::model

