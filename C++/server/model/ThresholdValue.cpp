/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ThresholdValue.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ThresholdValue::ThresholdValue()
{
    m_RttThres = 0;
    m_RttThresIsSet = false;
    m_PlrThres = 0;
    m_PlrThresIsSet = false;
    
}

void ThresholdValue::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ThresholdValue::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ThresholdValue::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ThresholdValue" : pathPrefix;

         
    if (rttThresIsSet())
    {
        const int32_t& value = m_RttThres;
        const std::string currentValuePath = _pathPrefix + ".rttThres";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }

    }
         
    if (plrThresIsSet())
    {
        const int32_t& value = m_PlrThres;
        const std::string currentValuePath = _pathPrefix + ".plrThres";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }
        if (value > 1000)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 1000;";
        }

    }
    
    return success;
}

bool ThresholdValue::operator==(const ThresholdValue& rhs) const
{
    return
    
    
    
    ((!rttThresIsSet() && !rhs.rttThresIsSet()) || (rttThresIsSet() && rhs.rttThresIsSet() && getRttThres() == rhs.getRttThres())) &&
    
    
    ((!plrThresIsSet() && !rhs.plrThresIsSet()) || (plrThresIsSet() && rhs.plrThresIsSet() && getPlrThres() == rhs.getPlrThres()))
    
    ;
}

bool ThresholdValue::operator!=(const ThresholdValue& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ThresholdValue& o)
{
    j = nlohmann::json::object();
    if(o.rttThresIsSet())
        j["rttThres"] = o.m_RttThres;
    if(o.plrThresIsSet())
        j["plrThres"] = o.m_PlrThres;
    
}

void from_json(const nlohmann::json& j, ThresholdValue& o)
{
    if(j.find("rttThres") != j.end())
    {
        j.at("rttThres").get_to(o.m_RttThres);
        o.m_RttThresIsSet = true;
    } 
    if(j.find("plrThres") != j.end())
    {
        j.at("plrThres").get_to(o.m_PlrThres);
        o.m_PlrThresIsSet = true;
    } 
    
}

int32_t ThresholdValue::getRttThres() const
{
    return m_RttThres;
}
void ThresholdValue::setRttThres(int32_t const value)
{
    m_RttThres = value;
    m_RttThresIsSet = true;
}
bool ThresholdValue::rttThresIsSet() const
{
    return m_RttThresIsSet;
}
void ThresholdValue::unsetRttThres()
{
    m_RttThresIsSet = false;
}
int32_t ThresholdValue::getPlrThres() const
{
    return m_PlrThres;
}
void ThresholdValue::setPlrThres(int32_t const value)
{
    m_PlrThres = value;
    m_PlrThresIsSet = true;
}
bool ThresholdValue::plrThresIsSet() const
{
    return m_PlrThresIsSet;
}
void ThresholdValue::unsetPlrThres()
{
    m_PlrThresIsSet = false;
}


} // namespace org::openapitools::server::model

