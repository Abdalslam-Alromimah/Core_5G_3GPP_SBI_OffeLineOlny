/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RANSecondaryRATUsageReport.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

RANSecondaryRATUsageReport::RANSecondaryRATUsageReport()
{
    m_RANSecondaryRATTypeIsSet = false;
    m_QosFlowsUsageReportsIsSet = false;
    
}

void RANSecondaryRATUsageReport::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool RANSecondaryRATUsageReport::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RANSecondaryRATUsageReport::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RANSecondaryRATUsageReport" : pathPrefix;

             
    if (qosFlowsUsageReportsIsSet())
    {
        const std::vector<org::openapitools::server::model::QosFlowsUsageReport>& value = m_QosFlowsUsageReports;
        const std::string currentValuePath = _pathPrefix + ".qosFlowsUsageReports";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::QosFlowsUsageReport& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".qosFlowsUsageReports") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool RANSecondaryRATUsageReport::operator==(const RANSecondaryRATUsageReport& rhs) const
{
    return
    
    
    
    ((!rANSecondaryRATTypeIsSet() && !rhs.rANSecondaryRATTypeIsSet()) || (rANSecondaryRATTypeIsSet() && rhs.rANSecondaryRATTypeIsSet() && getRANSecondaryRATType() == rhs.getRANSecondaryRATType())) &&
    
    
    ((!qosFlowsUsageReportsIsSet() && !rhs.qosFlowsUsageReportsIsSet()) || (qosFlowsUsageReportsIsSet() && rhs.qosFlowsUsageReportsIsSet() && getQosFlowsUsageReports() == rhs.getQosFlowsUsageReports()))
    
    ;
}

bool RANSecondaryRATUsageReport::operator!=(const RANSecondaryRATUsageReport& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RANSecondaryRATUsageReport& o)
{
    j = nlohmann::json::object();
    if(o.rANSecondaryRATTypeIsSet())
        j["rANSecondaryRATType"] = o.m_RANSecondaryRATType;
    if(o.qosFlowsUsageReportsIsSet() || !o.m_QosFlowsUsageReports.empty())
        j["qosFlowsUsageReports"] = o.m_QosFlowsUsageReports;
    
}

void from_json(const nlohmann::json& j, RANSecondaryRATUsageReport& o)
{
    if(j.find("rANSecondaryRATType") != j.end())
    {
        j.at("rANSecondaryRATType").get_to(o.m_RANSecondaryRATType);
        o.m_RANSecondaryRATTypeIsSet = true;
    } 
    if(j.find("qosFlowsUsageReports") != j.end())
    {
        j.at("qosFlowsUsageReports").get_to(o.m_QosFlowsUsageReports);
        o.m_QosFlowsUsageReportsIsSet = true;
    } 
    
}

org::openapitools::server::model::RatType RANSecondaryRATUsageReport::getRANSecondaryRATType() const
{
    return m_RANSecondaryRATType;
}
void RANSecondaryRATUsageReport::setRANSecondaryRATType(org::openapitools::server::model::RatType const& value)
{
    m_RANSecondaryRATType = value;
    m_RANSecondaryRATTypeIsSet = true;
}
bool RANSecondaryRATUsageReport::rANSecondaryRATTypeIsSet() const
{
    return m_RANSecondaryRATTypeIsSet;
}
void RANSecondaryRATUsageReport::unsetRANSecondaryRATType()
{
    m_RANSecondaryRATTypeIsSet = false;
}
std::vector<org::openapitools::server::model::QosFlowsUsageReport> RANSecondaryRATUsageReport::getQosFlowsUsageReports() const
{
    return m_QosFlowsUsageReports;
}
void RANSecondaryRATUsageReport::setQosFlowsUsageReports(std::vector<org::openapitools::server::model::QosFlowsUsageReport> const& value)
{
    m_QosFlowsUsageReports = value;
    m_QosFlowsUsageReportsIsSet = true;
}
bool RANSecondaryRATUsageReport::qosFlowsUsageReportsIsSet() const
{
    return m_QosFlowsUsageReportsIsSet;
}
void RANSecondaryRATUsageReport::unsetQosFlowsUsageReports()
{
    m_QosFlowsUsageReportsIsSet = false;
}


} // namespace org::openapitools::server::model

