/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * PDUAddress.h
 *
 * 
 */

#ifndef PDUAddress_H_
#define PDUAddress_H_


#include <string>
#include "Ipv6Addr.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  PDUAddress
{
public:
    PDUAddress();
    virtual ~PDUAddress() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const PDUAddress& rhs) const;
    bool operator!=(const PDUAddress& rhs) const;

    /////////////////////////////////////////////
    /// PDUAddress members

    /// <summary>
    /// String identifying a IPv4 address formatted in the &#39;dotted decimal&#39; notation as defined in RFC 1166. 
    /// </summary>
    std::string getPduIPv4Address() const;
    void setPduIPv4Address(std::string const& value);
    bool pduIPv4AddressIsSet() const;
    void unsetPduIPv4Address();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Ipv6Addr getPduIPv6AddresswithPrefix() const;
    void setPduIPv6AddresswithPrefix(org::openapitools::server::model::Ipv6Addr const& value);
    bool pduIPv6AddresswithPrefixIsSet() const;
    void unsetPduIPv6AddresswithPrefix();
    /// <summary>
    /// 
    /// </summary>
    int32_t getPduAddressprefixlength() const;
    void setPduAddressprefixlength(int32_t const value);
    bool pduAddressprefixlengthIsSet() const;
    void unsetPduAddressprefixlength();
    /// <summary>
    /// 
    /// </summary>
    bool isIPv4dynamicAddressFlag() const;
    void setIPv4dynamicAddressFlag(bool const value);
    bool iPv4dynamicAddressFlagIsSet() const;
    void unsetIPv4dynamicAddressFlag();
    /// <summary>
    /// 
    /// </summary>
    bool isIPv6dynamicPrefixFlag() const;
    void setIPv6dynamicPrefixFlag(bool const value);
    bool iPv6dynamicPrefixFlagIsSet() const;
    void unsetIPv6dynamicPrefixFlag();

    friend  void to_json(nlohmann::json& j, const PDUAddress& o);
    friend  void from_json(const nlohmann::json& j, PDUAddress& o);
protected:
    std::string m_PduIPv4Address;
    bool m_PduIPv4AddressIsSet;
    org::openapitools::server::model::Ipv6Addr m_PduIPv6AddresswithPrefix;
    bool m_PduIPv6AddresswithPrefixIsSet;
    int32_t m_PduAddressprefixlength;
    bool m_PduAddressprefixlengthIsSet;
    bool m_IPv4dynamicAddressFlag;
    bool m_IPv4dynamicAddressFlagIsSet;
    bool m_IPv6dynamicPrefixFlag;
    bool m_IPv6dynamicPrefixFlagIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* PDUAddress_H_ */
