/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * PDUSessionInformation.h
 *
 * 
 */

#ifndef PDUSessionInformation_H_
#define PDUSessionInformation_H_


#include "Ambr.h"
#include "AuthorizedDefaultQos.h"
#include "SubscribedDefaultQos.h"
#include "RatType.h"
#include <string>
#include "r_3GPPPSDataOffStatus.h"
#include "NetworkSlicingInfo.h"
#include "PlmnId.h"
#include <vector>
#include "ServingNetworkFunctionID.h"
#include "MAPDUSessionInformation.h"
#include "PDUAddress.h"
#include "PduSessionType.h"
#include "SscMode.h"
#include "ChargingCharacteristicsSelectionMode.h"
#include "RanNasRelCause.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  PDUSessionInformation
{
public:
    PDUSessionInformation();
    virtual ~PDUSessionInformation() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const PDUSessionInformation& rhs) const;
    bool operator!=(const PDUSessionInformation& rhs) const;

    /////////////////////////////////////////////
    /// PDUSessionInformation members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::NetworkSlicingInfo getNetworkSlicingInfo() const;
    void setNetworkSlicingInfo(org::openapitools::server::model::NetworkSlicingInfo const& value);
    bool networkSlicingInfoIsSet() const;
    void unsetNetworkSlicingInfo();
    /// <summary>
    /// Unsigned integer identifying a PDU session, within the range 0 to 255, as specified in  clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU Session ID is allocated by the  Core Network for UEs not supporting N1 mode, reserved range 64 to 95 is used. PDU Session ID  within the reserved range is only visible in the Core Network.  
    /// </summary>
    int32_t getPduSessionID() const;
    void setPduSessionID(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PduSessionType getPduType() const;
    void setPduType(org::openapitools::server::model::PduSessionType const& value);
    bool pduTypeIsSet() const;
    void unsetPduType();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::SscMode getSscMode() const;
    void setSscMode(org::openapitools::server::model::SscMode const& value);
    bool sscModeIsSet() const;
    void unsetSscMode();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PlmnId getHPlmnId() const;
    void setHPlmnId(org::openapitools::server::model::PlmnId const& value);
    bool hPlmnIdIsSet() const;
    void unsetHPlmnId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ServingNetworkFunctionID getServingNetworkFunctionID() const;
    void setServingNetworkFunctionID(org::openapitools::server::model::ServingNetworkFunctionID const& value);
    bool servingNetworkFunctionIDIsSet() const;
    void unsetServingNetworkFunctionID();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::RatType getRatType() const;
    void setRatType(org::openapitools::server::model::RatType const& value);
    bool ratTypeIsSet() const;
    void unsetRatType();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::RatType getMAPDUNon3GPPRATType() const;
    void setMAPDUNon3GPPRATType(org::openapitools::server::model::RatType const& value);
    bool mAPDUNon3GPPRATTypeIsSet() const;
    void unsetMAPDUNon3GPPRATType();
    /// <summary>
    /// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \&quot;Label1.Label2.Label3\&quot;). 
    /// </summary>
    std::string getDnnId() const;
    void setDnnId(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getChargingCharacteristics() const;
    void setChargingCharacteristics(std::string const& value);
    bool chargingCharacteristicsIsSet() const;
    void unsetChargingCharacteristics();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ChargingCharacteristicsSelectionMode getChargingCharacteristicsSelectionMode() const;
    void setChargingCharacteristicsSelectionMode(org::openapitools::server::model::ChargingCharacteristicsSelectionMode const& value);
    bool chargingCharacteristicsSelectionModeIsSet() const;
    void unsetChargingCharacteristicsSelectionMode();
    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    std::string getStartTime() const;
    void setStartTime(std::string const& value);
    bool startTimeIsSet() const;
    void unsetStartTime();
    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    std::string getStopTime() const;
    void setStopTime(std::string const& value);
    bool stopTimeIsSet() const;
    void unsetStopTime();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::r_3GPPPSDataOffStatus getR3gppPSDataOffStatus() const;
    void setR3gppPSDataOffStatus(org::openapitools::server::model::r_3GPPPSDataOffStatus const& value);
    bool r3gppPSDataOffStatusIsSet() const;
    void unsetr_3gppPSDataOffStatus();
    /// <summary>
    /// 
    /// </summary>
    bool isSessionStopIndicator() const;
    void setSessionStopIndicator(bool const value);
    bool sessionStopIndicatorIsSet() const;
    void unsetSessionStopIndicator();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PDUAddress getPduAddress() const;
    void setPduAddress(org::openapitools::server::model::PDUAddress const& value);
    bool pduAddressIsSet() const;
    void unsetPduAddress();
    /// <summary>
    /// 
    /// </summary>
    int32_t getDiagnostics() const;
    void setDiagnostics(int32_t const value);
    bool diagnosticsIsSet() const;
    void unsetDiagnostics();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::AuthorizedDefaultQos getAuthorizedQoSInformation() const;
    void setAuthorizedQoSInformation(org::openapitools::server::model::AuthorizedDefaultQos const& value);
    bool authorizedQoSInformationIsSet() const;
    void unsetAuthorizedQoSInformation();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::SubscribedDefaultQos getSubscribedQoSInformation() const;
    void setSubscribedQoSInformation(org::openapitools::server::model::SubscribedDefaultQos const& value);
    bool subscribedQoSInformationIsSet() const;
    void unsetSubscribedQoSInformation();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Ambr getAuthorizedSessionAMBR() const;
    void setAuthorizedSessionAMBR(org::openapitools::server::model::Ambr const& value);
    bool authorizedSessionAMBRIsSet() const;
    void unsetAuthorizedSessionAMBR();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Ambr getSubscribedSessionAMBR() const;
    void setSubscribedSessionAMBR(org::openapitools::server::model::Ambr const& value);
    bool subscribedSessionAMBRIsSet() const;
    void unsetSubscribedSessionAMBR();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PlmnId getServingCNPlmnId() const;
    void setServingCNPlmnId(org::openapitools::server::model::PlmnId const& value);
    bool servingCNPlmnIdIsSet() const;
    void unsetServingCNPlmnId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::MAPDUSessionInformation getMAPDUSessionInformation() const;
    void setMAPDUSessionInformation(org::openapitools::server::model::MAPDUSessionInformation const& value);
    bool mAPDUSessionInformationIsSet() const;
    void unsetMAPDUSessionInformation();
    /// <summary>
    /// 
    /// </summary>
    std::vector<org::openapitools::server::model::RanNasRelCause> getEnhancedDiagnostics() const;
    void setEnhancedDiagnostics(std::vector<org::openapitools::server::model::RanNasRelCause> const& value);
    bool enhancedDiagnosticsIsSet() const;
    void unsetEnhancedDiagnostics();

    friend  void to_json(nlohmann::json& j, const PDUSessionInformation& o);
    friend  void from_json(const nlohmann::json& j, PDUSessionInformation& o);
protected:
    org::openapitools::server::model::NetworkSlicingInfo m_NetworkSlicingInfo;
    bool m_NetworkSlicingInfoIsSet;
    int32_t m_PduSessionID;

    org::openapitools::server::model::PduSessionType m_PduType;
    bool m_PduTypeIsSet;
    org::openapitools::server::model::SscMode m_SscMode;
    bool m_SscModeIsSet;
    org::openapitools::server::model::PlmnId m_HPlmnId;
    bool m_HPlmnIdIsSet;
    org::openapitools::server::model::ServingNetworkFunctionID m_ServingNetworkFunctionID;
    bool m_ServingNetworkFunctionIDIsSet;
    org::openapitools::server::model::RatType m_RatType;
    bool m_RatTypeIsSet;
    org::openapitools::server::model::RatType m_MAPDUNon3GPPRATType;
    bool m_MAPDUNon3GPPRATTypeIsSet;
    std::string m_DnnId;

    std::string m_ChargingCharacteristics;
    bool m_ChargingCharacteristicsIsSet;
    org::openapitools::server::model::ChargingCharacteristicsSelectionMode m_ChargingCharacteristicsSelectionMode;
    bool m_ChargingCharacteristicsSelectionModeIsSet;
    std::string m_StartTime;
    bool m_StartTimeIsSet;
    std::string m_StopTime;
    bool m_StopTimeIsSet;
    org::openapitools::server::model::r_3GPPPSDataOffStatus m_r_3gppPSDataOffStatus;
    bool m_r_3gppPSDataOffStatusIsSet;
    bool m_SessionStopIndicator;
    bool m_SessionStopIndicatorIsSet;
    org::openapitools::server::model::PDUAddress m_PduAddress;
    bool m_PduAddressIsSet;
    int32_t m_Diagnostics;
    bool m_DiagnosticsIsSet;
    org::openapitools::server::model::AuthorizedDefaultQos m_AuthorizedQoSInformation;
    bool m_AuthorizedQoSInformationIsSet;
    org::openapitools::server::model::SubscribedDefaultQos m_SubscribedQoSInformation;
    bool m_SubscribedQoSInformationIsSet;
    org::openapitools::server::model::Ambr m_AuthorizedSessionAMBR;
    bool m_AuthorizedSessionAMBRIsSet;
    org::openapitools::server::model::Ambr m_SubscribedSessionAMBR;
    bool m_SubscribedSessionAMBRIsSet;
    org::openapitools::server::model::PlmnId m_ServingCNPlmnId;
    bool m_ServingCNPlmnIdIsSet;
    org::openapitools::server::model::MAPDUSessionInformation m_MAPDUSessionInformation;
    bool m_MAPDUSessionInformationIsSet;
    std::vector<org::openapitools::server::model::RanNasRelCause> m_EnhancedDiagnostics;
    bool m_EnhancedDiagnosticsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* PDUSessionInformation_H_ */
