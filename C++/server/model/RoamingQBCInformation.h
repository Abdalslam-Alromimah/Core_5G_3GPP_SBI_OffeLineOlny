/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * RoamingQBCInformation.h
 *
 * 
 */

#ifndef RoamingQBCInformation_H_
#define RoamingQBCInformation_H_


#include <string>
#include "RoamingChargingProfile.h"
#include "MultipleQFIcontainer.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  RoamingQBCInformation
{
public:
    RoamingQBCInformation();
    virtual ~RoamingQBCInformation() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const RoamingQBCInformation& rhs) const;
    bool operator!=(const RoamingQBCInformation& rhs) const;

    /////////////////////////////////////////////
    /// RoamingQBCInformation members

    /// <summary>
    /// 
    /// </summary>
    std::vector<org::openapitools::server::model::MultipleQFIcontainer> getMultipleQFIcontainer() const;
    void setMultipleQFIcontainer(std::vector<org::openapitools::server::model::MultipleQFIcontainer> const& value);
    bool multipleQFIcontainerIsSet() const;
    void unsetMultipleQFIcontainer();
    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    std::string getUPFID() const;
    void setUPFID(std::string const& value);
    bool uPFIDIsSet() const;
    void unsetUPFID();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::RoamingChargingProfile getRoamingChargingProfile() const;
    void setRoamingChargingProfile(org::openapitools::server::model::RoamingChargingProfile const& value);
    bool roamingChargingProfileIsSet() const;
    void unsetRoamingChargingProfile();

    friend  void to_json(nlohmann::json& j, const RoamingQBCInformation& o);
    friend  void from_json(const nlohmann::json& j, RoamingQBCInformation& o);
protected:
    std::vector<org::openapitools::server::model::MultipleQFIcontainer> m_MultipleQFIcontainer;
    bool m_MultipleQFIcontainerIsSet;
    std::string m_UPFID;
    bool m_UPFIDIsSet;
    org::openapitools::server::model::RoamingChargingProfile m_RoamingChargingProfile;
    bool m_RoamingChargingProfileIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* RoamingQBCInformation_H_ */
