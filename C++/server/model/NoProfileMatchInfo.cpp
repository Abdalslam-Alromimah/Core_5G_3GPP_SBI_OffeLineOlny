/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "NoProfileMatchInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

NoProfileMatchInfo::NoProfileMatchInfo()
{
    m_QueryParamCombinationListIsSet = false;
    
}

void NoProfileMatchInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool NoProfileMatchInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool NoProfileMatchInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "NoProfileMatchInfo" : pathPrefix;

        
    if (!m_Reason.validate()) {
        msg << _pathPrefix << ": Reason is invalid;";
        success = false;
    }     
    if (queryParamCombinationListIsSet())
    {
        const std::vector<org::openapitools::server::model::QueryParamCombination>& value = m_QueryParamCombinationList;
        const std::string currentValuePath = _pathPrefix + ".queryParamCombinationList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::QueryParamCombination& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".queryParamCombinationList") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool NoProfileMatchInfo::operator==(const NoProfileMatchInfo& rhs) const
{
    return
    
    
    (getReason() == rhs.getReason())
     &&
    
    
    ((!queryParamCombinationListIsSet() && !rhs.queryParamCombinationListIsSet()) || (queryParamCombinationListIsSet() && rhs.queryParamCombinationListIsSet() && getQueryParamCombinationList() == rhs.getQueryParamCombinationList()))
    
    ;
}

bool NoProfileMatchInfo::operator!=(const NoProfileMatchInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NoProfileMatchInfo& o)
{
    j = nlohmann::json::object();
    j["reason"] = o.m_Reason;
    if(o.queryParamCombinationListIsSet() || !o.m_QueryParamCombinationList.empty())
        j["queryParamCombinationList"] = o.m_QueryParamCombinationList;
    
}

void from_json(const nlohmann::json& j, NoProfileMatchInfo& o)
{
    j.at("reason").get_to(o.m_Reason);
    if(j.find("queryParamCombinationList") != j.end())
    {
        j.at("queryParamCombinationList").get_to(o.m_QueryParamCombinationList);
        o.m_QueryParamCombinationListIsSet = true;
    } 
    
}

org::openapitools::server::model::NoProfileMatchReason NoProfileMatchInfo::getReason() const
{
    return m_Reason;
}
void NoProfileMatchInfo::setReason(org::openapitools::server::model::NoProfileMatchReason const& value)
{
    m_Reason = value;
}
std::vector<org::openapitools::server::model::QueryParamCombination> NoProfileMatchInfo::getQueryParamCombinationList() const
{
    return m_QueryParamCombinationList;
}
void NoProfileMatchInfo::setQueryParamCombinationList(std::vector<org::openapitools::server::model::QueryParamCombination> const& value)
{
    m_QueryParamCombinationList = value;
    m_QueryParamCombinationListIsSet = true;
}
bool NoProfileMatchInfo::queryParamCombinationListIsSet() const
{
    return m_QueryParamCombinationListIsSet;
}
void NoProfileMatchInfo::unsetQueryParamCombinationList()
{
    m_QueryParamCombinationListIsSet = false;
}


} // namespace org::openapitools::server::model

