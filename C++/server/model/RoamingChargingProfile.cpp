/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RoamingChargingProfile.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

RoamingChargingProfile::RoamingChargingProfile()
{
    m_TriggersIsSet = false;
    m_PartialRecordMethodIsSet = false;
    
}

void RoamingChargingProfile::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool RoamingChargingProfile::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RoamingChargingProfile::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RoamingChargingProfile" : pathPrefix;

         
    if (triggersIsSet())
    {
        const std::vector<org::openapitools::server::model::Trigger>& value = m_Triggers;
        const std::string currentValuePath = _pathPrefix + ".triggers";
                
        
        if (value.size() < 0)
        {
            success = false;
            msg << currentValuePath << ": must have at least 0 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::Trigger& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".triggers") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool RoamingChargingProfile::operator==(const RoamingChargingProfile& rhs) const
{
    return
    
    
    
    ((!triggersIsSet() && !rhs.triggersIsSet()) || (triggersIsSet() && rhs.triggersIsSet() && getTriggers() == rhs.getTriggers())) &&
    
    
    ((!partialRecordMethodIsSet() && !rhs.partialRecordMethodIsSet()) || (partialRecordMethodIsSet() && rhs.partialRecordMethodIsSet() && getPartialRecordMethod() == rhs.getPartialRecordMethod()))
    
    ;
}

bool RoamingChargingProfile::operator!=(const RoamingChargingProfile& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RoamingChargingProfile& o)
{
    j = nlohmann::json::object();
    if(o.triggersIsSet() || !o.m_Triggers.empty())
        j["triggers"] = o.m_Triggers;
    if(o.partialRecordMethodIsSet())
        j["partialRecordMethod"] = o.m_PartialRecordMethod;
    
}

void from_json(const nlohmann::json& j, RoamingChargingProfile& o)
{
    if(j.find("triggers") != j.end())
    {
        j.at("triggers").get_to(o.m_Triggers);
        o.m_TriggersIsSet = true;
    } 
    if(j.find("partialRecordMethod") != j.end())
    {
        j.at("partialRecordMethod").get_to(o.m_PartialRecordMethod);
        o.m_PartialRecordMethodIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::Trigger> RoamingChargingProfile::getTriggers() const
{
    return m_Triggers;
}
void RoamingChargingProfile::setTriggers(std::vector<org::openapitools::server::model::Trigger> const& value)
{
    m_Triggers = value;
    m_TriggersIsSet = true;
}
bool RoamingChargingProfile::triggersIsSet() const
{
    return m_TriggersIsSet;
}
void RoamingChargingProfile::unsetTriggers()
{
    m_TriggersIsSet = false;
}
org::openapitools::server::model::PartialRecordMethod RoamingChargingProfile::getPartialRecordMethod() const
{
    return m_PartialRecordMethod;
}
void RoamingChargingProfile::setPartialRecordMethod(org::openapitools::server::model::PartialRecordMethod const& value)
{
    m_PartialRecordMethod = value;
    m_PartialRecordMethodIsSet = true;
}
bool RoamingChargingProfile::partialRecordMethodIsSet() const
{
    return m_PartialRecordMethodIsSet;
}
void RoamingChargingProfile::unsetPartialRecordMethod()
{
    m_PartialRecordMethodIsSet = false;
}


} // namespace org::openapitools::server::model

