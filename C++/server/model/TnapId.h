/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * TnapId.h
 *
 * Contain the TNAP Identifier see clause5.6.2 of 3GPP TS 23.501.
 */

#ifndef TnapId_H_
#define TnapId_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Contain the TNAP Identifier see clause5.6.2 of 3GPP TS 23.501.
/// </summary>
class  TnapId
{
public:
    TnapId();
    virtual ~TnapId() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const TnapId& rhs) const;
    bool operator!=(const TnapId& rhs) const;

    /////////////////////////////////////////////
    /// TnapId members

    /// <summary>
    /// This IE shall be present if the UE is accessing the 5GC via a trusted WLAN access network.When present, it shall contain the SSID of the access point to which the UE is attached, that is received over NGAP,  see IEEE Std 802.11-2012.  
    /// </summary>
    std::string getSsId() const;
    void setSsId(std::string const& value);
    bool ssIdIsSet() const;
    void unsetSsId();
    /// <summary>
    /// When present, it shall contain the BSSID of the access point to which the UE is attached, that is received over NGAP, see IEEE Std 802.11-2012.  
    /// </summary>
    std::string getBssId() const;
    void setBssId(std::string const& value);
    bool bssIdIsSet() const;
    void unsetBssId();
    /// <summary>
    /// string with format &#39;bytes&#39; as defined in OpenAPI
    /// </summary>
    std::string getCivicAddress() const;
    void setCivicAddress(std::string const& value);
    bool civicAddressIsSet() const;
    void unsetCivicAddress();

    friend  void to_json(nlohmann::json& j, const TnapId& o);
    friend  void from_json(const nlohmann::json& j, TnapId& o);
protected:
    std::string m_SsId;
    bool m_SsIdIsSet;
    std::string m_BssId;
    bool m_BssIdIsSet;
    std::string m_CivicAddress;
    bool m_CivicAddressIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* TnapId_H_ */
