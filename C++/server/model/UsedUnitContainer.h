/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * UsedUnitContainer.h
 *
 * 
 */

#ifndef UsedUnitContainer_H_
#define UsedUnitContainer_H_


#include "Trigger.h"
#include <string>
#include <vector>
#include "PDUContainerInformation.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  UsedUnitContainer
{
public:
    UsedUnitContainer();
    virtual ~UsedUnitContainer() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const UsedUnitContainer& rhs) const;
    bool operator!=(const UsedUnitContainer& rhs) const;

    /////////////////////////////////////////////
    /// UsedUnitContainer members

    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
    /// </summary>
    int32_t getServiceId() const;
    void setServiceId(int32_t const value);
    bool serviceIdIsSet() const;
    void unsetServiceId();
    /// <summary>
    /// 
    /// </summary>
    std::vector<org::openapitools::server::model::Trigger> getTriggers() const;
    void setTriggers(std::vector<org::openapitools::server::model::Trigger> const& value);
    bool triggersIsSet() const;
    void unsetTriggers();
    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    std::string getTriggerTimestamp() const;
    void setTriggerTimestamp(std::string const& value);
    bool triggerTimestampIsSet() const;
    void unsetTriggerTimestamp();
    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
    /// </summary>
    int32_t getTime() const;
    void setTime(int32_t const value);
    bool timeIsSet() const;
    void unsetTime();
    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 64-bit integer. 
    /// </summary>
    int32_t getTotalVolume() const;
    void setTotalVolume(int32_t const value);
    bool totalVolumeIsSet() const;
    void unsetTotalVolume();
    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 64-bit integer. 
    /// </summary>
    int32_t getUplinkVolume() const;
    void setUplinkVolume(int32_t const value);
    bool uplinkVolumeIsSet() const;
    void unsetUplinkVolume();
    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 64-bit integer. 
    /// </summary>
    int32_t getDownlinkVolume() const;
    void setDownlinkVolume(int32_t const value);
    bool downlinkVolumeIsSet() const;
    void unsetDownlinkVolume();
    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 64-bit integer. 
    /// </summary>
    int32_t getServiceSpecificUnits() const;
    void setServiceSpecificUnits(int32_t const value);
    bool serviceSpecificUnitsIsSet() const;
    void unsetServiceSpecificUnits();
    /// <summary>
    /// 
    /// </summary>
    std::vector<org::openapitools::server::model::std::string> getEventTimeStamps() const;
    void setEventTimeStamps(std::vector<org::openapitools::server::model::std::string> const& value);
    bool eventTimeStampsIsSet() const;
    void unsetEventTimeStamps();
    /// <summary>
    /// 
    /// </summary>
    int32_t getLocalSequenceNumber() const;
    void setLocalSequenceNumber(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PDUContainerInformation getPDUContainerInformation() const;
    void setPDUContainerInformation(org::openapitools::server::model::PDUContainerInformation const& value);
    bool pDUContainerInformationIsSet() const;
    void unsetPDUContainerInformation();

    friend  void to_json(nlohmann::json& j, const UsedUnitContainer& o);
    friend  void from_json(const nlohmann::json& j, UsedUnitContainer& o);
protected:
    int32_t m_ServiceId;
    bool m_ServiceIdIsSet;
    std::vector<org::openapitools::server::model::Trigger> m_Triggers;
    bool m_TriggersIsSet;
    std::string m_TriggerTimestamp;
    bool m_TriggerTimestampIsSet;
    int32_t m_Time;
    bool m_TimeIsSet;
    int32_t m_TotalVolume;
    bool m_TotalVolumeIsSet;
    int32_t m_UplinkVolume;
    bool m_UplinkVolumeIsSet;
    int32_t m_DownlinkVolume;
    bool m_DownlinkVolumeIsSet;
    int32_t m_ServiceSpecificUnits;
    bool m_ServiceSpecificUnitsIsSet;
    std::vector<org::openapitools::server::model::std::string> m_EventTimeStamps;
    bool m_EventTimeStampsIsSet;
    int32_t m_LocalSequenceNumber;

    org::openapitools::server::model::PDUContainerInformation m_PDUContainerInformation;
    bool m_PDUContainerInformationIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* UsedUnitContainer_H_ */
