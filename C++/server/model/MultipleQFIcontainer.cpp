/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "MultipleQFIcontainer.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

MultipleQFIcontainer::MultipleQFIcontainer()
{
    m_TriggersIsSet = false;
    m_TriggerTimestamp = "";
    m_TriggerTimestampIsSet = false;
    m_Time = 0;
    m_TimeIsSet = false;
    m_TotalVolume = 0;
    m_TotalVolumeIsSet = false;
    m_UplinkVolume = 0;
    m_UplinkVolumeIsSet = false;
    m_LocalSequenceNumber = 0;
    m_QFIContainerInformationIsSet = false;
    
}

void MultipleQFIcontainer::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool MultipleQFIcontainer::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool MultipleQFIcontainer::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "MultipleQFIcontainer" : pathPrefix;

         
    if (triggersIsSet())
    {
        const std::vector<org::openapitools::server::model::Trigger>& value = m_Triggers;
        const std::string currentValuePath = _pathPrefix + ".triggers";
                
        
        if (value.size() < 0)
        {
            success = false;
            msg << currentValuePath << ": must have at least 0 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::Trigger& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".triggers") && success;
 
                i++;
            }
        }

    }
             
    if (timeIsSet())
    {
        const int32_t& value = m_Time;
        const std::string currentValuePath = _pathPrefix + ".time";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }
        if (value > 4294967295)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 4294967295;";
        }

    }
         
    if (totalVolumeIsSet())
    {
        const int32_t& value = m_TotalVolume;
        const std::string currentValuePath = _pathPrefix + ".totalVolume";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }
        if (value > -1)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to -1;";
        }

    }
         
    if (uplinkVolumeIsSet())
    {
        const int32_t& value = m_UplinkVolume;
        const std::string currentValuePath = _pathPrefix + ".uplinkVolume";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }
        if (value > -1)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to -1;";
        }

    }
            
    return success;
}

bool MultipleQFIcontainer::operator==(const MultipleQFIcontainer& rhs) const
{
    return
    
    
    
    ((!triggersIsSet() && !rhs.triggersIsSet()) || (triggersIsSet() && rhs.triggersIsSet() && getTriggers() == rhs.getTriggers())) &&
    
    
    ((!triggerTimestampIsSet() && !rhs.triggerTimestampIsSet()) || (triggerTimestampIsSet() && rhs.triggerTimestampIsSet() && getTriggerTimestamp() == rhs.getTriggerTimestamp())) &&
    
    
    ((!timeIsSet() && !rhs.timeIsSet()) || (timeIsSet() && rhs.timeIsSet() && getTime() == rhs.getTime())) &&
    
    
    ((!totalVolumeIsSet() && !rhs.totalVolumeIsSet()) || (totalVolumeIsSet() && rhs.totalVolumeIsSet() && getTotalVolume() == rhs.getTotalVolume())) &&
    
    
    ((!uplinkVolumeIsSet() && !rhs.uplinkVolumeIsSet()) || (uplinkVolumeIsSet() && rhs.uplinkVolumeIsSet() && getUplinkVolume() == rhs.getUplinkVolume())) &&
    
    (getLocalSequenceNumber() == rhs.getLocalSequenceNumber())
     &&
    
    
    ((!qFIContainerInformationIsSet() && !rhs.qFIContainerInformationIsSet()) || (qFIContainerInformationIsSet() && rhs.qFIContainerInformationIsSet() && getQFIContainerInformation() == rhs.getQFIContainerInformation()))
    
    ;
}

bool MultipleQFIcontainer::operator!=(const MultipleQFIcontainer& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const MultipleQFIcontainer& o)
{
    j = nlohmann::json::object();
    if(o.triggersIsSet() || !o.m_Triggers.empty())
        j["triggers"] = o.m_Triggers;
    if(o.triggerTimestampIsSet())
        j["triggerTimestamp"] = o.m_TriggerTimestamp;
    if(o.timeIsSet())
        j["time"] = o.m_Time;
    if(o.totalVolumeIsSet())
        j["totalVolume"] = o.m_TotalVolume;
    if(o.uplinkVolumeIsSet())
        j["uplinkVolume"] = o.m_UplinkVolume;
    j["localSequenceNumber"] = o.m_LocalSequenceNumber;
    if(o.qFIContainerInformationIsSet())
        j["qFIContainerInformation"] = o.m_QFIContainerInformation;
    
}

void from_json(const nlohmann::json& j, MultipleQFIcontainer& o)
{
    if(j.find("triggers") != j.end())
    {
        j.at("triggers").get_to(o.m_Triggers);
        o.m_TriggersIsSet = true;
    } 
    if(j.find("triggerTimestamp") != j.end())
    {
        j.at("triggerTimestamp").get_to(o.m_TriggerTimestamp);
        o.m_TriggerTimestampIsSet = true;
    } 
    if(j.find("time") != j.end())
    {
        j.at("time").get_to(o.m_Time);
        o.m_TimeIsSet = true;
    } 
    if(j.find("totalVolume") != j.end())
    {
        j.at("totalVolume").get_to(o.m_TotalVolume);
        o.m_TotalVolumeIsSet = true;
    } 
    if(j.find("uplinkVolume") != j.end())
    {
        j.at("uplinkVolume").get_to(o.m_UplinkVolume);
        o.m_UplinkVolumeIsSet = true;
    } 
    j.at("localSequenceNumber").get_to(o.m_LocalSequenceNumber);
    if(j.find("qFIContainerInformation") != j.end())
    {
        j.at("qFIContainerInformation").get_to(o.m_QFIContainerInformation);
        o.m_QFIContainerInformationIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::Trigger> MultipleQFIcontainer::getTriggers() const
{
    return m_Triggers;
}
void MultipleQFIcontainer::setTriggers(std::vector<org::openapitools::server::model::Trigger> const& value)
{
    m_Triggers = value;
    m_TriggersIsSet = true;
}
bool MultipleQFIcontainer::triggersIsSet() const
{
    return m_TriggersIsSet;
}
void MultipleQFIcontainer::unsetTriggers()
{
    m_TriggersIsSet = false;
}
std::string MultipleQFIcontainer::getTriggerTimestamp() const
{
    return m_TriggerTimestamp;
}
void MultipleQFIcontainer::setTriggerTimestamp(std::string const& value)
{
    m_TriggerTimestamp = value;
    m_TriggerTimestampIsSet = true;
}
bool MultipleQFIcontainer::triggerTimestampIsSet() const
{
    return m_TriggerTimestampIsSet;
}
void MultipleQFIcontainer::unsetTriggerTimestamp()
{
    m_TriggerTimestampIsSet = false;
}
int32_t MultipleQFIcontainer::getTime() const
{
    return m_Time;
}
void MultipleQFIcontainer::setTime(int32_t const value)
{
    m_Time = value;
    m_TimeIsSet = true;
}
bool MultipleQFIcontainer::timeIsSet() const
{
    return m_TimeIsSet;
}
void MultipleQFIcontainer::unsetTime()
{
    m_TimeIsSet = false;
}
int32_t MultipleQFIcontainer::getTotalVolume() const
{
    return m_TotalVolume;
}
void MultipleQFIcontainer::setTotalVolume(int32_t const value)
{
    m_TotalVolume = value;
    m_TotalVolumeIsSet = true;
}
bool MultipleQFIcontainer::totalVolumeIsSet() const
{
    return m_TotalVolumeIsSet;
}
void MultipleQFIcontainer::unsetTotalVolume()
{
    m_TotalVolumeIsSet = false;
}
int32_t MultipleQFIcontainer::getUplinkVolume() const
{
    return m_UplinkVolume;
}
void MultipleQFIcontainer::setUplinkVolume(int32_t const value)
{
    m_UplinkVolume = value;
    m_UplinkVolumeIsSet = true;
}
bool MultipleQFIcontainer::uplinkVolumeIsSet() const
{
    return m_UplinkVolumeIsSet;
}
void MultipleQFIcontainer::unsetUplinkVolume()
{
    m_UplinkVolumeIsSet = false;
}
int32_t MultipleQFIcontainer::getLocalSequenceNumber() const
{
    return m_LocalSequenceNumber;
}
void MultipleQFIcontainer::setLocalSequenceNumber(int32_t const value)
{
    m_LocalSequenceNumber = value;
}
org::openapitools::server::model::QFIContainerInformation MultipleQFIcontainer::getQFIContainerInformation() const
{
    return m_QFIContainerInformation;
}
void MultipleQFIcontainer::setQFIContainerInformation(org::openapitools::server::model::QFIContainerInformation const& value)
{
    m_QFIContainerInformation = value;
    m_QFIContainerInformationIsSet = true;
}
bool MultipleQFIcontainer::qFIContainerInformationIsSet() const
{
    return m_QFIContainerInformationIsSet;
}
void MultipleQFIcontainer::unsetQFIContainerInformation()
{
    m_QFIContainerInformationIsSet = false;
}


} // namespace org::openapitools::server::model

