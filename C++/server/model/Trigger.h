/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Trigger.h
 *
 * 
 */

#ifndef Trigger_H_
#define Trigger_H_


#include "TriggerCategory.h"
#include "TriggerType.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  Trigger
{
public:
    Trigger();
    virtual ~Trigger() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Trigger& rhs) const;
    bool operator!=(const Trigger& rhs) const;

    /////////////////////////////////////////////
    /// Trigger members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::TriggerType getTriggerType() const;
    void setTriggerType(org::openapitools::server::model::TriggerType const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::TriggerCategory getTriggerCategory() const;
    void setTriggerCategory(org::openapitools::server::model::TriggerCategory const& value);
    /// <summary>
    /// indicating a time in seconds.
    /// </summary>
    int32_t getTimeLimit() const;
    void setTimeLimit(int32_t const value);
    bool timeLimitIsSet() const;
    void unsetTimeLimit();
    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
    /// </summary>
    int32_t getVolumeLimit() const;
    void setVolumeLimit(int32_t const value);
    bool volumeLimitIsSet() const;
    void unsetVolumeLimit();
    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 64-bit integer. 
    /// </summary>
    int32_t getVolumeLimit64() const;
    void setVolumeLimit64(int32_t const value);
    bool volumeLimit64IsSet() const;
    void unsetVolumeLimit64();
    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
    /// </summary>
    int32_t getEventLimit() const;
    void setEventLimit(int32_t const value);
    bool eventLimitIsSet() const;
    void unsetEventLimit();
    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
    /// </summary>
    int32_t getMaxNumberOfccc() const;
    void setMaxNumberOfccc(int32_t const value);
    bool maxNumberOfcccIsSet() const;
    void unsetMaxNumberOfccc();

    friend  void to_json(nlohmann::json& j, const Trigger& o);
    friend  void from_json(const nlohmann::json& j, Trigger& o);
protected:
    org::openapitools::server::model::TriggerType m_TriggerType;

    org::openapitools::server::model::TriggerCategory m_TriggerCategory;

    int32_t m_TimeLimit;
    bool m_TimeLimitIsSet;
    int32_t m_VolumeLimit;
    bool m_VolumeLimitIsSet;
    int32_t m_VolumeLimit64;
    bool m_VolumeLimit64IsSet;
    int32_t m_EventLimit;
    bool m_EventLimitIsSet;
    int32_t m_MaxNumberOfccc;
    bool m_MaxNumberOfcccIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* Trigger_H_ */
