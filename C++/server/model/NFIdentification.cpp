/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "NFIdentification.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

NFIdentification::NFIdentification()
{
    m_NFName = "";
    m_NFNameIsSet = false;
    m_NFIPv4Address = "";
    m_NFIPv4AddressIsSet = false;
    m_NFIPv6AddressIsSet = false;
    m_NFPLMNIDIsSet = false;
    m_NFFqdn = "";
    m_NFFqdnIsSet = false;
    
}

void NFIdentification::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool NFIdentification::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool NFIdentification::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "NFIdentification" : pathPrefix;

             
    if (nFIPv4AddressIsSet())
    {
        const std::string& value = m_NFIPv4Address;
        const std::string currentValuePath = _pathPrefix + ".nFIPv4Address";
                
        

    }
                
    if (!m_NodeFunctionality.validate()) {
        msg << _pathPrefix << ": NodeFunctionality is invalid;";
        success = false;
    }    
    return success;
}

bool NFIdentification::operator==(const NFIdentification& rhs) const
{
    return
    
    
    
    ((!nFNameIsSet() && !rhs.nFNameIsSet()) || (nFNameIsSet() && rhs.nFNameIsSet() && getNFName() == rhs.getNFName())) &&
    
    
    ((!nFIPv4AddressIsSet() && !rhs.nFIPv4AddressIsSet()) || (nFIPv4AddressIsSet() && rhs.nFIPv4AddressIsSet() && getNFIPv4Address() == rhs.getNFIPv4Address())) &&
    
    
    ((!nFIPv6AddressIsSet() && !rhs.nFIPv6AddressIsSet()) || (nFIPv6AddressIsSet() && rhs.nFIPv6AddressIsSet() && getNFIPv6Address() == rhs.getNFIPv6Address())) &&
    
    
    ((!nFPLMNIDIsSet() && !rhs.nFPLMNIDIsSet()) || (nFPLMNIDIsSet() && rhs.nFPLMNIDIsSet() && getNFPLMNID() == rhs.getNFPLMNID())) &&
    
    (getNodeFunctionality() == rhs.getNodeFunctionality())
     &&
    
    
    ((!nFFqdnIsSet() && !rhs.nFFqdnIsSet()) || (nFFqdnIsSet() && rhs.nFFqdnIsSet() && getNFFqdn() == rhs.getNFFqdn()))
    
    ;
}

bool NFIdentification::operator!=(const NFIdentification& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NFIdentification& o)
{
    j = nlohmann::json::object();
    if(o.nFNameIsSet())
        j["nFName"] = o.m_NFName;
    if(o.nFIPv4AddressIsSet())
        j["nFIPv4Address"] = o.m_NFIPv4Address;
    if(o.nFIPv6AddressIsSet())
        j["nFIPv6Address"] = o.m_NFIPv6Address;
    if(o.nFPLMNIDIsSet())
        j["nFPLMNID"] = o.m_NFPLMNID;
    j["nodeFunctionality"] = o.m_NodeFunctionality;
    if(o.nFFqdnIsSet())
        j["nFFqdn"] = o.m_NFFqdn;
    
}

void from_json(const nlohmann::json& j, NFIdentification& o)
{
    if(j.find("nFName") != j.end())
    {
        j.at("nFName").get_to(o.m_NFName);
        o.m_NFNameIsSet = true;
    } 
    if(j.find("nFIPv4Address") != j.end())
    {
        j.at("nFIPv4Address").get_to(o.m_NFIPv4Address);
        o.m_NFIPv4AddressIsSet = true;
    } 
    if(j.find("nFIPv6Address") != j.end())
    {
        j.at("nFIPv6Address").get_to(o.m_NFIPv6Address);
        o.m_NFIPv6AddressIsSet = true;
    } 
    if(j.find("nFPLMNID") != j.end())
    {
        j.at("nFPLMNID").get_to(o.m_NFPLMNID);
        o.m_NFPLMNIDIsSet = true;
    } 
    j.at("nodeFunctionality").get_to(o.m_NodeFunctionality);
    if(j.find("nFFqdn") != j.end())
    {
        j.at("nFFqdn").get_to(o.m_NFFqdn);
        o.m_NFFqdnIsSet = true;
    } 
    
}

std::string NFIdentification::getNFName() const
{
    return m_NFName;
}
void NFIdentification::setNFName(std::string const& value)
{
    m_NFName = value;
    m_NFNameIsSet = true;
}
bool NFIdentification::nFNameIsSet() const
{
    return m_NFNameIsSet;
}
void NFIdentification::unsetNFName()
{
    m_NFNameIsSet = false;
}
std::string NFIdentification::getNFIPv4Address() const
{
    return m_NFIPv4Address;
}
void NFIdentification::setNFIPv4Address(std::string const& value)
{
    m_NFIPv4Address = value;
    m_NFIPv4AddressIsSet = true;
}
bool NFIdentification::nFIPv4AddressIsSet() const
{
    return m_NFIPv4AddressIsSet;
}
void NFIdentification::unsetNFIPv4Address()
{
    m_NFIPv4AddressIsSet = false;
}
org::openapitools::server::model::Ipv6Addr NFIdentification::getNFIPv6Address() const
{
    return m_NFIPv6Address;
}
void NFIdentification::setNFIPv6Address(org::openapitools::server::model::Ipv6Addr const& value)
{
    m_NFIPv6Address = value;
    m_NFIPv6AddressIsSet = true;
}
bool NFIdentification::nFIPv6AddressIsSet() const
{
    return m_NFIPv6AddressIsSet;
}
void NFIdentification::unsetNFIPv6Address()
{
    m_NFIPv6AddressIsSet = false;
}
org::openapitools::server::model::PlmnId NFIdentification::getNFPLMNID() const
{
    return m_NFPLMNID;
}
void NFIdentification::setNFPLMNID(org::openapitools::server::model::PlmnId const& value)
{
    m_NFPLMNID = value;
    m_NFPLMNIDIsSet = true;
}
bool NFIdentification::nFPLMNIDIsSet() const
{
    return m_NFPLMNIDIsSet;
}
void NFIdentification::unsetNFPLMNID()
{
    m_NFPLMNIDIsSet = false;
}
org::openapitools::server::model::NodeFunctionality NFIdentification::getNodeFunctionality() const
{
    return m_NodeFunctionality;
}
void NFIdentification::setNodeFunctionality(org::openapitools::server::model::NodeFunctionality const& value)
{
    m_NodeFunctionality = value;
}
std::string NFIdentification::getNFFqdn() const
{
    return m_NFFqdn;
}
void NFIdentification::setNFFqdn(std::string const& value)
{
    m_NFFqdn = value;
    m_NFFqdnIsSet = true;
}
bool NFIdentification::nFFqdnIsSet() const
{
    return m_NFFqdnIsSet;
}
void NFIdentification::unsetNFFqdn()
{
    m_NFFqdnIsSet = false;
}


} // namespace org::openapitools::server::model

