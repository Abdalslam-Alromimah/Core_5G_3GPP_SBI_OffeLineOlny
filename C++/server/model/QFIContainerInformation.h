/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * QFIContainerInformation.h
 *
 * 
 */

#ifndef QFIContainerInformation_H_
#define QFIContainerInformation_H_


#include "ServingNetworkFunctionID.h"
#include "RatType.h"
#include <string>
#include "UserLocation.h"
#include "r_3GPPPSDataOffStatus.h"
#include "QosData.h"
#include "PresenceInfo.h"
#include <map>
#include <vector>
#include "QosCharacteristics.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  QFIContainerInformation
{
public:
    QFIContainerInformation();
    virtual ~QFIContainerInformation() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const QFIContainerInformation& rhs) const;
    bool operator!=(const QFIContainerInformation& rhs) const;

    /////////////////////////////////////////////
    /// QFIContainerInformation members

    /// <summary>
    /// Unsigned integer identifying a QoS flow, within the range 0 to 63.
    /// </summary>
    int32_t getQFI() const;
    void setQFI(int32_t const value);
    bool qFIIsSet() const;
    void unsetQFI();
    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    std::string getTimeofFirstUsage() const;
    void setTimeofFirstUsage(std::string const& value);
    bool timeofFirstUsageIsSet() const;
    void unsetTimeofFirstUsage();
    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    std::string getTimeofLastUsage() const;
    void setTimeofLastUsage(std::string const& value);
    bool timeofLastUsageIsSet() const;
    void unsetTimeofLastUsage();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::QosData getQoSInformation() const;
    void setQoSInformation(org::openapitools::server::model::QosData const& value);
    bool qoSInformationIsSet() const;
    void unsetQoSInformation();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::QosCharacteristics getQoSCharacteristics() const;
    void setQoSCharacteristics(org::openapitools::server::model::QosCharacteristics const& value);
    bool qoSCharacteristicsIsSet() const;
    void unsetQoSCharacteristics();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::UserLocation getUserLocationInformation() const;
    void setUserLocationInformation(org::openapitools::server::model::UserLocation const& value);
    bool userLocationInformationIsSet() const;
    void unsetUserLocationInformation();
    /// <summary>
    /// String with format \&quot;time-numoffset\&quot; optionally appended by \&quot;daylightSavingTime\&quot;, where  - \&quot;time-numoffset\&quot; shall represent the time zone adjusted for daylight saving time and be    encoded as time-numoffset as defined in clause 5.6 of IETF RFC 3339;  - \&quot;daylightSavingTime\&quot; shall represent the adjustment that has been made and shall be    encoded as \&quot;+1\&quot; or \&quot;+2\&quot; for a +1 or +2 hours adjustment.   The example is for 8 hours behind UTC, +1 hour adjustment for Daylight Saving Time. 
    /// </summary>
    std::string getUetimeZone() const;
    void setUetimeZone(std::string const& value);
    bool uetimeZoneIsSet() const;
    void unsetUetimeZone();
    /// <summary>
    /// 
    /// </summary>
    std::map<std::string, org::openapitools::server::model::PresenceInfo> getPresenceReportingAreaInformation() const;
    void setPresenceReportingAreaInformation(std::map<std::string, org::openapitools::server::model::PresenceInfo> const& value);
    bool presenceReportingAreaInformationIsSet() const;
    void unsetPresenceReportingAreaInformation();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::RatType getRATType() const;
    void setRATType(org::openapitools::server::model::RatType const& value);
    bool rATTypeIsSet() const;
    void unsetRATType();
    /// <summary>
    /// 
    /// </summary>
    std::vector<org::openapitools::server::model::ServingNetworkFunctionID> getServingNetworkFunctionID() const;
    void setServingNetworkFunctionID(std::vector<org::openapitools::server::model::ServingNetworkFunctionID> const& value);
    bool servingNetworkFunctionIDIsSet() const;
    void unsetServingNetworkFunctionID();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::r_3GPPPSDataOffStatus getR3gppPSDataOffStatus() const;
    void setR3gppPSDataOffStatus(org::openapitools::server::model::r_3GPPPSDataOffStatus const& value);
    bool r3gppPSDataOffStatusIsSet() const;
    void unsetr_3gppPSDataOffStatus();

    friend  void to_json(nlohmann::json& j, const QFIContainerInformation& o);
    friend  void from_json(const nlohmann::json& j, QFIContainerInformation& o);
protected:
    int32_t m_QFI;
    bool m_QFIIsSet;
    std::string m_TimeofFirstUsage;
    bool m_TimeofFirstUsageIsSet;
    std::string m_TimeofLastUsage;
    bool m_TimeofLastUsageIsSet;
    org::openapitools::server::model::QosData m_QoSInformation;
    bool m_QoSInformationIsSet;
    org::openapitools::server::model::QosCharacteristics m_QoSCharacteristics;
    bool m_QoSCharacteristicsIsSet;
    org::openapitools::server::model::UserLocation m_UserLocationInformation;
    bool m_UserLocationInformationIsSet;
    std::string m_UetimeZone;
    bool m_UetimeZoneIsSet;
    std::map<std::string, org::openapitools::server::model::PresenceInfo> m_PresenceReportingAreaInformation;
    bool m_PresenceReportingAreaInformationIsSet;
    org::openapitools::server::model::RatType m_RATType;
    bool m_RATTypeIsSet;
    std::vector<org::openapitools::server::model::ServingNetworkFunctionID> m_ServingNetworkFunctionID;
    bool m_ServingNetworkFunctionIDIsSet;
    org::openapitools::server::model::r_3GPPPSDataOffStatus m_r_3gppPSDataOffStatus;
    bool m_r_3gppPSDataOffStatusIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* QFIContainerInformation_H_ */
