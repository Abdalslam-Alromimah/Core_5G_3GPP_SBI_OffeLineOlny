/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * NFIdentification.h
 *
 * 
 */

#ifndef NFIdentification_H_
#define NFIdentification_H_


#include <string>
#include "Ipv6Addr.h"
#include "PlmnId.h"
#include "NodeFunctionality.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  NFIdentification
{
public:
    NFIdentification();
    virtual ~NFIdentification() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const NFIdentification& rhs) const;
    bool operator!=(const NFIdentification& rhs) const;

    /////////////////////////////////////////////
    /// NFIdentification members

    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    std::string getNFName() const;
    void setNFName(std::string const& value);
    bool nFNameIsSet() const;
    void unsetNFName();
    /// <summary>
    /// String identifying a IPv4 address formatted in the &#39;dotted decimal&#39; notation as defined in RFC 1166. 
    /// </summary>
    std::string getNFIPv4Address() const;
    void setNFIPv4Address(std::string const& value);
    bool nFIPv4AddressIsSet() const;
    void unsetNFIPv4Address();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Ipv6Addr getNFIPv6Address() const;
    void setNFIPv6Address(org::openapitools::server::model::Ipv6Addr const& value);
    bool nFIPv6AddressIsSet() const;
    void unsetNFIPv6Address();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PlmnId getNFPLMNID() const;
    void setNFPLMNID(org::openapitools::server::model::PlmnId const& value);
    bool nFPLMNIDIsSet() const;
    void unsetNFPLMNID();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::NodeFunctionality getNodeFunctionality() const;
    void setNodeFunctionality(org::openapitools::server::model::NodeFunctionality const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getNFFqdn() const;
    void setNFFqdn(std::string const& value);
    bool nFFqdnIsSet() const;
    void unsetNFFqdn();

    friend  void to_json(nlohmann::json& j, const NFIdentification& o);
    friend  void from_json(const nlohmann::json& j, NFIdentification& o);
protected:
    std::string m_NFName;
    bool m_NFNameIsSet;
    std::string m_NFIPv4Address;
    bool m_NFIPv4AddressIsSet;
    org::openapitools::server::model::Ipv6Addr m_NFIPv6Address;
    bool m_NFIPv6AddressIsSet;
    org::openapitools::server::model::PlmnId m_NFPLMNID;
    bool m_NFPLMNIDIsSet;
    org::openapitools::server::model::NodeFunctionality m_NodeFunctionality;

    std::string m_NFFqdn;
    bool m_NFFqdnIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* NFIdentification_H_ */
