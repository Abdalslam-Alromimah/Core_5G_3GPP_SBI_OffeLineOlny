/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GNbId.h
 *
 * Provides the G-NB identifier.
 */

#ifndef GNbId_H_
#define GNbId_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Provides the G-NB identifier.
/// </summary>
class  GNbId
{
public:
    GNbId();
    virtual ~GNbId() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GNbId& rhs) const;
    bool operator!=(const GNbId& rhs) const;

    /////////////////////////////////////////////
    /// GNbId members

    /// <summary>
    /// Unsigned integer representing the bit length of the gNB ID as defined in clause 9.3.1.6 of 3GPP TS 38.413 [11], within the range 22 to 32. 
    /// </summary>
    int32_t getBitLength() const;
    void setBitLength(int32_t const value);
    /// <summary>
    /// This represents the identifier of the gNB. The value of the gNB ID shall be encoded in hexadecimal representation. Each character in the string shall take a value of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4 bits. The padding 0 shall be added to make multiple nibbles,  the most significant character representing the padding 0 if required together with the 4 most significant bits of the gNB ID shall appear first in the string, and the character representing the 4 least significant bit of the gNB ID shall appear last in the string. 
    /// </summary>
    std::string getGNBValue() const;
    void setGNBValue(std::string const& value);

    friend  void to_json(nlohmann::json& j, const GNbId& o);
    friend  void from_json(const nlohmann::json& j, GNbId& o);
protected:
    int32_t m_BitLength;

    std::string m_GNBValue;

    
};

} // namespace org::openapitools::server::model

#endif /* GNbId_H_ */
