/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "NtnTaiInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

NtnTaiInfo::NtnTaiInfo()
{
    m_DerivedTac = "";
    m_DerivedTacIsSet = false;
    
}

void NtnTaiInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool NtnTaiInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool NtnTaiInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "NtnTaiInfo" : pathPrefix;

        
    if (!m_PlmnId.validate()) {
        msg << _pathPrefix << ": PlmnId is invalid;";
        success = false;
    }     
    
    /* TacList */ {
        const std::vector<org::openapitools::server::model::std::string>& value = m_TacList;
        const std::string currentValuePath = _pathPrefix + ".tacList";
                
        
        if (value.size() < 1)
        {
            success = false;
            msg << currentValuePath << ": must have at least 1 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
         
    if (derivedTacIsSet())
    {
        const std::string& value = m_DerivedTac;
        const std::string currentValuePath = _pathPrefix + ".derivedTac";
                
        

    }
    
    return success;
}

bool NtnTaiInfo::operator==(const NtnTaiInfo& rhs) const
{
    return
    
    
    (getPlmnId() == rhs.getPlmnId())
     &&
    
    (getTacList() == rhs.getTacList())
     &&
    
    
    ((!derivedTacIsSet() && !rhs.derivedTacIsSet()) || (derivedTacIsSet() && rhs.derivedTacIsSet() && getDerivedTac() == rhs.getDerivedTac()))
    
    ;
}

bool NtnTaiInfo::operator!=(const NtnTaiInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NtnTaiInfo& o)
{
    j = nlohmann::json::object();
    j["plmnId"] = o.m_PlmnId;
    j["tacList"] = o.m_TacList;
    if(o.derivedTacIsSet())
        j["derivedTac"] = o.m_DerivedTac;
    
}

void from_json(const nlohmann::json& j, NtnTaiInfo& o)
{
    j.at("plmnId").get_to(o.m_PlmnId);
    j.at("tacList").get_to(o.m_TacList);
    if(j.find("derivedTac") != j.end())
    {
        j.at("derivedTac").get_to(o.m_DerivedTac);
        o.m_DerivedTacIsSet = true;
    } 
    
}

org::openapitools::server::model::PlmnIdNid NtnTaiInfo::getPlmnId() const
{
    return m_PlmnId;
}
void NtnTaiInfo::setPlmnId(org::openapitools::server::model::PlmnIdNid const& value)
{
    m_PlmnId = value;
}
std::vector<org::openapitools::server::model::std::string> NtnTaiInfo::getTacList() const
{
    return m_TacList;
}
void NtnTaiInfo::setTacList(std::vector<org::openapitools::server::model::std::string> const& value)
{
    m_TacList = value;
}
std::string NtnTaiInfo::getDerivedTac() const
{
    return m_DerivedTac;
}
void NtnTaiInfo::setDerivedTac(std::string const& value)
{
    m_DerivedTac = value;
    m_DerivedTacIsSet = true;
}
bool NtnTaiInfo::derivedTacIsSet() const
{
    return m_DerivedTacIsSet;
}
void NtnTaiInfo::unsetDerivedTac()
{
    m_DerivedTacIsSet = false;
}


} // namespace org::openapitools::server::model

