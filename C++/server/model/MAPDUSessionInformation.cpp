/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "MAPDUSessionInformation.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

MAPDUSessionInformation::MAPDUSessionInformation()
{
    m_MAPDUSessionIndicatorIsSet = false;
    m_ATSSSCapabilityIsSet = false;
    
}

void MAPDUSessionInformation::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool MAPDUSessionInformation::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool MAPDUSessionInformation::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "MAPDUSessionInformation" : pathPrefix;

            
    return success;
}

bool MAPDUSessionInformation::operator==(const MAPDUSessionInformation& rhs) const
{
    return
    
    
    
    ((!mAPDUSessionIndicatorIsSet() && !rhs.mAPDUSessionIndicatorIsSet()) || (mAPDUSessionIndicatorIsSet() && rhs.mAPDUSessionIndicatorIsSet() && getMAPDUSessionIndicator() == rhs.getMAPDUSessionIndicator())) &&
    
    
    ((!aTSSSCapabilityIsSet() && !rhs.aTSSSCapabilityIsSet()) || (aTSSSCapabilityIsSet() && rhs.aTSSSCapabilityIsSet() && getATSSSCapability() == rhs.getATSSSCapability()))
    
    ;
}

bool MAPDUSessionInformation::operator!=(const MAPDUSessionInformation& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const MAPDUSessionInformation& o)
{
    j = nlohmann::json::object();
    if(o.mAPDUSessionIndicatorIsSet())
        j["mAPDUSessionIndicator"] = o.m_MAPDUSessionIndicator;
    if(o.aTSSSCapabilityIsSet())
        j["aTSSSCapability"] = o.m_ATSSSCapability;
    
}

void from_json(const nlohmann::json& j, MAPDUSessionInformation& o)
{
    if(j.find("mAPDUSessionIndicator") != j.end())
    {
        j.at("mAPDUSessionIndicator").get_to(o.m_MAPDUSessionIndicator);
        o.m_MAPDUSessionIndicatorIsSet = true;
    } 
    if(j.find("aTSSSCapability") != j.end())
    {
        j.at("aTSSSCapability").get_to(o.m_ATSSSCapability);
        o.m_ATSSSCapabilityIsSet = true;
    } 
    
}

org::openapitools::server::model::MaPduIndication MAPDUSessionInformation::getMAPDUSessionIndicator() const
{
    return m_MAPDUSessionIndicator;
}
void MAPDUSessionInformation::setMAPDUSessionIndicator(org::openapitools::server::model::MaPduIndication const& value)
{
    m_MAPDUSessionIndicator = value;
    m_MAPDUSessionIndicatorIsSet = true;
}
bool MAPDUSessionInformation::mAPDUSessionIndicatorIsSet() const
{
    return m_MAPDUSessionIndicatorIsSet;
}
void MAPDUSessionInformation::unsetMAPDUSessionIndicator()
{
    m_MAPDUSessionIndicatorIsSet = false;
}
org::openapitools::server::model::AtsssCapability MAPDUSessionInformation::getATSSSCapability() const
{
    return m_ATSSSCapability;
}
void MAPDUSessionInformation::setATSSSCapability(org::openapitools::server::model::AtsssCapability const& value)
{
    m_ATSSSCapability = value;
    m_ATSSSCapabilityIsSet = true;
}
bool MAPDUSessionInformation::aTSSSCapabilityIsSet() const
{
    return m_ATSSSCapabilityIsSet;
}
void MAPDUSessionInformation::unsetATSSSCapability()
{
    m_ATSSSCapabilityIsSet = false;
}


} // namespace org::openapitools::server::model

