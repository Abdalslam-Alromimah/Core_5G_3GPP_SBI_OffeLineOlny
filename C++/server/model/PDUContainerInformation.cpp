/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "PDUContainerInformation.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

PDUContainerInformation::PDUContainerInformation()
{
    m_TimeofFirstUsage = "";
    m_TimeofFirstUsageIsSet = false;
    m_TimeofLastUsage = "";
    m_TimeofLastUsageIsSet = false;
    m_QoSInformationIsSet = false;
    m_QoSCharacteristicsIsSet = false;
    m_AFCorrelationInformation = "";
    m_AFCorrelationInformationIsSet = false;
    m_UserLocationInformationIsSet = false;
    m_UetimeZone = "";
    m_UetimeZoneIsSet = false;
    m_RATTypeIsSet = false;
    m_ServingNodeIDIsSet = false;
    m_PresenceReportingAreaInformationIsSet = false;
    m_r_3gppPSDataOffStatusIsSet = false;
    m_SponsorIdentity = "";
    m_SponsorIdentityIsSet = false;
    m_ApplicationserviceProviderIdentity = "";
    m_ApplicationserviceProviderIdentityIsSet = false;
    m_ChargingRuleBaseName = "";
    m_ChargingRuleBaseNameIsSet = false;
    m_MAPDUSteeringFunctionalityIsSet = false;
    m_MAPDUSteeringModeIsSet = false;
    
}

void PDUContainerInformation::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool PDUContainerInformation::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool PDUContainerInformation::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "PDUContainerInformation" : pathPrefix;

                                         
    if (servingNodeIDIsSet())
    {
        const std::vector<org::openapitools::server::model::ServingNetworkFunctionID>& value = m_ServingNodeID;
        const std::string currentValuePath = _pathPrefix + ".servingNodeID";
                
        
        if (value.size() < 0)
        {
            success = false;
            msg << currentValuePath << ": must have at least 0 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ServingNetworkFunctionID& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".servingNodeID") && success;
 
                i++;
            }
        }

    }
         
    if (presenceReportingAreaInformationIsSet())
    {
        const std::map<std::string, org::openapitools::server::model::PresenceInfo>& value = m_PresenceReportingAreaInformation;
        const std::string currentValuePath = _pathPrefix + ".presenceReportingAreaInformation";
                
        

    }
                            
    return success;
}

bool PDUContainerInformation::operator==(const PDUContainerInformation& rhs) const
{
    return
    
    
    
    ((!timeofFirstUsageIsSet() && !rhs.timeofFirstUsageIsSet()) || (timeofFirstUsageIsSet() && rhs.timeofFirstUsageIsSet() && getTimeofFirstUsage() == rhs.getTimeofFirstUsage())) &&
    
    
    ((!timeofLastUsageIsSet() && !rhs.timeofLastUsageIsSet()) || (timeofLastUsageIsSet() && rhs.timeofLastUsageIsSet() && getTimeofLastUsage() == rhs.getTimeofLastUsage())) &&
    
    
    ((!qoSInformationIsSet() && !rhs.qoSInformationIsSet()) || (qoSInformationIsSet() && rhs.qoSInformationIsSet() && getQoSInformation() == rhs.getQoSInformation())) &&
    
    
    ((!qoSCharacteristicsIsSet() && !rhs.qoSCharacteristicsIsSet()) || (qoSCharacteristicsIsSet() && rhs.qoSCharacteristicsIsSet() && getQoSCharacteristics() == rhs.getQoSCharacteristics())) &&
    
    
    ((!aFCorrelationInformationIsSet() && !rhs.aFCorrelationInformationIsSet()) || (aFCorrelationInformationIsSet() && rhs.aFCorrelationInformationIsSet() && getAFCorrelationInformation() == rhs.getAFCorrelationInformation())) &&
    
    
    ((!userLocationInformationIsSet() && !rhs.userLocationInformationIsSet()) || (userLocationInformationIsSet() && rhs.userLocationInformationIsSet() && getUserLocationInformation() == rhs.getUserLocationInformation())) &&
    
    
    ((!uetimeZoneIsSet() && !rhs.uetimeZoneIsSet()) || (uetimeZoneIsSet() && rhs.uetimeZoneIsSet() && getUetimeZone() == rhs.getUetimeZone())) &&
    
    
    ((!rATTypeIsSet() && !rhs.rATTypeIsSet()) || (rATTypeIsSet() && rhs.rATTypeIsSet() && getRATType() == rhs.getRATType())) &&
    
    
    ((!servingNodeIDIsSet() && !rhs.servingNodeIDIsSet()) || (servingNodeIDIsSet() && rhs.servingNodeIDIsSet() && getServingNodeID() == rhs.getServingNodeID())) &&
    
    
    ((!presenceReportingAreaInformationIsSet() && !rhs.presenceReportingAreaInformationIsSet()) || (presenceReportingAreaInformationIsSet() && rhs.presenceReportingAreaInformationIsSet() && getPresenceReportingAreaInformation() == rhs.getPresenceReportingAreaInformation())) &&
    
    
    ((!r3gppPSDataOffStatusIsSet() && !rhs.r3gppPSDataOffStatusIsSet()) || (r3gppPSDataOffStatusIsSet() && rhs.r3gppPSDataOffStatusIsSet() && getR3gppPSDataOffStatus() == rhs.getR3gppPSDataOffStatus())) &&
    
    
    ((!sponsorIdentityIsSet() && !rhs.sponsorIdentityIsSet()) || (sponsorIdentityIsSet() && rhs.sponsorIdentityIsSet() && getSponsorIdentity() == rhs.getSponsorIdentity())) &&
    
    
    ((!applicationserviceProviderIdentityIsSet() && !rhs.applicationserviceProviderIdentityIsSet()) || (applicationserviceProviderIdentityIsSet() && rhs.applicationserviceProviderIdentityIsSet() && getApplicationserviceProviderIdentity() == rhs.getApplicationserviceProviderIdentity())) &&
    
    
    ((!chargingRuleBaseNameIsSet() && !rhs.chargingRuleBaseNameIsSet()) || (chargingRuleBaseNameIsSet() && rhs.chargingRuleBaseNameIsSet() && getChargingRuleBaseName() == rhs.getChargingRuleBaseName())) &&
    
    
    ((!mAPDUSteeringFunctionalityIsSet() && !rhs.mAPDUSteeringFunctionalityIsSet()) || (mAPDUSteeringFunctionalityIsSet() && rhs.mAPDUSteeringFunctionalityIsSet() && getMAPDUSteeringFunctionality() == rhs.getMAPDUSteeringFunctionality())) &&
    
    
    ((!mAPDUSteeringModeIsSet() && !rhs.mAPDUSteeringModeIsSet()) || (mAPDUSteeringModeIsSet() && rhs.mAPDUSteeringModeIsSet() && getMAPDUSteeringMode() == rhs.getMAPDUSteeringMode()))
    
    ;
}

bool PDUContainerInformation::operator!=(const PDUContainerInformation& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const PDUContainerInformation& o)
{
    j = nlohmann::json::object();
    if(o.timeofFirstUsageIsSet())
        j["timeofFirstUsage"] = o.m_TimeofFirstUsage;
    if(o.timeofLastUsageIsSet())
        j["timeofLastUsage"] = o.m_TimeofLastUsage;
    if(o.qoSInformationIsSet())
        j["qoSInformation"] = o.m_QoSInformation;
    if(o.qoSCharacteristicsIsSet())
        j["qoSCharacteristics"] = o.m_QoSCharacteristics;
    if(o.aFCorrelationInformationIsSet())
        j["aFCorrelationInformation"] = o.m_AFCorrelationInformation;
    if(o.userLocationInformationIsSet())
        j["userLocationInformation"] = o.m_UserLocationInformation;
    if(o.uetimeZoneIsSet())
        j["uetimeZone"] = o.m_UetimeZone;
    if(o.rATTypeIsSet())
        j["rATType"] = o.m_RATType;
    if(o.servingNodeIDIsSet() || !o.m_ServingNodeID.empty())
        j["servingNodeID"] = o.m_ServingNodeID;
    if(o.presenceReportingAreaInformationIsSet() || !o.m_PresenceReportingAreaInformation.empty())
        j["presenceReportingAreaInformation"] = o.m_PresenceReportingAreaInformation;
    if(o.r3gppPSDataOffStatusIsSet())
        j["3gppPSDataOffStatus"] = o.m_r_3gppPSDataOffStatus;
    if(o.sponsorIdentityIsSet())
        j["sponsorIdentity"] = o.m_SponsorIdentity;
    if(o.applicationserviceProviderIdentityIsSet())
        j["applicationserviceProviderIdentity"] = o.m_ApplicationserviceProviderIdentity;
    if(o.chargingRuleBaseNameIsSet())
        j["chargingRuleBaseName"] = o.m_ChargingRuleBaseName;
    if(o.mAPDUSteeringFunctionalityIsSet())
        j["mAPDUSteeringFunctionality"] = o.m_MAPDUSteeringFunctionality;
    if(o.mAPDUSteeringModeIsSet())
        j["mAPDUSteeringMode"] = o.m_MAPDUSteeringMode;
    
}

void from_json(const nlohmann::json& j, PDUContainerInformation& o)
{
    if(j.find("timeofFirstUsage") != j.end())
    {
        j.at("timeofFirstUsage").get_to(o.m_TimeofFirstUsage);
        o.m_TimeofFirstUsageIsSet = true;
    } 
    if(j.find("timeofLastUsage") != j.end())
    {
        j.at("timeofLastUsage").get_to(o.m_TimeofLastUsage);
        o.m_TimeofLastUsageIsSet = true;
    } 
    if(j.find("qoSInformation") != j.end())
    {
        j.at("qoSInformation").get_to(o.m_QoSInformation);
        o.m_QoSInformationIsSet = true;
    } 
    if(j.find("qoSCharacteristics") != j.end())
    {
        j.at("qoSCharacteristics").get_to(o.m_QoSCharacteristics);
        o.m_QoSCharacteristicsIsSet = true;
    } 
    if(j.find("aFCorrelationInformation") != j.end())
    {
        j.at("aFCorrelationInformation").get_to(o.m_AFCorrelationInformation);
        o.m_AFCorrelationInformationIsSet = true;
    } 
    if(j.find("userLocationInformation") != j.end())
    {
        j.at("userLocationInformation").get_to(o.m_UserLocationInformation);
        o.m_UserLocationInformationIsSet = true;
    } 
    if(j.find("uetimeZone") != j.end())
    {
        j.at("uetimeZone").get_to(o.m_UetimeZone);
        o.m_UetimeZoneIsSet = true;
    } 
    if(j.find("rATType") != j.end())
    {
        j.at("rATType").get_to(o.m_RATType);
        o.m_RATTypeIsSet = true;
    } 
    if(j.find("servingNodeID") != j.end())
    {
        j.at("servingNodeID").get_to(o.m_ServingNodeID);
        o.m_ServingNodeIDIsSet = true;
    } 
    if(j.find("presenceReportingAreaInformation") != j.end())
    {
        j.at("presenceReportingAreaInformation").get_to(o.m_PresenceReportingAreaInformation);
        o.m_PresenceReportingAreaInformationIsSet = true;
    } 
    if(j.find("3gppPSDataOffStatus") != j.end())
    {
        j.at("3gppPSDataOffStatus").get_to(o.m_r_3gppPSDataOffStatus);
        o.m_r_3gppPSDataOffStatusIsSet = true;
    } 
    if(j.find("sponsorIdentity") != j.end())
    {
        j.at("sponsorIdentity").get_to(o.m_SponsorIdentity);
        o.m_SponsorIdentityIsSet = true;
    } 
    if(j.find("applicationserviceProviderIdentity") != j.end())
    {
        j.at("applicationserviceProviderIdentity").get_to(o.m_ApplicationserviceProviderIdentity);
        o.m_ApplicationserviceProviderIdentityIsSet = true;
    } 
    if(j.find("chargingRuleBaseName") != j.end())
    {
        j.at("chargingRuleBaseName").get_to(o.m_ChargingRuleBaseName);
        o.m_ChargingRuleBaseNameIsSet = true;
    } 
    if(j.find("mAPDUSteeringFunctionality") != j.end())
    {
        j.at("mAPDUSteeringFunctionality").get_to(o.m_MAPDUSteeringFunctionality);
        o.m_MAPDUSteeringFunctionalityIsSet = true;
    } 
    if(j.find("mAPDUSteeringMode") != j.end())
    {
        j.at("mAPDUSteeringMode").get_to(o.m_MAPDUSteeringMode);
        o.m_MAPDUSteeringModeIsSet = true;
    } 
    
}

std::string PDUContainerInformation::getTimeofFirstUsage() const
{
    return m_TimeofFirstUsage;
}
void PDUContainerInformation::setTimeofFirstUsage(std::string const& value)
{
    m_TimeofFirstUsage = value;
    m_TimeofFirstUsageIsSet = true;
}
bool PDUContainerInformation::timeofFirstUsageIsSet() const
{
    return m_TimeofFirstUsageIsSet;
}
void PDUContainerInformation::unsetTimeofFirstUsage()
{
    m_TimeofFirstUsageIsSet = false;
}
std::string PDUContainerInformation::getTimeofLastUsage() const
{
    return m_TimeofLastUsage;
}
void PDUContainerInformation::setTimeofLastUsage(std::string const& value)
{
    m_TimeofLastUsage = value;
    m_TimeofLastUsageIsSet = true;
}
bool PDUContainerInformation::timeofLastUsageIsSet() const
{
    return m_TimeofLastUsageIsSet;
}
void PDUContainerInformation::unsetTimeofLastUsage()
{
    m_TimeofLastUsageIsSet = false;
}
org::openapitools::server::model::QosData PDUContainerInformation::getQoSInformation() const
{
    return m_QoSInformation;
}
void PDUContainerInformation::setQoSInformation(org::openapitools::server::model::QosData const& value)
{
    m_QoSInformation = value;
    m_QoSInformationIsSet = true;
}
bool PDUContainerInformation::qoSInformationIsSet() const
{
    return m_QoSInformationIsSet;
}
void PDUContainerInformation::unsetQoSInformation()
{
    m_QoSInformationIsSet = false;
}
org::openapitools::server::model::QosCharacteristics PDUContainerInformation::getQoSCharacteristics() const
{
    return m_QoSCharacteristics;
}
void PDUContainerInformation::setQoSCharacteristics(org::openapitools::server::model::QosCharacteristics const& value)
{
    m_QoSCharacteristics = value;
    m_QoSCharacteristicsIsSet = true;
}
bool PDUContainerInformation::qoSCharacteristicsIsSet() const
{
    return m_QoSCharacteristicsIsSet;
}
void PDUContainerInformation::unsetQoSCharacteristics()
{
    m_QoSCharacteristicsIsSet = false;
}
std::string PDUContainerInformation::getAFCorrelationInformation() const
{
    return m_AFCorrelationInformation;
}
void PDUContainerInformation::setAFCorrelationInformation(std::string const& value)
{
    m_AFCorrelationInformation = value;
    m_AFCorrelationInformationIsSet = true;
}
bool PDUContainerInformation::aFCorrelationInformationIsSet() const
{
    return m_AFCorrelationInformationIsSet;
}
void PDUContainerInformation::unsetAFCorrelationInformation()
{
    m_AFCorrelationInformationIsSet = false;
}
org::openapitools::server::model::UserLocation PDUContainerInformation::getUserLocationInformation() const
{
    return m_UserLocationInformation;
}
void PDUContainerInformation::setUserLocationInformation(org::openapitools::server::model::UserLocation const& value)
{
    m_UserLocationInformation = value;
    m_UserLocationInformationIsSet = true;
}
bool PDUContainerInformation::userLocationInformationIsSet() const
{
    return m_UserLocationInformationIsSet;
}
void PDUContainerInformation::unsetUserLocationInformation()
{
    m_UserLocationInformationIsSet = false;
}
std::string PDUContainerInformation::getUetimeZone() const
{
    return m_UetimeZone;
}
void PDUContainerInformation::setUetimeZone(std::string const& value)
{
    m_UetimeZone = value;
    m_UetimeZoneIsSet = true;
}
bool PDUContainerInformation::uetimeZoneIsSet() const
{
    return m_UetimeZoneIsSet;
}
void PDUContainerInformation::unsetUetimeZone()
{
    m_UetimeZoneIsSet = false;
}
org::openapitools::server::model::RatType PDUContainerInformation::getRATType() const
{
    return m_RATType;
}
void PDUContainerInformation::setRATType(org::openapitools::server::model::RatType const& value)
{
    m_RATType = value;
    m_RATTypeIsSet = true;
}
bool PDUContainerInformation::rATTypeIsSet() const
{
    return m_RATTypeIsSet;
}
void PDUContainerInformation::unsetRATType()
{
    m_RATTypeIsSet = false;
}
std::vector<org::openapitools::server::model::ServingNetworkFunctionID> PDUContainerInformation::getServingNodeID() const
{
    return m_ServingNodeID;
}
void PDUContainerInformation::setServingNodeID(std::vector<org::openapitools::server::model::ServingNetworkFunctionID> const& value)
{
    m_ServingNodeID = value;
    m_ServingNodeIDIsSet = true;
}
bool PDUContainerInformation::servingNodeIDIsSet() const
{
    return m_ServingNodeIDIsSet;
}
void PDUContainerInformation::unsetServingNodeID()
{
    m_ServingNodeIDIsSet = false;
}
std::map<std::string, org::openapitools::server::model::PresenceInfo> PDUContainerInformation::getPresenceReportingAreaInformation() const
{
    return m_PresenceReportingAreaInformation;
}
void PDUContainerInformation::setPresenceReportingAreaInformation(std::map<std::string, org::openapitools::server::model::PresenceInfo> const& value)
{
    m_PresenceReportingAreaInformation = value;
    m_PresenceReportingAreaInformationIsSet = true;
}
bool PDUContainerInformation::presenceReportingAreaInformationIsSet() const
{
    return m_PresenceReportingAreaInformationIsSet;
}
void PDUContainerInformation::unsetPresenceReportingAreaInformation()
{
    m_PresenceReportingAreaInformationIsSet = false;
}
org::openapitools::server::model::r_3GPPPSDataOffStatus PDUContainerInformation::getR3gppPSDataOffStatus() const
{
    return m_r_3gppPSDataOffStatus;
}
void PDUContainerInformation::setR3gppPSDataOffStatus(org::openapitools::server::model::r_3GPPPSDataOffStatus const& value)
{
    m_r_3gppPSDataOffStatus = value;
    m_r_3gppPSDataOffStatusIsSet = true;
}
bool PDUContainerInformation::r3gppPSDataOffStatusIsSet() const
{
    return m_r_3gppPSDataOffStatusIsSet;
}
void PDUContainerInformation::unsetr_3gppPSDataOffStatus()
{
    m_r_3gppPSDataOffStatusIsSet = false;
}
std::string PDUContainerInformation::getSponsorIdentity() const
{
    return m_SponsorIdentity;
}
void PDUContainerInformation::setSponsorIdentity(std::string const& value)
{
    m_SponsorIdentity = value;
    m_SponsorIdentityIsSet = true;
}
bool PDUContainerInformation::sponsorIdentityIsSet() const
{
    return m_SponsorIdentityIsSet;
}
void PDUContainerInformation::unsetSponsorIdentity()
{
    m_SponsorIdentityIsSet = false;
}
std::string PDUContainerInformation::getApplicationserviceProviderIdentity() const
{
    return m_ApplicationserviceProviderIdentity;
}
void PDUContainerInformation::setApplicationserviceProviderIdentity(std::string const& value)
{
    m_ApplicationserviceProviderIdentity = value;
    m_ApplicationserviceProviderIdentityIsSet = true;
}
bool PDUContainerInformation::applicationserviceProviderIdentityIsSet() const
{
    return m_ApplicationserviceProviderIdentityIsSet;
}
void PDUContainerInformation::unsetApplicationserviceProviderIdentity()
{
    m_ApplicationserviceProviderIdentityIsSet = false;
}
std::string PDUContainerInformation::getChargingRuleBaseName() const
{
    return m_ChargingRuleBaseName;
}
void PDUContainerInformation::setChargingRuleBaseName(std::string const& value)
{
    m_ChargingRuleBaseName = value;
    m_ChargingRuleBaseNameIsSet = true;
}
bool PDUContainerInformation::chargingRuleBaseNameIsSet() const
{
    return m_ChargingRuleBaseNameIsSet;
}
void PDUContainerInformation::unsetChargingRuleBaseName()
{
    m_ChargingRuleBaseNameIsSet = false;
}
org::openapitools::server::model::SteeringFunctionality PDUContainerInformation::getMAPDUSteeringFunctionality() const
{
    return m_MAPDUSteeringFunctionality;
}
void PDUContainerInformation::setMAPDUSteeringFunctionality(org::openapitools::server::model::SteeringFunctionality const& value)
{
    m_MAPDUSteeringFunctionality = value;
    m_MAPDUSteeringFunctionalityIsSet = true;
}
bool PDUContainerInformation::mAPDUSteeringFunctionalityIsSet() const
{
    return m_MAPDUSteeringFunctionalityIsSet;
}
void PDUContainerInformation::unsetMAPDUSteeringFunctionality()
{
    m_MAPDUSteeringFunctionalityIsSet = false;
}
org::openapitools::server::model::SteeringMode PDUContainerInformation::getMAPDUSteeringMode() const
{
    return m_MAPDUSteeringMode;
}
void PDUContainerInformation::setMAPDUSteeringMode(org::openapitools::server::model::SteeringMode const& value)
{
    m_MAPDUSteeringMode = value;
    m_MAPDUSteeringModeIsSet = true;
}
bool PDUContainerInformation::mAPDUSteeringModeIsSet() const
{
    return m_MAPDUSteeringModeIsSet;
}
void PDUContainerInformation::unsetMAPDUSteeringMode()
{
    m_MAPDUSteeringModeIsSet = false;
}


} // namespace org::openapitools::server::model

