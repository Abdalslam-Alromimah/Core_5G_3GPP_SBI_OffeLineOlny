/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Arp.h
 *
 * Contains Allocation and Retention Priority information.
 */

#ifndef Arp_H_
#define Arp_H_


#include "PreemptionCapability.h"
#include "PreemptionVulnerability.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Contains Allocation and Retention Priority information.
/// </summary>
class  Arp
{
public:
    Arp();
    virtual ~Arp() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Arp& rhs) const;
    bool operator!=(const Arp& rhs) const;

    /////////////////////////////////////////////
    /// Arp members

    /// <summary>
    /// nullable true shall not be used for this attribute. Unsigned integer indicating the ARP Priority Level (see clause 5.7.2.2 of 3GPP TS 23.501, within the range 1 to 15.Values are ordered in decreasing order of priority, i.e. with 1 as the highest priority and 15 as the lowest priority.  
    /// </summary>
    int32_t getPriorityLevel() const;
    void setPriorityLevel(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PreemptionCapability getPreemptCap() const;
    void setPreemptCap(org::openapitools::server::model::PreemptionCapability const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PreemptionVulnerability getPreemptVuln() const;
    void setPreemptVuln(org::openapitools::server::model::PreemptionVulnerability const& value);

    friend  void to_json(nlohmann::json& j, const Arp& o);
    friend  void from_json(const nlohmann::json& j, Arp& o);
protected:
    int32_t m_PriorityLevel;

    org::openapitools::server::model::PreemptionCapability m_PreemptCap;

    org::openapitools::server::model::PreemptionVulnerability m_PreemptVuln;

    
};

} // namespace org::openapitools::server::model

#endif /* Arp_H_ */
