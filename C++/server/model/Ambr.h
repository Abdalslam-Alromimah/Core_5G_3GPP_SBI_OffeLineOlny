/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Ambr.h
 *
 * Contains the maximum aggregated uplink and downlink bit rates.
 */

#ifndef Ambr_H_
#define Ambr_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Contains the maximum aggregated uplink and downlink bit rates.
/// </summary>
class  Ambr
{
public:
    Ambr();
    virtual ~Ambr() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Ambr& rhs) const;
    bool operator!=(const Ambr& rhs) const;

    /////////////////////////////////////////////
    /// Ambr members

    /// <summary>
    /// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \&quot;K\&quot; is used to represent the standard symbol \&quot;k\&quot;. 
    /// </summary>
    std::string getUplink() const;
    void setUplink(std::string const& value);
    /// <summary>
    /// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \&quot;K\&quot; is used to represent the standard symbol \&quot;k\&quot;. 
    /// </summary>
    std::string getDownlink() const;
    void setDownlink(std::string const& value);

    friend  void to_json(nlohmann::json& j, const Ambr& o);
    friend  void from_json(const nlohmann::json& j, Ambr& o);
protected:
    std::string m_Uplink;

    std::string m_Downlink;

    
};

} // namespace org::openapitools::server::model

#endif /* Ambr_H_ */
