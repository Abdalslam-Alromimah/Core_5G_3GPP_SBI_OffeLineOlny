/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * PresenceInfo.h
 *
 * If the additionalPraId IE is present, this IE shall state the presence information of the UE for the individual PRA identified by the additionalPraId IE;  If the additionalPraId IE is not present, this IE shall state the presence information of the UE for the PRA identified by the praId IE. 
 */

#ifndef PresenceInfo_H_
#define PresenceInfo_H_


#include "Ecgi.h"
#include "Ncgi.h"
#include "Tai.h"
#include <string>
#include "PresenceState.h"
#include "GlobalRanNodeId.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// If the additionalPraId IE is present, this IE shall state the presence information of the UE for the individual PRA identified by the additionalPraId IE;  If the additionalPraId IE is not present, this IE shall state the presence information of the UE for the PRA identified by the praId IE. 
/// </summary>
class  PresenceInfo
{
public:
    PresenceInfo();
    virtual ~PresenceInfo() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const PresenceInfo& rhs) const;
    bool operator!=(const PresenceInfo& rhs) const;

    /////////////////////////////////////////////
    /// PresenceInfo members

    /// <summary>
    /// Represents an identifier of the Presence Reporting Area (see clause 28.10 of 3GPP  TS 23.003.  This IE shall be present  if the Area of Interest subscribed or reported is a Presence Reporting Area or a Set of Core Network predefined Presence Reporting Areas. When present, it shall be encoded as a string representing an integer in the following ranges: 0 to 8 388 607 for UE-dedicated PRA 8 388 608 to 16 777 215 for Core Network predefined PRA Examples: PRA ID 123 is encoded as \&quot;123\&quot; PRA ID 11 238 660 is encoded as \&quot;11238660\&quot; 
    /// </summary>
    std::string getPraId() const;
    void setPraId(std::string const& value);
    bool praIdIsSet() const;
    void unsetPraId();
    /// <summary>
    /// This IE may be present if the praId IE is present and if it contains a PRA identifier referring to a set of Core Network predefined Presence Reporting Areas. When present, this IE shall contain a PRA Identifier of an individual PRA within the Set of Core Network predefined Presence Reporting Areas indicated by the praId IE.  
    /// </summary>
    std::string getAdditionalPraId() const;
    void setAdditionalPraId(std::string const& value);
    bool additionalPraIdIsSet() const;
    void unsetAdditionalPraId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PresenceState getPresenceState() const;
    void setPresenceState(org::openapitools::server::model::PresenceState const& value);
    bool presenceStateIsSet() const;
    void unsetPresenceState();
    /// <summary>
    /// Represents the list of tracking areas that constitutes the area. This IE shall be present if the subscription or  the event report is for tracking UE presence in the tracking areas. For non 3GPP access the TAI shall be the N3GPP TAI.  
    /// </summary>
    std::vector<org::openapitools::server::model::Tai> getTrackingAreaList() const;
    void setTrackingAreaList(std::vector<org::openapitools::server::model::Tai> const& value);
    bool trackingAreaListIsSet() const;
    void unsetTrackingAreaList();
    /// <summary>
    /// Represents the list of EUTRAN cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of EUTRAN cell Ids.  
    /// </summary>
    std::vector<org::openapitools::server::model::Ecgi> getEcgiList() const;
    void setEcgiList(std::vector<org::openapitools::server::model::Ecgi> const& value);
    bool ecgiListIsSet() const;
    void unsetEcgiList();
    /// <summary>
    /// Represents the list of NR cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NR cell Ids.  
    /// </summary>
    std::vector<org::openapitools::server::model::Ncgi> getNcgiList() const;
    void setNcgiList(std::vector<org::openapitools::server::model::Ncgi> const& value);
    bool ncgiListIsSet() const;
    void unsetNcgiList();
    /// <summary>
    /// Represents the list of NG RAN node identifiers that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NG RAN node identifiers.  
    /// </summary>
    std::vector<org::openapitools::server::model::GlobalRanNodeId> getGlobalRanNodeIdList() const;
    void setGlobalRanNodeIdList(std::vector<org::openapitools::server::model::GlobalRanNodeId> const& value);
    bool globalRanNodeIdListIsSet() const;
    void unsetGlobalRanNodeIdList();
    /// <summary>
    /// Represents the list of eNodeB identifiers that constitutes the area. This IE shall be  present if the Area of Interest subscribed is a list of eNodeB identifiers. 
    /// </summary>
    std::vector<org::openapitools::server::model::GlobalRanNodeId> getGlobaleNbIdList() const;
    void setGlobaleNbIdList(std::vector<org::openapitools::server::model::GlobalRanNodeId> const& value);
    bool globaleNbIdListIsSet() const;
    void unsetGlobaleNbIdList();

    friend  void to_json(nlohmann::json& j, const PresenceInfo& o);
    friend  void from_json(const nlohmann::json& j, PresenceInfo& o);
protected:
    std::string m_PraId;
    bool m_PraIdIsSet;
    std::string m_AdditionalPraId;
    bool m_AdditionalPraIdIsSet;
    org::openapitools::server::model::PresenceState m_PresenceState;
    bool m_PresenceStateIsSet;
    std::vector<org::openapitools::server::model::Tai> m_TrackingAreaList;
    bool m_TrackingAreaListIsSet;
    std::vector<org::openapitools::server::model::Ecgi> m_EcgiList;
    bool m_EcgiListIsSet;
    std::vector<org::openapitools::server::model::Ncgi> m_NcgiList;
    bool m_NcgiListIsSet;
    std::vector<org::openapitools::server::model::GlobalRanNodeId> m_GlobalRanNodeIdList;
    bool m_GlobalRanNodeIdListIsSet;
    std::vector<org::openapitools::server::model::GlobalRanNodeId> m_GlobaleNbIdList;
    bool m_GlobaleNbIdListIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* PresenceInfo_H_ */
