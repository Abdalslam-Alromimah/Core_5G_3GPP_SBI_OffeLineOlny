/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ChargingDataResponse.h
 *
 * 
 */

#ifndef ChargingDataResponse_H_
#define ChargingDataResponse_H_


#include "InvocationResult.h"
#include "PDUSessionChargingInformation.h"
#include "Trigger.h"
#include "RoamingQBCInformation.h"
#include <string>
#include "SessionFailover.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  ChargingDataResponse
{
public:
    ChargingDataResponse();
    virtual ~ChargingDataResponse() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ChargingDataResponse& rhs) const;
    bool operator!=(const ChargingDataResponse& rhs) const;

    /////////////////////////////////////////////
    /// ChargingDataResponse members

    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    std::string getInvocationTimeStamp() const;
    void setInvocationTimeStamp(std::string const& value);
    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
    /// </summary>
    int32_t getInvocationSequenceNumber() const;
    void setInvocationSequenceNumber(int32_t const value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::InvocationResult getInvocationResult() const;
    void setInvocationResult(org::openapitools::server::model::InvocationResult const& value);
    bool invocationResultIsSet() const;
    void unsetInvocationResult();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::SessionFailover getSessionFailover() const;
    void setSessionFailover(org::openapitools::server::model::SessionFailover const& value);
    bool sessionFailoverIsSet() const;
    void unsetSessionFailover();
    /// <summary>
    /// 
    /// </summary>
    std::vector<org::openapitools::server::model::Trigger> getTriggers() const;
    void setTriggers(std::vector<org::openapitools::server::model::Trigger> const& value);
    bool triggersIsSet() const;
    void unsetTriggers();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PDUSessionChargingInformation getPDUSessionChargingInformation() const;
    void setPDUSessionChargingInformation(org::openapitools::server::model::PDUSessionChargingInformation const& value);
    bool pDUSessionChargingInformationIsSet() const;
    void unsetPDUSessionChargingInformation();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::RoamingQBCInformation getRoamingQBCInformation() const;
    void setRoamingQBCInformation(org::openapitools::server::model::RoamingQBCInformation const& value);
    bool roamingQBCInformationIsSet() const;
    void unsetRoamingQBCInformation();

    friend  void to_json(nlohmann::json& j, const ChargingDataResponse& o);
    friend  void from_json(const nlohmann::json& j, ChargingDataResponse& o);
protected:
    std::string m_InvocationTimeStamp;

    int32_t m_InvocationSequenceNumber;

    org::openapitools::server::model::InvocationResult m_InvocationResult;
    bool m_InvocationResultIsSet;
    org::openapitools::server::model::SessionFailover m_SessionFailover;
    bool m_SessionFailoverIsSet;
    std::vector<org::openapitools::server::model::Trigger> m_Triggers;
    bool m_TriggersIsSet;
    org::openapitools::server::model::PDUSessionChargingInformation m_PDUSessionChargingInformation;
    bool m_PDUSessionChargingInformationIsSet;
    org::openapitools::server::model::RoamingQBCInformation m_RoamingQBCInformation;
    bool m_RoamingQBCInformationIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ChargingDataResponse_H_ */
