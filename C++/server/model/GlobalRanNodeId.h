/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GlobalRanNodeId.h
 *
 * One of the six attributes n3IwfId, gNbIdm, ngeNbId, wagfId, tngfId, eNbId shall be present. 
 */

#ifndef GlobalRanNodeId_H_
#define GlobalRanNodeId_H_


#include <string>
#include "GNbId.h"
#include "PlmnId.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// One of the six attributes n3IwfId, gNbIdm, ngeNbId, wagfId, tngfId, eNbId shall be present. 
/// </summary>
class  GlobalRanNodeId
{
public:
    GlobalRanNodeId();
    virtual ~GlobalRanNodeId() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GlobalRanNodeId& rhs) const;
    bool operator!=(const GlobalRanNodeId& rhs) const;

    /////////////////////////////////////////////
    /// GlobalRanNodeId members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PlmnId getPlmnId() const;
    void setPlmnId(org::openapitools::server::model::PlmnId const& value);
    /// <summary>
    /// This represents the identifier of the N3IWF ID as specified in clause 9.3.1.57 of  3GPP TS 38.413 in hexadecimal representation. Each character in the string shall take a value  of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the N3IWF ID shall appear first in the  string, and the character representing the 4 least significant bit of the N3IWF ID shall  appear last in the string.  
    /// </summary>
    std::string getN3IwfId() const;
    void setN3IwfId(std::string const& value);
    bool n3IwfIdIsSet() const;
    void unsetN3IwfId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::GNbId getGNbId() const;
    void setGNbId(org::openapitools::server::model::GNbId const& value);
    bool gNbIdIsSet() const;
    void unsetGNbId();
    /// <summary>
    /// This represents the identifier of the ng-eNB ID as specified in clause 9.3.1.8 of  3GPP TS 38.413. The value of the ng-eNB ID shall be encoded in hexadecimal representation.  Each character in the string shall take a value of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and  shall represent 4 bits. The padding 0 shall be added to make multiple nibbles, so the most  significant character representing the padding 0 if required together with the 4 most  significant bits of the ng-eNB ID shall appear first in the string, and the character  representing the 4 least significant bit of the ng-eNB ID (to form a nibble) shall appear last  in the string.  
    /// </summary>
    std::string getNgeNbId() const;
    void setNgeNbId(std::string const& value);
    bool ngeNbIdIsSet() const;
    void unsetNgeNbId();
    /// <summary>
    /// This represents the identifier of the W-AGF ID as specified in clause 9.3.1.162 of  3GPP TS 38.413 in hexadecimal representation. Each character in the string shall take a value  of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the W-AGF ID shall appear first in the  string, and the character representing the 4 least significant bit of the W-AGF ID shall  appear last in the string.  
    /// </summary>
    std::string getWagfId() const;
    void setWagfId(std::string const& value);
    bool wagfIdIsSet() const;
    void unsetWagfId();
    /// <summary>
    /// This represents the identifier of the TNGF ID as specified in clause 9.3.1.161 of  3GPP TS 38.413  in hexadecimal representation. Each character in the string shall take a value of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot;  to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4 bits. The most significant character representing the  4 most significant bits of the TNGF ID shall appear first in the string, and the character  representing the 4 least significant bit of the TNGF ID shall appear last in the string.  
    /// </summary>
    std::string getTngfId() const;
    void setTngfId(std::string const& value);
    bool tngfIdIsSet() const;
    void unsetTngfId();
    /// <summary>
    /// This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1).  
    /// </summary>
    std::string getNid() const;
    void setNid(std::string const& value);
    bool nidIsSet() const;
    void unsetNid();
    /// <summary>
    /// This represents the identifier of the eNB ID as specified in clause 9.2.1.37 of  3GPP TS 36.413. The string shall be formatted with the following pattern  &#39;^(&#39;MacroeNB-[A-Fa-f0-9]{5}|LMacroeNB-[A-Fa-f0-9]{6}|SMacroeNB-[A-Fa-f0-9]{5} |HomeeNB-[A-Fa-f0-9]{7})$&#39;. The value of the eNB ID shall be encoded in hexadecimal representation. Each character in the  string shall take a value of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4 bits.  The padding 0 shall be added to make multiple nibbles, so the most significant character  representing the padding 0 if required together with the 4 most significant bits of the eNB ID  shall appear first in the string, and the character representing the 4 least significant bit  of the eNB ID (to form a nibble) shall appear last in the string. 
    /// </summary>
    std::string getENbId() const;
    void setENbId(std::string const& value);
    bool eNbIdIsSet() const;
    void unsetENbId();

    friend  void to_json(nlohmann::json& j, const GlobalRanNodeId& o);
    friend  void from_json(const nlohmann::json& j, GlobalRanNodeId& o);
protected:
    org::openapitools::server::model::PlmnId m_PlmnId;

    std::string m_N3IwfId;
    bool m_N3IwfIdIsSet;
    org::openapitools::server::model::GNbId m_GNbId;
    bool m_GNbIdIsSet;
    std::string m_NgeNbId;
    bool m_NgeNbIdIsSet;
    std::string m_WagfId;
    bool m_WagfIdIsSet;
    std::string m_TngfId;
    bool m_TngfIdIsSet;
    std::string m_Nid;
    bool m_NidIsSet;
    std::string m_ENbId;
    bool m_ENbIdIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* GlobalRanNodeId_H_ */
