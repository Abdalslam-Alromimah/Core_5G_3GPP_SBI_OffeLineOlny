/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ServingNetworkFunctionID.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ServingNetworkFunctionID::ServingNetworkFunctionID()
{
    m_AMFId = "";
    m_AMFIdIsSet = false;
    
}

void ServingNetworkFunctionID::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ServingNetworkFunctionID::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ServingNetworkFunctionID::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ServingNetworkFunctionID" : pathPrefix;

        
    if (!m_ServingNetworkFunctionInformation.validate()) {
        msg << _pathPrefix << ": ServingNetworkFunctionInformation is invalid;";
        success = false;
    }     
    if (aMFIdIsSet())
    {
        const std::string& value = m_AMFId;
        const std::string currentValuePath = _pathPrefix + ".aMFId";
                
        

    }
    
    return success;
}

bool ServingNetworkFunctionID::operator==(const ServingNetworkFunctionID& rhs) const
{
    return
    
    
    (getServingNetworkFunctionInformation() == rhs.getServingNetworkFunctionInformation())
     &&
    
    
    ((!aMFIdIsSet() && !rhs.aMFIdIsSet()) || (aMFIdIsSet() && rhs.aMFIdIsSet() && getAMFId() == rhs.getAMFId()))
    
    ;
}

bool ServingNetworkFunctionID::operator!=(const ServingNetworkFunctionID& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ServingNetworkFunctionID& o)
{
    j = nlohmann::json::object();
    j["servingNetworkFunctionInformation"] = o.m_ServingNetworkFunctionInformation;
    if(o.aMFIdIsSet())
        j["aMFId"] = o.m_AMFId;
    
}

void from_json(const nlohmann::json& j, ServingNetworkFunctionID& o)
{
    j.at("servingNetworkFunctionInformation").get_to(o.m_ServingNetworkFunctionInformation);
    if(j.find("aMFId") != j.end())
    {
        j.at("aMFId").get_to(o.m_AMFId);
        o.m_AMFIdIsSet = true;
    } 
    
}

org::openapitools::server::model::NFIdentification ServingNetworkFunctionID::getServingNetworkFunctionInformation() const
{
    return m_ServingNetworkFunctionInformation;
}
void ServingNetworkFunctionID::setServingNetworkFunctionInformation(org::openapitools::server::model::NFIdentification const& value)
{
    m_ServingNetworkFunctionInformation = value;
}
std::string ServingNetworkFunctionID::getAMFId() const
{
    return m_AMFId;
}
void ServingNetworkFunctionID::setAMFId(std::string const& value)
{
    m_AMFId = value;
    m_AMFIdIsSet = true;
}
bool ServingNetworkFunctionID::aMFIdIsSet() const
{
    return m_AMFIdIsSet;
}
void ServingNetworkFunctionID::unsetAMFId()
{
    m_AMFIdIsSet = false;
}


} // namespace org::openapitools::server::model

