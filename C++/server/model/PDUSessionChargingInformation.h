/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * PDUSessionChargingInformation.h
 *
 * 
 */

#ifndef PDUSessionChargingInformation_H_
#define PDUSessionChargingInformation_H_


#include "UserInformation.h"
#include "RANSecondaryRATUsageReport.h"
#include <string>
#include "UserLocation.h"
#include "PresenceInfo.h"
#include "PDUSessionInformation.h"
#include <map>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  PDUSessionChargingInformation
{
public:
    PDUSessionChargingInformation();
    virtual ~PDUSessionChargingInformation() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const PDUSessionChargingInformation& rhs) const;
    bool operator!=(const PDUSessionChargingInformation& rhs) const;

    /////////////////////////////////////////////
    /// PDUSessionChargingInformation members

    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
    /// </summary>
    int32_t getChargingId() const;
    void setChargingId(int32_t const value);
    bool chargingIdIsSet() const;
    void unsetChargingId();
    /// <summary>
    /// 
    /// </summary>
    std::string getSMFChargingId() const;
    void setSMFChargingId(std::string const& value);
    bool sMFChargingIdIsSet() const;
    void unsetSMFChargingId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::UserInformation getUserInformation() const;
    void setUserInformation(org::openapitools::server::model::UserInformation const& value);
    bool userInformationIsSet() const;
    void unsetUserInformation();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::UserLocation getUserLocationinfo() const;
    void setUserLocationinfo(org::openapitools::server::model::UserLocation const& value);
    bool userLocationinfoIsSet() const;
    void unsetUserLocationinfo();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::UserLocation getMAPDUNon3GPPUserLocationInfo() const;
    void setMAPDUNon3GPPUserLocationInfo(org::openapitools::server::model::UserLocation const& value);
    bool mAPDUNon3GPPUserLocationInfoIsSet() const;
    void unsetMAPDUNon3GPPUserLocationInfo();
    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    std::string getUserLocationTime() const;
    void setUserLocationTime(std::string const& value);
    bool userLocationTimeIsSet() const;
    void unsetUserLocationTime();
    /// <summary>
    /// 
    /// </summary>
    std::map<std::string, org::openapitools::server::model::PresenceInfo> getPresenceReportingAreaInformation() const;
    void setPresenceReportingAreaInformation(std::map<std::string, org::openapitools::server::model::PresenceInfo> const& value);
    bool presenceReportingAreaInformationIsSet() const;
    void unsetPresenceReportingAreaInformation();
    /// <summary>
    /// String with format \&quot;time-numoffset\&quot; optionally appended by \&quot;daylightSavingTime\&quot;, where  - \&quot;time-numoffset\&quot; shall represent the time zone adjusted for daylight saving time and be    encoded as time-numoffset as defined in clause 5.6 of IETF RFC 3339;  - \&quot;daylightSavingTime\&quot; shall represent the adjustment that has been made and shall be    encoded as \&quot;+1\&quot; or \&quot;+2\&quot; for a +1 or +2 hours adjustment.   The example is for 8 hours behind UTC, +1 hour adjustment for Daylight Saving Time. 
    /// </summary>
    std::string getUetimeZone() const;
    void setUetimeZone(std::string const& value);
    bool uetimeZoneIsSet() const;
    void unsetUetimeZone();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::PDUSessionInformation getPduSessionInformation() const;
    void setPduSessionInformation(org::openapitools::server::model::PDUSessionInformation const& value);
    /// <summary>
    /// indicating a time in seconds.
    /// </summary>
    int32_t getUnitCountInactivityTimer() const;
    void setUnitCountInactivityTimer(int32_t const value);
    bool unitCountInactivityTimerIsSet() const;
    void unsetUnitCountInactivityTimer();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::RANSecondaryRATUsageReport getRANSecondaryRATUsageReport() const;
    void setRANSecondaryRATUsageReport(org::openapitools::server::model::RANSecondaryRATUsageReport const& value);
    bool rANSecondaryRATUsageReportIsSet() const;
    void unsetRANSecondaryRATUsageReport();

    friend  void to_json(nlohmann::json& j, const PDUSessionChargingInformation& o);
    friend  void from_json(const nlohmann::json& j, PDUSessionChargingInformation& o);
protected:
    int32_t m_ChargingId;
    bool m_ChargingIdIsSet;
    std::string m_SMFChargingId;
    bool m_SMFChargingIdIsSet;
    org::openapitools::server::model::UserInformation m_UserInformation;
    bool m_UserInformationIsSet;
    org::openapitools::server::model::UserLocation m_UserLocationinfo;
    bool m_UserLocationinfoIsSet;
    org::openapitools::server::model::UserLocation m_MAPDUNon3GPPUserLocationInfo;
    bool m_MAPDUNon3GPPUserLocationInfoIsSet;
    std::string m_UserLocationTime;
    bool m_UserLocationTimeIsSet;
    std::map<std::string, org::openapitools::server::model::PresenceInfo> m_PresenceReportingAreaInformation;
    bool m_PresenceReportingAreaInformationIsSet;
    std::string m_UetimeZone;
    bool m_UetimeZoneIsSet;
    org::openapitools::server::model::PDUSessionInformation m_PduSessionInformation;

    int32_t m_UnitCountInactivityTimer;
    bool m_UnitCountInactivityTimerIsSet;
    org::openapitools::server::model::RANSecondaryRATUsageReport m_RANSecondaryRATUsageReport;
    bool m_RANSecondaryRATUsageReportIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* PDUSessionChargingInformation_H_ */
