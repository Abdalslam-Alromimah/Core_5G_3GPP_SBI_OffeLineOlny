/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * UserInformation.h
 *
 * 
 */

#ifndef UserInformation_H_
#define UserInformation_H_


#include <string>
#include "RoamerInOut.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  UserInformation
{
public:
    UserInformation();
    virtual ~UserInformation() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const UserInformation& rhs) const;
    bool operator!=(const UserInformation& rhs) const;

    /////////////////////////////////////////////
    /// UserInformation members

    /// <summary>
    /// String identifying a Gpsi shall contain either an External Id or an MSISDN.  It shall be formatted as follows -External Identifier&#x3D; \&quot;extid-&#39;extid&#39;, where &#39;extid&#39;  shall be formatted according to clause 19.7.2 of 3GPP TS 23.003 that describes an  External Identifier.  
    /// </summary>
    std::string getServedGPSI() const;
    void setServedGPSI(std::string const& value);
    bool servedGPSIIsSet() const;
    void unsetServedGPSI();
    /// <summary>
    /// String representing a Permanent Equipment Identifier that may contain - an IMEI or IMEISV, as  specified in clause 6.2 of 3GPP TS 23.003; a MAC address for a 5G-RG or FN-RG via  wireline  access, with an indication that this address cannot be trusted for regulatory purpose if this  address cannot be used as an Equipment Identifier of the FN-RG, as specified in clause 4.7.7  of 3GPP TS23.316. Examples are imei-012345678901234 or imeisv-0123456789012345.  
    /// </summary>
    std::string getServedPEI() const;
    void setServedPEI(std::string const& value);
    bool servedPEIIsSet() const;
    void unsetServedPEI();
    /// <summary>
    /// 
    /// </summary>
    bool isUnauthenticatedFlag() const;
    void setUnauthenticatedFlag(bool const value);
    bool unauthenticatedFlagIsSet() const;
    void unsetUnauthenticatedFlag();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::RoamerInOut getRoamerInOut() const;
    void setRoamerInOut(org::openapitools::server::model::RoamerInOut const& value);
    bool roamerInOutIsSet() const;
    void unsetRoamerInOut();

    friend  void to_json(nlohmann::json& j, const UserInformation& o);
    friend  void from_json(const nlohmann::json& j, UserInformation& o);
protected:
    std::string m_ServedGPSI;
    bool m_ServedGPSIIsSet;
    std::string m_ServedPEI;
    bool m_ServedPEIIsSet;
    bool m_UnauthenticatedFlag;
    bool m_UnauthenticatedFlagIsSet;
    org::openapitools::server::model::RoamerInOut m_RoamerInOut;
    bool m_RoamerInOutIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* UserInformation_H_ */
