/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ServingNetworkFunctionID.h
 *
 * 
 */

#ifndef ServingNetworkFunctionID_H_
#define ServingNetworkFunctionID_H_


#include <string>
#include "NFIdentification.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  ServingNetworkFunctionID
{
public:
    ServingNetworkFunctionID();
    virtual ~ServingNetworkFunctionID() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ServingNetworkFunctionID& rhs) const;
    bool operator!=(const ServingNetworkFunctionID& rhs) const;

    /////////////////////////////////////////////
    /// ServingNetworkFunctionID members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::NFIdentification getServingNetworkFunctionInformation() const;
    void setServingNetworkFunctionInformation(org::openapitools::server::model::NFIdentification const& value);
    /// <summary>
    /// String identifying the AMF ID composed of AMF Region ID (8 bits), AMF Set ID (10 bits) and AMF  Pointer (6 bits) as specified in clause 2.10.1 of 3GPP TS 23.003. It is encoded as a string of  6 hexadecimal characters (i.e., 24 bits).  
    /// </summary>
    std::string getAMFId() const;
    void setAMFId(std::string const& value);
    bool aMFIdIsSet() const;
    void unsetAMFId();

    friend  void to_json(nlohmann::json& j, const ServingNetworkFunctionID& o);
    friend  void from_json(const nlohmann::json& j, ServingNetworkFunctionID& o);
protected:
    org::openapitools::server::model::NFIdentification m_ServingNetworkFunctionInformation;

    std::string m_AMFId;
    bool m_AMFIdIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* ServingNetworkFunctionID_H_ */
