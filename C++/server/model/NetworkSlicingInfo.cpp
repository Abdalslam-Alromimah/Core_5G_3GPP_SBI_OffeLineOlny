/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "NetworkSlicingInfo.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

NetworkSlicingInfo::NetworkSlicingInfo()
{
    
}

void NetworkSlicingInfo::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool NetworkSlicingInfo::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool NetworkSlicingInfo::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "NetworkSlicingInfo" : pathPrefix;

        
    if (!m_SNSSAI.validate()) {
        msg << _pathPrefix << ": SNSSAI is invalid;";
        success = false;
    }
    return success;
}

bool NetworkSlicingInfo::operator==(const NetworkSlicingInfo& rhs) const
{
    return
    
    
    (getSNSSAI() == rhs.getSNSSAI())
    
    
    ;
}

bool NetworkSlicingInfo::operator!=(const NetworkSlicingInfo& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NetworkSlicingInfo& o)
{
    j = nlohmann::json::object();
    j["sNSSAI"] = o.m_SNSSAI;
    
}

void from_json(const nlohmann::json& j, NetworkSlicingInfo& o)
{
    j.at("sNSSAI").get_to(o.m_SNSSAI);
    
}

org::openapitools::server::model::Snssai NetworkSlicingInfo::getSNSSAI() const
{
    return m_SNSSAI;
}
void NetworkSlicingInfo::setSNSSAI(org::openapitools::server::model::Snssai const& value)
{
    m_SNSSAI = value;
}


} // namespace org::openapitools::server::model

