/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * NrLocation.h
 *
 * Contains the NR user location.
 */

#ifndef NrLocation_H_
#define NrLocation_H_


#include "Ncgi.h"
#include "Tai.h"
#include <string>
#include "NtnTaiInfo.h"
#include "GlobalRanNodeId.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Contains the NR user location.
/// </summary>
class  NrLocation
{
public:
    NrLocation();
    virtual ~NrLocation() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const NrLocation& rhs) const;
    bool operator!=(const NrLocation& rhs) const;

    /////////////////////////////////////////////
    /// NrLocation members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Tai getTai() const;
    void setTai(org::openapitools::server::model::Tai const& value);
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::Ncgi getNcgi() const;
    void setNcgi(org::openapitools::server::model::Ncgi const& value);
    /// <summary>
    /// 
    /// </summary>
    bool isIgnoreNcgi() const;
    void setIgnoreNcgi(bool const value);
    bool ignoreNcgiIsSet() const;
    void unsetIgnoreNcgi();
    /// <summary>
    /// The value represents the elapsed time in minutes since the last network contact of the mobile station. Value \&quot;0\&quot; indicates that the location information was obtained after a successful paging procedure for Active Location Retrieval when the UE is in idle mode or after a successful  NG-RAN location reporting procedure with the eNB when the UE is in connected mode. Any other value than \&quot;0\&quot; indicates that the location information is the last known one. See 3GPP TS 29.002 clause 17.7.8. 
    /// </summary>
    int32_t getAgeOfLocationInformation() const;
    void setAgeOfLocationInformation(int32_t const value);
    bool ageOfLocationInformationIsSet() const;
    void unsetAgeOfLocationInformation();
    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    std::string getUeLocationTimestamp() const;
    void setUeLocationTimestamp(std::string const& value);
    bool ueLocationTimestampIsSet() const;
    void unsetUeLocationTimestamp();
    /// <summary>
    /// Refer to geographical Information. See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used. 
    /// </summary>
    std::string getGeographicalInformation() const;
    void setGeographicalInformation(std::string const& value);
    bool geographicalInformationIsSet() const;
    void unsetGeographicalInformation();
    /// <summary>
    /// Refers to Calling Geodetic Location. See ITU-T Recommendation Q.763 (1999) [24] clause 3.88.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used. 
    /// </summary>
    std::string getGeodeticInformation() const;
    void setGeodeticInformation(std::string const& value);
    bool geodeticInformationIsSet() const;
    void unsetGeodeticInformation();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::GlobalRanNodeId getGlobalGnbId() const;
    void setGlobalGnbId(org::openapitools::server::model::GlobalRanNodeId const& value);
    bool globalGnbIdIsSet() const;
    void unsetGlobalGnbId();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::NtnTaiInfo getNtnTaiInfo() const;
    void setNtnTaiInfo(org::openapitools::server::model::NtnTaiInfo const& value);
    bool ntnTaiInfoIsSet() const;
    void unsetNtnTaiInfo();

    friend  void to_json(nlohmann::json& j, const NrLocation& o);
    friend  void from_json(const nlohmann::json& j, NrLocation& o);
protected:
    org::openapitools::server::model::Tai m_Tai;

    org::openapitools::server::model::Ncgi m_Ncgi;

    bool m_IgnoreNcgi;
    bool m_IgnoreNcgiIsSet;
    int32_t m_AgeOfLocationInformation;
    bool m_AgeOfLocationInformationIsSet;
    std::string m_UeLocationTimestamp;
    bool m_UeLocationTimestampIsSet;
    std::string m_GeographicalInformation;
    bool m_GeographicalInformationIsSet;
    std::string m_GeodeticInformation;
    bool m_GeodeticInformationIsSet;
    org::openapitools::server::model::GlobalRanNodeId m_GlobalGnbId;
    bool m_GlobalGnbIdIsSet;
    org::openapitools::server::model::NtnTaiInfo m_NtnTaiInfo;
    bool m_NtnTaiInfoIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* NrLocation_H_ */
