/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "QosFlowsUsageReport.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

QosFlowsUsageReport::QosFlowsUsageReport()
{
    m_QFI = 0;
    m_QFIIsSet = false;
    m_StartTimestamp = "";
    m_StartTimestampIsSet = false;
    m_EndTimestamp = "";
    m_EndTimestampIsSet = false;
    m_UplinkVolume = 0;
    m_UplinkVolumeIsSet = false;
    m_DownlinkVolume = 0;
    m_DownlinkVolumeIsSet = false;
    
}

void QosFlowsUsageReport::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool QosFlowsUsageReport::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool QosFlowsUsageReport::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "QosFlowsUsageReport" : pathPrefix;

         
    if (qFIIsSet())
    {
        const int32_t& value = m_QFI;
        const std::string currentValuePath = _pathPrefix + ".qFI";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }
        if (value > 63)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 63;";
        }

    }
                 
    if (uplinkVolumeIsSet())
    {
        const int32_t& value = m_UplinkVolume;
        const std::string currentValuePath = _pathPrefix + ".uplinkVolume";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }
        if (value > -1)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to -1;";
        }

    }
         
    if (downlinkVolumeIsSet())
    {
        const int32_t& value = m_DownlinkVolume;
        const std::string currentValuePath = _pathPrefix + ".downlinkVolume";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }
        if (value > -1)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to -1;";
        }

    }
    
    return success;
}

bool QosFlowsUsageReport::operator==(const QosFlowsUsageReport& rhs) const
{
    return
    
    
    
    ((!qFIIsSet() && !rhs.qFIIsSet()) || (qFIIsSet() && rhs.qFIIsSet() && getQFI() == rhs.getQFI())) &&
    
    
    ((!startTimestampIsSet() && !rhs.startTimestampIsSet()) || (startTimestampIsSet() && rhs.startTimestampIsSet() && getStartTimestamp() == rhs.getStartTimestamp())) &&
    
    
    ((!endTimestampIsSet() && !rhs.endTimestampIsSet()) || (endTimestampIsSet() && rhs.endTimestampIsSet() && getEndTimestamp() == rhs.getEndTimestamp())) &&
    
    
    ((!uplinkVolumeIsSet() && !rhs.uplinkVolumeIsSet()) || (uplinkVolumeIsSet() && rhs.uplinkVolumeIsSet() && getUplinkVolume() == rhs.getUplinkVolume())) &&
    
    
    ((!downlinkVolumeIsSet() && !rhs.downlinkVolumeIsSet()) || (downlinkVolumeIsSet() && rhs.downlinkVolumeIsSet() && getDownlinkVolume() == rhs.getDownlinkVolume()))
    
    ;
}

bool QosFlowsUsageReport::operator!=(const QosFlowsUsageReport& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const QosFlowsUsageReport& o)
{
    j = nlohmann::json::object();
    if(o.qFIIsSet())
        j["qFI"] = o.m_QFI;
    if(o.startTimestampIsSet())
        j["startTimestamp"] = o.m_StartTimestamp;
    if(o.endTimestampIsSet())
        j["endTimestamp"] = o.m_EndTimestamp;
    if(o.uplinkVolumeIsSet())
        j["uplinkVolume"] = o.m_UplinkVolume;
    if(o.downlinkVolumeIsSet())
        j["downlinkVolume"] = o.m_DownlinkVolume;
    
}

void from_json(const nlohmann::json& j, QosFlowsUsageReport& o)
{
    if(j.find("qFI") != j.end())
    {
        j.at("qFI").get_to(o.m_QFI);
        o.m_QFIIsSet = true;
    } 
    if(j.find("startTimestamp") != j.end())
    {
        j.at("startTimestamp").get_to(o.m_StartTimestamp);
        o.m_StartTimestampIsSet = true;
    } 
    if(j.find("endTimestamp") != j.end())
    {
        j.at("endTimestamp").get_to(o.m_EndTimestamp);
        o.m_EndTimestampIsSet = true;
    } 
    if(j.find("uplinkVolume") != j.end())
    {
        j.at("uplinkVolume").get_to(o.m_UplinkVolume);
        o.m_UplinkVolumeIsSet = true;
    } 
    if(j.find("downlinkVolume") != j.end())
    {
        j.at("downlinkVolume").get_to(o.m_DownlinkVolume);
        o.m_DownlinkVolumeIsSet = true;
    } 
    
}

int32_t QosFlowsUsageReport::getQFI() const
{
    return m_QFI;
}
void QosFlowsUsageReport::setQFI(int32_t const value)
{
    m_QFI = value;
    m_QFIIsSet = true;
}
bool QosFlowsUsageReport::qFIIsSet() const
{
    return m_QFIIsSet;
}
void QosFlowsUsageReport::unsetQFI()
{
    m_QFIIsSet = false;
}
std::string QosFlowsUsageReport::getStartTimestamp() const
{
    return m_StartTimestamp;
}
void QosFlowsUsageReport::setStartTimestamp(std::string const& value)
{
    m_StartTimestamp = value;
    m_StartTimestampIsSet = true;
}
bool QosFlowsUsageReport::startTimestampIsSet() const
{
    return m_StartTimestampIsSet;
}
void QosFlowsUsageReport::unsetStartTimestamp()
{
    m_StartTimestampIsSet = false;
}
std::string QosFlowsUsageReport::getEndTimestamp() const
{
    return m_EndTimestamp;
}
void QosFlowsUsageReport::setEndTimestamp(std::string const& value)
{
    m_EndTimestamp = value;
    m_EndTimestampIsSet = true;
}
bool QosFlowsUsageReport::endTimestampIsSet() const
{
    return m_EndTimestampIsSet;
}
void QosFlowsUsageReport::unsetEndTimestamp()
{
    m_EndTimestampIsSet = false;
}
int32_t QosFlowsUsageReport::getUplinkVolume() const
{
    return m_UplinkVolume;
}
void QosFlowsUsageReport::setUplinkVolume(int32_t const value)
{
    m_UplinkVolume = value;
    m_UplinkVolumeIsSet = true;
}
bool QosFlowsUsageReport::uplinkVolumeIsSet() const
{
    return m_UplinkVolumeIsSet;
}
void QosFlowsUsageReport::unsetUplinkVolume()
{
    m_UplinkVolumeIsSet = false;
}
int32_t QosFlowsUsageReport::getDownlinkVolume() const
{
    return m_DownlinkVolume;
}
void QosFlowsUsageReport::setDownlinkVolume(int32_t const value)
{
    m_DownlinkVolume = value;
    m_DownlinkVolumeIsSet = true;
}
bool QosFlowsUsageReport::downlinkVolumeIsSet() const
{
    return m_DownlinkVolumeIsSet;
}
void QosFlowsUsageReport::unsetDownlinkVolume()
{
    m_DownlinkVolumeIsSet = false;
}


} // namespace org::openapitools::server::model

