/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "MultipleUnitUsage.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

MultipleUnitUsage::MultipleUnitUsage()
{
    m_RatingGroup = 0;
    m_UsedUnitContainerIsSet = false;
    m_UPFID = "";
    m_UPFIDIsSet = false;
    m_MultihomedPDUAddressIsSet = false;
    
}

void MultipleUnitUsage::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool MultipleUnitUsage::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool MultipleUnitUsage::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "MultipleUnitUsage" : pathPrefix;

         
    
    /* RatingGroup */ {
        const int32_t& value = m_RatingGroup;
        const std::string currentValuePath = _pathPrefix + ".ratingGroup";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }
        if (value > 4294967295)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 4294967295;";
        }

    }
         
    if (usedUnitContainerIsSet())
    {
        const std::vector<org::openapitools::server::model::UsedUnitContainer>& value = m_UsedUnitContainer;
        const std::string currentValuePath = _pathPrefix + ".usedUnitContainer";
                
        
        if (value.size() < 0)
        {
            success = false;
            msg << currentValuePath << ": must have at least 0 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::UsedUnitContainer& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".usedUnitContainer") && success;
 
                i++;
            }
        }

    }
            
    return success;
}

bool MultipleUnitUsage::operator==(const MultipleUnitUsage& rhs) const
{
    return
    
    
    (getRatingGroup() == rhs.getRatingGroup())
     &&
    
    
    ((!usedUnitContainerIsSet() && !rhs.usedUnitContainerIsSet()) || (usedUnitContainerIsSet() && rhs.usedUnitContainerIsSet() && getUsedUnitContainer() == rhs.getUsedUnitContainer())) &&
    
    
    ((!uPFIDIsSet() && !rhs.uPFIDIsSet()) || (uPFIDIsSet() && rhs.uPFIDIsSet() && getUPFID() == rhs.getUPFID())) &&
    
    
    ((!multihomedPDUAddressIsSet() && !rhs.multihomedPDUAddressIsSet()) || (multihomedPDUAddressIsSet() && rhs.multihomedPDUAddressIsSet() && getMultihomedPDUAddress() == rhs.getMultihomedPDUAddress()))
    
    ;
}

bool MultipleUnitUsage::operator!=(const MultipleUnitUsage& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const MultipleUnitUsage& o)
{
    j = nlohmann::json::object();
    j["ratingGroup"] = o.m_RatingGroup;
    if(o.usedUnitContainerIsSet() || !o.m_UsedUnitContainer.empty())
        j["usedUnitContainer"] = o.m_UsedUnitContainer;
    if(o.uPFIDIsSet())
        j["uPFID"] = o.m_UPFID;
    if(o.multihomedPDUAddressIsSet())
        j["multihomedPDUAddress"] = o.m_MultihomedPDUAddress;
    
}

void from_json(const nlohmann::json& j, MultipleUnitUsage& o)
{
    j.at("ratingGroup").get_to(o.m_RatingGroup);
    if(j.find("usedUnitContainer") != j.end())
    {
        j.at("usedUnitContainer").get_to(o.m_UsedUnitContainer);
        o.m_UsedUnitContainerIsSet = true;
    } 
    if(j.find("uPFID") != j.end())
    {
        j.at("uPFID").get_to(o.m_UPFID);
        o.m_UPFIDIsSet = true;
    } 
    if(j.find("multihomedPDUAddress") != j.end())
    {
        j.at("multihomedPDUAddress").get_to(o.m_MultihomedPDUAddress);
        o.m_MultihomedPDUAddressIsSet = true;
    } 
    
}

int32_t MultipleUnitUsage::getRatingGroup() const
{
    return m_RatingGroup;
}
void MultipleUnitUsage::setRatingGroup(int32_t const value)
{
    m_RatingGroup = value;
}
std::vector<org::openapitools::server::model::UsedUnitContainer> MultipleUnitUsage::getUsedUnitContainer() const
{
    return m_UsedUnitContainer;
}
void MultipleUnitUsage::setUsedUnitContainer(std::vector<org::openapitools::server::model::UsedUnitContainer> const& value)
{
    m_UsedUnitContainer = value;
    m_UsedUnitContainerIsSet = true;
}
bool MultipleUnitUsage::usedUnitContainerIsSet() const
{
    return m_UsedUnitContainerIsSet;
}
void MultipleUnitUsage::unsetUsedUnitContainer()
{
    m_UsedUnitContainerIsSet = false;
}
std::string MultipleUnitUsage::getUPFID() const
{
    return m_UPFID;
}
void MultipleUnitUsage::setUPFID(std::string const& value)
{
    m_UPFID = value;
    m_UPFIDIsSet = true;
}
bool MultipleUnitUsage::uPFIDIsSet() const
{
    return m_UPFIDIsSet;
}
void MultipleUnitUsage::unsetUPFID()
{
    m_UPFIDIsSet = false;
}
org::openapitools::server::model::PDUAddress MultipleUnitUsage::getMultihomedPDUAddress() const
{
    return m_MultihomedPDUAddress;
}
void MultipleUnitUsage::setMultihomedPDUAddress(org::openapitools::server::model::PDUAddress const& value)
{
    m_MultihomedPDUAddress = value;
    m_MultihomedPDUAddressIsSet = true;
}
bool MultipleUnitUsage::multihomedPDUAddressIsSet() const
{
    return m_MultihomedPDUAddressIsSet;
}
void MultipleUnitUsage::unsetMultihomedPDUAddress()
{
    m_MultihomedPDUAddressIsSet = false;
}


} // namespace org::openapitools::server::model

