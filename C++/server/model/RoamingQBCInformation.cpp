/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RoamingQBCInformation.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

RoamingQBCInformation::RoamingQBCInformation()
{
    m_MultipleQFIcontainerIsSet = false;
    m_UPFID = "";
    m_UPFIDIsSet = false;
    m_RoamingChargingProfileIsSet = false;
    
}

void RoamingQBCInformation::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool RoamingQBCInformation::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RoamingQBCInformation::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RoamingQBCInformation" : pathPrefix;

         
    if (multipleQFIcontainerIsSet())
    {
        const std::vector<org::openapitools::server::model::MultipleQFIcontainer>& value = m_MultipleQFIcontainer;
        const std::string currentValuePath = _pathPrefix + ".multipleQFIcontainer";
                
        
        if (value.size() < 0)
        {
            success = false;
            msg << currentValuePath << ": must have at least 0 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::MultipleQFIcontainer& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".multipleQFIcontainer") && success;
 
                i++;
            }
        }

    }
            
    return success;
}

bool RoamingQBCInformation::operator==(const RoamingQBCInformation& rhs) const
{
    return
    
    
    
    ((!multipleQFIcontainerIsSet() && !rhs.multipleQFIcontainerIsSet()) || (multipleQFIcontainerIsSet() && rhs.multipleQFIcontainerIsSet() && getMultipleQFIcontainer() == rhs.getMultipleQFIcontainer())) &&
    
    
    ((!uPFIDIsSet() && !rhs.uPFIDIsSet()) || (uPFIDIsSet() && rhs.uPFIDIsSet() && getUPFID() == rhs.getUPFID())) &&
    
    
    ((!roamingChargingProfileIsSet() && !rhs.roamingChargingProfileIsSet()) || (roamingChargingProfileIsSet() && rhs.roamingChargingProfileIsSet() && getRoamingChargingProfile() == rhs.getRoamingChargingProfile()))
    
    ;
}

bool RoamingQBCInformation::operator!=(const RoamingQBCInformation& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RoamingQBCInformation& o)
{
    j = nlohmann::json::object();
    if(o.multipleQFIcontainerIsSet() || !o.m_MultipleQFIcontainer.empty())
        j["multipleQFIcontainer"] = o.m_MultipleQFIcontainer;
    if(o.uPFIDIsSet())
        j["uPFID"] = o.m_UPFID;
    if(o.roamingChargingProfileIsSet())
        j["roamingChargingProfile"] = o.m_RoamingChargingProfile;
    
}

void from_json(const nlohmann::json& j, RoamingQBCInformation& o)
{
    if(j.find("multipleQFIcontainer") != j.end())
    {
        j.at("multipleQFIcontainer").get_to(o.m_MultipleQFIcontainer);
        o.m_MultipleQFIcontainerIsSet = true;
    } 
    if(j.find("uPFID") != j.end())
    {
        j.at("uPFID").get_to(o.m_UPFID);
        o.m_UPFIDIsSet = true;
    } 
    if(j.find("roamingChargingProfile") != j.end())
    {
        j.at("roamingChargingProfile").get_to(o.m_RoamingChargingProfile);
        o.m_RoamingChargingProfileIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::MultipleQFIcontainer> RoamingQBCInformation::getMultipleQFIcontainer() const
{
    return m_MultipleQFIcontainer;
}
void RoamingQBCInformation::setMultipleQFIcontainer(std::vector<org::openapitools::server::model::MultipleQFIcontainer> const& value)
{
    m_MultipleQFIcontainer = value;
    m_MultipleQFIcontainerIsSet = true;
}
bool RoamingQBCInformation::multipleQFIcontainerIsSet() const
{
    return m_MultipleQFIcontainerIsSet;
}
void RoamingQBCInformation::unsetMultipleQFIcontainer()
{
    m_MultipleQFIcontainerIsSet = false;
}
std::string RoamingQBCInformation::getUPFID() const
{
    return m_UPFID;
}
void RoamingQBCInformation::setUPFID(std::string const& value)
{
    m_UPFID = value;
    m_UPFIDIsSet = true;
}
bool RoamingQBCInformation::uPFIDIsSet() const
{
    return m_UPFIDIsSet;
}
void RoamingQBCInformation::unsetUPFID()
{
    m_UPFIDIsSet = false;
}
org::openapitools::server::model::RoamingChargingProfile RoamingQBCInformation::getRoamingChargingProfile() const
{
    return m_RoamingChargingProfile;
}
void RoamingQBCInformation::setRoamingChargingProfile(org::openapitools::server::model::RoamingChargingProfile const& value)
{
    m_RoamingChargingProfile = value;
    m_RoamingChargingProfileIsSet = true;
}
bool RoamingQBCInformation::roamingChargingProfileIsSet() const
{
    return m_RoamingChargingProfileIsSet;
}
void RoamingQBCInformation::unsetRoamingChargingProfile()
{
    m_RoamingChargingProfileIsSet = false;
}


} // namespace org::openapitools::server::model

