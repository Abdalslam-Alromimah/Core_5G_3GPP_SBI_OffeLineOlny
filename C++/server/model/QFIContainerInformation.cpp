/**
* Nchf_OfflineOnlyCharging
* OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 1.2.0-alpha.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "QFIContainerInformation.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

QFIContainerInformation::QFIContainerInformation()
{
    m_QFI = 0;
    m_QFIIsSet = false;
    m_TimeofFirstUsage = "";
    m_TimeofFirstUsageIsSet = false;
    m_TimeofLastUsage = "";
    m_TimeofLastUsageIsSet = false;
    m_QoSInformationIsSet = false;
    m_QoSCharacteristicsIsSet = false;
    m_UserLocationInformationIsSet = false;
    m_UetimeZone = "";
    m_UetimeZoneIsSet = false;
    m_PresenceReportingAreaInformationIsSet = false;
    m_RATTypeIsSet = false;
    m_ServingNetworkFunctionIDIsSet = false;
    m_r_3gppPSDataOffStatusIsSet = false;
    
}

void QFIContainerInformation::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool QFIContainerInformation::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool QFIContainerInformation::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "QFIContainerInformation" : pathPrefix;

         
    if (qFIIsSet())
    {
        const int32_t& value = m_QFI;
        const std::string currentValuePath = _pathPrefix + ".qFI";
                
        
        if (value < 0)
        {
            success = false;
            msg << currentValuePath << ": must be greater than or equal to 0;";
        }
        if (value > 63)
        {
            success = false;
            msg << currentValuePath << ": must be less than or equal to 63;";
        }

    }
                                 
    if (presenceReportingAreaInformationIsSet())
    {
        const std::map<std::string, org::openapitools::server::model::PresenceInfo>& value = m_PresenceReportingAreaInformation;
        const std::string currentValuePath = _pathPrefix + ".presenceReportingAreaInformation";
                
        

    }
             
    if (servingNetworkFunctionIDIsSet())
    {
        const std::vector<org::openapitools::server::model::ServingNetworkFunctionID>& value = m_ServingNetworkFunctionID;
        const std::string currentValuePath = _pathPrefix + ".servingNetworkFunctionID";
                
        
        if (value.size() < 0)
        {
            success = false;
            msg << currentValuePath << ": must have at least 0 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::ServingNetworkFunctionID& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".servingNetworkFunctionID") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool QFIContainerInformation::operator==(const QFIContainerInformation& rhs) const
{
    return
    
    
    
    ((!qFIIsSet() && !rhs.qFIIsSet()) || (qFIIsSet() && rhs.qFIIsSet() && getQFI() == rhs.getQFI())) &&
    
    
    ((!timeofFirstUsageIsSet() && !rhs.timeofFirstUsageIsSet()) || (timeofFirstUsageIsSet() && rhs.timeofFirstUsageIsSet() && getTimeofFirstUsage() == rhs.getTimeofFirstUsage())) &&
    
    
    ((!timeofLastUsageIsSet() && !rhs.timeofLastUsageIsSet()) || (timeofLastUsageIsSet() && rhs.timeofLastUsageIsSet() && getTimeofLastUsage() == rhs.getTimeofLastUsage())) &&
    
    
    ((!qoSInformationIsSet() && !rhs.qoSInformationIsSet()) || (qoSInformationIsSet() && rhs.qoSInformationIsSet() && getQoSInformation() == rhs.getQoSInformation())) &&
    
    
    ((!qoSCharacteristicsIsSet() && !rhs.qoSCharacteristicsIsSet()) || (qoSCharacteristicsIsSet() && rhs.qoSCharacteristicsIsSet() && getQoSCharacteristics() == rhs.getQoSCharacteristics())) &&
    
    
    ((!userLocationInformationIsSet() && !rhs.userLocationInformationIsSet()) || (userLocationInformationIsSet() && rhs.userLocationInformationIsSet() && getUserLocationInformation() == rhs.getUserLocationInformation())) &&
    
    
    ((!uetimeZoneIsSet() && !rhs.uetimeZoneIsSet()) || (uetimeZoneIsSet() && rhs.uetimeZoneIsSet() && getUetimeZone() == rhs.getUetimeZone())) &&
    
    
    ((!presenceReportingAreaInformationIsSet() && !rhs.presenceReportingAreaInformationIsSet()) || (presenceReportingAreaInformationIsSet() && rhs.presenceReportingAreaInformationIsSet() && getPresenceReportingAreaInformation() == rhs.getPresenceReportingAreaInformation())) &&
    
    
    ((!rATTypeIsSet() && !rhs.rATTypeIsSet()) || (rATTypeIsSet() && rhs.rATTypeIsSet() && getRATType() == rhs.getRATType())) &&
    
    
    ((!servingNetworkFunctionIDIsSet() && !rhs.servingNetworkFunctionIDIsSet()) || (servingNetworkFunctionIDIsSet() && rhs.servingNetworkFunctionIDIsSet() && getServingNetworkFunctionID() == rhs.getServingNetworkFunctionID())) &&
    
    
    ((!r3gppPSDataOffStatusIsSet() && !rhs.r3gppPSDataOffStatusIsSet()) || (r3gppPSDataOffStatusIsSet() && rhs.r3gppPSDataOffStatusIsSet() && getR3gppPSDataOffStatus() == rhs.getR3gppPSDataOffStatus()))
    
    ;
}

bool QFIContainerInformation::operator!=(const QFIContainerInformation& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const QFIContainerInformation& o)
{
    j = nlohmann::json::object();
    if(o.qFIIsSet())
        j["qFI"] = o.m_QFI;
    if(o.timeofFirstUsageIsSet())
        j["timeofFirstUsage"] = o.m_TimeofFirstUsage;
    if(o.timeofLastUsageIsSet())
        j["timeofLastUsage"] = o.m_TimeofLastUsage;
    if(o.qoSInformationIsSet())
        j["qoSInformation"] = o.m_QoSInformation;
    if(o.qoSCharacteristicsIsSet())
        j["qoSCharacteristics"] = o.m_QoSCharacteristics;
    if(o.userLocationInformationIsSet())
        j["userLocationInformation"] = o.m_UserLocationInformation;
    if(o.uetimeZoneIsSet())
        j["uetimeZone"] = o.m_UetimeZone;
    if(o.presenceReportingAreaInformationIsSet() || !o.m_PresenceReportingAreaInformation.empty())
        j["presenceReportingAreaInformation"] = o.m_PresenceReportingAreaInformation;
    if(o.rATTypeIsSet())
        j["rATType"] = o.m_RATType;
    if(o.servingNetworkFunctionIDIsSet() || !o.m_ServingNetworkFunctionID.empty())
        j["servingNetworkFunctionID"] = o.m_ServingNetworkFunctionID;
    if(o.r3gppPSDataOffStatusIsSet())
        j["3gppPSDataOffStatus"] = o.m_r_3gppPSDataOffStatus;
    
}

void from_json(const nlohmann::json& j, QFIContainerInformation& o)
{
    if(j.find("qFI") != j.end())
    {
        j.at("qFI").get_to(o.m_QFI);
        o.m_QFIIsSet = true;
    } 
    if(j.find("timeofFirstUsage") != j.end())
    {
        j.at("timeofFirstUsage").get_to(o.m_TimeofFirstUsage);
        o.m_TimeofFirstUsageIsSet = true;
    } 
    if(j.find("timeofLastUsage") != j.end())
    {
        j.at("timeofLastUsage").get_to(o.m_TimeofLastUsage);
        o.m_TimeofLastUsageIsSet = true;
    } 
    if(j.find("qoSInformation") != j.end())
    {
        j.at("qoSInformation").get_to(o.m_QoSInformation);
        o.m_QoSInformationIsSet = true;
    } 
    if(j.find("qoSCharacteristics") != j.end())
    {
        j.at("qoSCharacteristics").get_to(o.m_QoSCharacteristics);
        o.m_QoSCharacteristicsIsSet = true;
    } 
    if(j.find("userLocationInformation") != j.end())
    {
        j.at("userLocationInformation").get_to(o.m_UserLocationInformation);
        o.m_UserLocationInformationIsSet = true;
    } 
    if(j.find("uetimeZone") != j.end())
    {
        j.at("uetimeZone").get_to(o.m_UetimeZone);
        o.m_UetimeZoneIsSet = true;
    } 
    if(j.find("presenceReportingAreaInformation") != j.end())
    {
        j.at("presenceReportingAreaInformation").get_to(o.m_PresenceReportingAreaInformation);
        o.m_PresenceReportingAreaInformationIsSet = true;
    } 
    if(j.find("rATType") != j.end())
    {
        j.at("rATType").get_to(o.m_RATType);
        o.m_RATTypeIsSet = true;
    } 
    if(j.find("servingNetworkFunctionID") != j.end())
    {
        j.at("servingNetworkFunctionID").get_to(o.m_ServingNetworkFunctionID);
        o.m_ServingNetworkFunctionIDIsSet = true;
    } 
    if(j.find("3gppPSDataOffStatus") != j.end())
    {
        j.at("3gppPSDataOffStatus").get_to(o.m_r_3gppPSDataOffStatus);
        o.m_r_3gppPSDataOffStatusIsSet = true;
    } 
    
}

int32_t QFIContainerInformation::getQFI() const
{
    return m_QFI;
}
void QFIContainerInformation::setQFI(int32_t const value)
{
    m_QFI = value;
    m_QFIIsSet = true;
}
bool QFIContainerInformation::qFIIsSet() const
{
    return m_QFIIsSet;
}
void QFIContainerInformation::unsetQFI()
{
    m_QFIIsSet = false;
}
std::string QFIContainerInformation::getTimeofFirstUsage() const
{
    return m_TimeofFirstUsage;
}
void QFIContainerInformation::setTimeofFirstUsage(std::string const& value)
{
    m_TimeofFirstUsage = value;
    m_TimeofFirstUsageIsSet = true;
}
bool QFIContainerInformation::timeofFirstUsageIsSet() const
{
    return m_TimeofFirstUsageIsSet;
}
void QFIContainerInformation::unsetTimeofFirstUsage()
{
    m_TimeofFirstUsageIsSet = false;
}
std::string QFIContainerInformation::getTimeofLastUsage() const
{
    return m_TimeofLastUsage;
}
void QFIContainerInformation::setTimeofLastUsage(std::string const& value)
{
    m_TimeofLastUsage = value;
    m_TimeofLastUsageIsSet = true;
}
bool QFIContainerInformation::timeofLastUsageIsSet() const
{
    return m_TimeofLastUsageIsSet;
}
void QFIContainerInformation::unsetTimeofLastUsage()
{
    m_TimeofLastUsageIsSet = false;
}
org::openapitools::server::model::QosData QFIContainerInformation::getQoSInformation() const
{
    return m_QoSInformation;
}
void QFIContainerInformation::setQoSInformation(org::openapitools::server::model::QosData const& value)
{
    m_QoSInformation = value;
    m_QoSInformationIsSet = true;
}
bool QFIContainerInformation::qoSInformationIsSet() const
{
    return m_QoSInformationIsSet;
}
void QFIContainerInformation::unsetQoSInformation()
{
    m_QoSInformationIsSet = false;
}
org::openapitools::server::model::QosCharacteristics QFIContainerInformation::getQoSCharacteristics() const
{
    return m_QoSCharacteristics;
}
void QFIContainerInformation::setQoSCharacteristics(org::openapitools::server::model::QosCharacteristics const& value)
{
    m_QoSCharacteristics = value;
    m_QoSCharacteristicsIsSet = true;
}
bool QFIContainerInformation::qoSCharacteristicsIsSet() const
{
    return m_QoSCharacteristicsIsSet;
}
void QFIContainerInformation::unsetQoSCharacteristics()
{
    m_QoSCharacteristicsIsSet = false;
}
org::openapitools::server::model::UserLocation QFIContainerInformation::getUserLocationInformation() const
{
    return m_UserLocationInformation;
}
void QFIContainerInformation::setUserLocationInformation(org::openapitools::server::model::UserLocation const& value)
{
    m_UserLocationInformation = value;
    m_UserLocationInformationIsSet = true;
}
bool QFIContainerInformation::userLocationInformationIsSet() const
{
    return m_UserLocationInformationIsSet;
}
void QFIContainerInformation::unsetUserLocationInformation()
{
    m_UserLocationInformationIsSet = false;
}
std::string QFIContainerInformation::getUetimeZone() const
{
    return m_UetimeZone;
}
void QFIContainerInformation::setUetimeZone(std::string const& value)
{
    m_UetimeZone = value;
    m_UetimeZoneIsSet = true;
}
bool QFIContainerInformation::uetimeZoneIsSet() const
{
    return m_UetimeZoneIsSet;
}
void QFIContainerInformation::unsetUetimeZone()
{
    m_UetimeZoneIsSet = false;
}
std::map<std::string, org::openapitools::server::model::PresenceInfo> QFIContainerInformation::getPresenceReportingAreaInformation() const
{
    return m_PresenceReportingAreaInformation;
}
void QFIContainerInformation::setPresenceReportingAreaInformation(std::map<std::string, org::openapitools::server::model::PresenceInfo> const& value)
{
    m_PresenceReportingAreaInformation = value;
    m_PresenceReportingAreaInformationIsSet = true;
}
bool QFIContainerInformation::presenceReportingAreaInformationIsSet() const
{
    return m_PresenceReportingAreaInformationIsSet;
}
void QFIContainerInformation::unsetPresenceReportingAreaInformation()
{
    m_PresenceReportingAreaInformationIsSet = false;
}
org::openapitools::server::model::RatType QFIContainerInformation::getRATType() const
{
    return m_RATType;
}
void QFIContainerInformation::setRATType(org::openapitools::server::model::RatType const& value)
{
    m_RATType = value;
    m_RATTypeIsSet = true;
}
bool QFIContainerInformation::rATTypeIsSet() const
{
    return m_RATTypeIsSet;
}
void QFIContainerInformation::unsetRATType()
{
    m_RATTypeIsSet = false;
}
std::vector<org::openapitools::server::model::ServingNetworkFunctionID> QFIContainerInformation::getServingNetworkFunctionID() const
{
    return m_ServingNetworkFunctionID;
}
void QFIContainerInformation::setServingNetworkFunctionID(std::vector<org::openapitools::server::model::ServingNetworkFunctionID> const& value)
{
    m_ServingNetworkFunctionID = value;
    m_ServingNetworkFunctionIDIsSet = true;
}
bool QFIContainerInformation::servingNetworkFunctionIDIsSet() const
{
    return m_ServingNetworkFunctionIDIsSet;
}
void QFIContainerInformation::unsetServingNetworkFunctionID()
{
    m_ServingNetworkFunctionIDIsSet = false;
}
org::openapitools::server::model::r_3GPPPSDataOffStatus QFIContainerInformation::getR3gppPSDataOffStatus() const
{
    return m_r_3gppPSDataOffStatus;
}
void QFIContainerInformation::setR3gppPSDataOffStatus(org::openapitools::server::model::r_3GPPPSDataOffStatus const& value)
{
    m_r_3gppPSDataOffStatus = value;
    m_r_3gppPSDataOffStatusIsSet = true;
}
bool QFIContainerInformation::r3gppPSDataOffStatusIsSet() const
{
    return m_r_3gppPSDataOffStatusIsSet;
}
void QFIContainerInformation::unsetr_3gppPSDataOffStatus()
{
    m_r_3gppPSDataOffStatusIsSet = false;
}


} // namespace org::openapitools::server::model

