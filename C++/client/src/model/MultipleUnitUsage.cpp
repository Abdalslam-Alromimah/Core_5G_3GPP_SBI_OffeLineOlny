/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/MultipleUnitUsage.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



MultipleUnitUsage::MultipleUnitUsage()
{
    m_RatingGroup = 0;
    m_RatingGroupIsSet = false;
    m_UsedUnitContainerIsSet = false;
    m_UPFID = utility::conversions::to_string_t("");
    m_UPFIDIsSet = false;
    m_MultihomedPDUAddressIsSet = false;
}

MultipleUnitUsage::~MultipleUnitUsage()
{
}

void MultipleUnitUsage::validate()
{
    // TODO: implement validation
}

web::json::value MultipleUnitUsage::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_RatingGroupIsSet)
    {
        val[utility::conversions::to_string_t(U("ratingGroup"))] = ModelBase::toJson(m_RatingGroup);
    }
    if(m_UsedUnitContainerIsSet)
    {
        val[utility::conversions::to_string_t(U("usedUnitContainer"))] = ModelBase::toJson(m_UsedUnitContainer);
    }
    if(m_UPFIDIsSet)
    {
        val[utility::conversions::to_string_t(U("uPFID"))] = ModelBase::toJson(m_UPFID);
    }
    if(m_MultihomedPDUAddressIsSet)
    {
        val[utility::conversions::to_string_t(U("multihomedPDUAddress"))] = ModelBase::toJson(m_MultihomedPDUAddress);
    }

    return val;
}

bool MultipleUnitUsage::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("ratingGroup"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ratingGroup")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRatingGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRatingGroup);
            setRatingGroup(refVal_setRatingGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("usedUnitContainer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("usedUnitContainer")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<UsedUnitContainer>> refVal_setUsedUnitContainer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsedUnitContainer);
            setUsedUnitContainer(refVal_setUsedUnitContainer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uPFID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uPFID")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUPFID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUPFID);
            setUPFID(refVal_setUPFID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("multihomedPDUAddress"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("multihomedPDUAddress")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PDUAddress> refVal_setMultihomedPDUAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMultihomedPDUAddress);
            setMultihomedPDUAddress(refVal_setMultihomedPDUAddress);
        }
    }
    return ok;
}

void MultipleUnitUsage::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_RatingGroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ratingGroup")), m_RatingGroup));
    }
    if(m_UsedUnitContainerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("usedUnitContainer")), m_UsedUnitContainer));
    }
    if(m_UPFIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uPFID")), m_UPFID));
    }
    if(m_MultihomedPDUAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("multihomedPDUAddress")), m_MultihomedPDUAddress));
    }
}

bool MultipleUnitUsage::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("ratingGroup"))))
    {
        int32_t refVal_setRatingGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ratingGroup"))), refVal_setRatingGroup );
        setRatingGroup(refVal_setRatingGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("usedUnitContainer"))))
    {
        std::vector<std::shared_ptr<UsedUnitContainer>> refVal_setUsedUnitContainer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("usedUnitContainer"))), refVal_setUsedUnitContainer );
        setUsedUnitContainer(refVal_setUsedUnitContainer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uPFID"))))
    {
        utility::string_t refVal_setUPFID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uPFID"))), refVal_setUPFID );
        setUPFID(refVal_setUPFID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("multihomedPDUAddress"))))
    {
        std::shared_ptr<PDUAddress> refVal_setMultihomedPDUAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("multihomedPDUAddress"))), refVal_setMultihomedPDUAddress );
        setMultihomedPDUAddress(refVal_setMultihomedPDUAddress);
    }
    return ok;
}

int32_t MultipleUnitUsage::getRatingGroup() const
{
    return m_RatingGroup;
}

void MultipleUnitUsage::setRatingGroup(int32_t value)
{
    m_RatingGroup = value;
    m_RatingGroupIsSet = true;
}

bool MultipleUnitUsage::ratingGroupIsSet() const
{
    return m_RatingGroupIsSet;
}

void MultipleUnitUsage::unsetRatingGroup()
{
    m_RatingGroupIsSet = false;
}
std::vector<std::shared_ptr<UsedUnitContainer>>& MultipleUnitUsage::getUsedUnitContainer()
{
    return m_UsedUnitContainer;
}

void MultipleUnitUsage::setUsedUnitContainer(const std::vector<std::shared_ptr<UsedUnitContainer>>& value)
{
    m_UsedUnitContainer = value;
    m_UsedUnitContainerIsSet = true;
}

bool MultipleUnitUsage::usedUnitContainerIsSet() const
{
    return m_UsedUnitContainerIsSet;
}

void MultipleUnitUsage::unsetUsedUnitContainer()
{
    m_UsedUnitContainerIsSet = false;
}
utility::string_t MultipleUnitUsage::getUPFID() const
{
    return m_UPFID;
}

void MultipleUnitUsage::setUPFID(const utility::string_t& value)
{
    m_UPFID = value;
    m_UPFIDIsSet = true;
}

bool MultipleUnitUsage::uPFIDIsSet() const
{
    return m_UPFIDIsSet;
}

void MultipleUnitUsage::unsetUPFID()
{
    m_UPFIDIsSet = false;
}
std::shared_ptr<PDUAddress> MultipleUnitUsage::getMultihomedPDUAddress() const
{
    return m_MultihomedPDUAddress;
}

void MultipleUnitUsage::setMultihomedPDUAddress(const std::shared_ptr<PDUAddress>& value)
{
    m_MultihomedPDUAddress = value;
    m_MultihomedPDUAddressIsSet = true;
}

bool MultipleUnitUsage::multihomedPDUAddressIsSet() const
{
    return m_MultihomedPDUAddressIsSet;
}

void MultipleUnitUsage::unsetMultihomedPDUAddress()
{
    m_MultihomedPDUAddressIsSet = false;
}
}
}
}
}


