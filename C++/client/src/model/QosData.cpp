/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/QosData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



QosData::QosData()
{
    m_QosId = utility::conversions::to_string_t("");
    m_QosIdIsSet = false;
    m_r_5qi = 0;
    m_r_5qiIsSet = false;
    m_MaxbrUl = utility::conversions::to_string_t("");
    m_MaxbrUlIsSet = false;
    m_MaxbrDl = utility::conversions::to_string_t("");
    m_MaxbrDlIsSet = false;
    m_GbrUl = utility::conversions::to_string_t("");
    m_GbrUlIsSet = false;
    m_GbrDl = utility::conversions::to_string_t("");
    m_GbrDlIsSet = false;
    m_ArpIsSet = false;
    m_Qnc = false;
    m_QncIsSet = false;
    m_PriorityLevel = 0;
    m_PriorityLevelIsSet = false;
    m_AverWindow = 0;
    m_AverWindowIsSet = false;
    m_MaxDataBurstVol = 0;
    m_MaxDataBurstVolIsSet = false;
    m_ReflectiveQos = false;
    m_ReflectiveQosIsSet = false;
    m_SharingKeyDl = utility::conversions::to_string_t("");
    m_SharingKeyDlIsSet = false;
    m_SharingKeyUl = utility::conversions::to_string_t("");
    m_SharingKeyUlIsSet = false;
    m_MaxPacketLossRateDl = 0;
    m_MaxPacketLossRateDlIsSet = false;
    m_MaxPacketLossRateUl = 0;
    m_MaxPacketLossRateUlIsSet = false;
    m_DefQosFlowIndication = false;
    m_DefQosFlowIndicationIsSet = false;
    m_ExtMaxDataBurstVol = 0;
    m_ExtMaxDataBurstVolIsSet = false;
    m_PacketDelayBudget = 0;
    m_PacketDelayBudgetIsSet = false;
    m_PacketErrorRate = utility::conversions::to_string_t("");
    m_PacketErrorRateIsSet = false;
    m_PduSetQosDlIsSet = false;
    m_PduSetQosUlIsSet = false;
}

QosData::~QosData()
{
}

void QosData::validate()
{
    // TODO: implement validation
}

web::json::value QosData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_QosIdIsSet)
    {
        val[utility::conversions::to_string_t(U("qosId"))] = ModelBase::toJson(m_QosId);
    }
    if(m_r_5qiIsSet)
    {
        val[utility::conversions::to_string_t(U("5qi"))] = ModelBase::toJson(m_r_5qi);
    }
    if(m_MaxbrUlIsSet)
    {
        val[utility::conversions::to_string_t(U("maxbrUl"))] = ModelBase::toJson(m_MaxbrUl);
    }
    if(m_MaxbrDlIsSet)
    {
        val[utility::conversions::to_string_t(U("maxbrDl"))] = ModelBase::toJson(m_MaxbrDl);
    }
    if(m_GbrUlIsSet)
    {
        val[utility::conversions::to_string_t(U("gbrUl"))] = ModelBase::toJson(m_GbrUl);
    }
    if(m_GbrDlIsSet)
    {
        val[utility::conversions::to_string_t(U("gbrDl"))] = ModelBase::toJson(m_GbrDl);
    }
    if(m_ArpIsSet)
    {
        val[utility::conversions::to_string_t(U("arp"))] = ModelBase::toJson(m_Arp);
    }
    if(m_QncIsSet)
    {
        val[utility::conversions::to_string_t(U("qnc"))] = ModelBase::toJson(m_Qnc);
    }
    if(m_PriorityLevelIsSet)
    {
        val[utility::conversions::to_string_t(U("priorityLevel"))] = ModelBase::toJson(m_PriorityLevel);
    }
    if(m_AverWindowIsSet)
    {
        val[utility::conversions::to_string_t(U("averWindow"))] = ModelBase::toJson(m_AverWindow);
    }
    if(m_MaxDataBurstVolIsSet)
    {
        val[utility::conversions::to_string_t(U("maxDataBurstVol"))] = ModelBase::toJson(m_MaxDataBurstVol);
    }
    if(m_ReflectiveQosIsSet)
    {
        val[utility::conversions::to_string_t(U("reflectiveQos"))] = ModelBase::toJson(m_ReflectiveQos);
    }
    if(m_SharingKeyDlIsSet)
    {
        val[utility::conversions::to_string_t(U("sharingKeyDl"))] = ModelBase::toJson(m_SharingKeyDl);
    }
    if(m_SharingKeyUlIsSet)
    {
        val[utility::conversions::to_string_t(U("sharingKeyUl"))] = ModelBase::toJson(m_SharingKeyUl);
    }
    if(m_MaxPacketLossRateDlIsSet)
    {
        val[utility::conversions::to_string_t(U("maxPacketLossRateDl"))] = ModelBase::toJson(m_MaxPacketLossRateDl);
    }
    if(m_MaxPacketLossRateUlIsSet)
    {
        val[utility::conversions::to_string_t(U("maxPacketLossRateUl"))] = ModelBase::toJson(m_MaxPacketLossRateUl);
    }
    if(m_DefQosFlowIndicationIsSet)
    {
        val[utility::conversions::to_string_t(U("defQosFlowIndication"))] = ModelBase::toJson(m_DefQosFlowIndication);
    }
    if(m_ExtMaxDataBurstVolIsSet)
    {
        val[utility::conversions::to_string_t(U("extMaxDataBurstVol"))] = ModelBase::toJson(m_ExtMaxDataBurstVol);
    }
    if(m_PacketDelayBudgetIsSet)
    {
        val[utility::conversions::to_string_t(U("packetDelayBudget"))] = ModelBase::toJson(m_PacketDelayBudget);
    }
    if(m_PacketErrorRateIsSet)
    {
        val[utility::conversions::to_string_t(U("packetErrorRate"))] = ModelBase::toJson(m_PacketErrorRate);
    }
    if(m_PduSetQosDlIsSet)
    {
        val[utility::conversions::to_string_t(U("pduSetQosDl"))] = ModelBase::toJson(m_PduSetQosDl);
    }
    if(m_PduSetQosUlIsSet)
    {
        val[utility::conversions::to_string_t(U("pduSetQosUl"))] = ModelBase::toJson(m_PduSetQosUl);
    }

    return val;
}

bool QosData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("qosId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("qosId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQosId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQosId);
            setQosId(refVal_setQosId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("5qi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("5qi")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setR5qi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setR5qi);
            setR5qi(refVal_setR5qi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("maxbrUl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maxbrUl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMaxbrUl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxbrUl);
            setMaxbrUl(refVal_setMaxbrUl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("maxbrDl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maxbrDl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMaxbrDl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxbrDl);
            setMaxbrDl(refVal_setMaxbrDl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gbrUl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gbrUl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGbrUl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGbrUl);
            setGbrUl(refVal_setGbrUl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gbrDl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gbrDl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGbrDl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGbrDl);
            setGbrDl(refVal_setGbrDl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("arp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("arp")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Arp> refVal_setArp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setArp);
            setArp(refVal_setArp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("qnc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("qnc")));
        if(!fieldValue.is_null())
        {
            bool refVal_setQnc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQnc);
            setQnc(refVal_setQnc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("priorityLevel"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("priorityLevel")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPriorityLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriorityLevel);
            setPriorityLevel(refVal_setPriorityLevel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("averWindow"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("averWindow")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAverWindow;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAverWindow);
            setAverWindow(refVal_setAverWindow);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("maxDataBurstVol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maxDataBurstVol")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxDataBurstVol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxDataBurstVol);
            setMaxDataBurstVol(refVal_setMaxDataBurstVol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reflectiveQos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reflectiveQos")));
        if(!fieldValue.is_null())
        {
            bool refVal_setReflectiveQos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReflectiveQos);
            setReflectiveQos(refVal_setReflectiveQos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sharingKeyDl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sharingKeyDl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSharingKeyDl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSharingKeyDl);
            setSharingKeyDl(refVal_setSharingKeyDl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sharingKeyUl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sharingKeyUl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSharingKeyUl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSharingKeyUl);
            setSharingKeyUl(refVal_setSharingKeyUl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("maxPacketLossRateDl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maxPacketLossRateDl")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxPacketLossRateDl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxPacketLossRateDl);
            setMaxPacketLossRateDl(refVal_setMaxPacketLossRateDl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("maxPacketLossRateUl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maxPacketLossRateUl")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxPacketLossRateUl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxPacketLossRateUl);
            setMaxPacketLossRateUl(refVal_setMaxPacketLossRateUl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("defQosFlowIndication"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("defQosFlowIndication")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDefQosFlowIndication;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDefQosFlowIndication);
            setDefQosFlowIndication(refVal_setDefQosFlowIndication);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("extMaxDataBurstVol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("extMaxDataBurstVol")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setExtMaxDataBurstVol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExtMaxDataBurstVol);
            setExtMaxDataBurstVol(refVal_setExtMaxDataBurstVol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("packetDelayBudget"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("packetDelayBudget")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPacketDelayBudget;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPacketDelayBudget);
            setPacketDelayBudget(refVal_setPacketDelayBudget);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("packetErrorRate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("packetErrorRate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPacketErrorRate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPacketErrorRate);
            setPacketErrorRate(refVal_setPacketErrorRate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pduSetQosDl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pduSetQosDl")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PduSetQosParaRm> refVal_setPduSetQosDl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPduSetQosDl);
            setPduSetQosDl(refVal_setPduSetQosDl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pduSetQosUl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pduSetQosUl")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PduSetQosParaRm> refVal_setPduSetQosUl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPduSetQosUl);
            setPduSetQosUl(refVal_setPduSetQosUl);
        }
    }
    return ok;
}

void QosData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_QosIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("qosId")), m_QosId));
    }
    if(m_r_5qiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("5qi")), m_r_5qi));
    }
    if(m_MaxbrUlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maxbrUl")), m_MaxbrUl));
    }
    if(m_MaxbrDlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maxbrDl")), m_MaxbrDl));
    }
    if(m_GbrUlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gbrUl")), m_GbrUl));
    }
    if(m_GbrDlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gbrDl")), m_GbrDl));
    }
    if(m_ArpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("arp")), m_Arp));
    }
    if(m_QncIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("qnc")), m_Qnc));
    }
    if(m_PriorityLevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("priorityLevel")), m_PriorityLevel));
    }
    if(m_AverWindowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("averWindow")), m_AverWindow));
    }
    if(m_MaxDataBurstVolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maxDataBurstVol")), m_MaxDataBurstVol));
    }
    if(m_ReflectiveQosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reflectiveQos")), m_ReflectiveQos));
    }
    if(m_SharingKeyDlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sharingKeyDl")), m_SharingKeyDl));
    }
    if(m_SharingKeyUlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sharingKeyUl")), m_SharingKeyUl));
    }
    if(m_MaxPacketLossRateDlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maxPacketLossRateDl")), m_MaxPacketLossRateDl));
    }
    if(m_MaxPacketLossRateUlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maxPacketLossRateUl")), m_MaxPacketLossRateUl));
    }
    if(m_DefQosFlowIndicationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("defQosFlowIndication")), m_DefQosFlowIndication));
    }
    if(m_ExtMaxDataBurstVolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("extMaxDataBurstVol")), m_ExtMaxDataBurstVol));
    }
    if(m_PacketDelayBudgetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("packetDelayBudget")), m_PacketDelayBudget));
    }
    if(m_PacketErrorRateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("packetErrorRate")), m_PacketErrorRate));
    }
    if(m_PduSetQosDlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pduSetQosDl")), m_PduSetQosDl));
    }
    if(m_PduSetQosUlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pduSetQosUl")), m_PduSetQosUl));
    }
}

bool QosData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("qosId"))))
    {
        utility::string_t refVal_setQosId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("qosId"))), refVal_setQosId );
        setQosId(refVal_setQosId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("5qi"))))
    {
        int32_t refVal_setR5qi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("5qi"))), refVal_setR5qi );
        setR5qi(refVal_setR5qi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("maxbrUl"))))
    {
        utility::string_t refVal_setMaxbrUl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maxbrUl"))), refVal_setMaxbrUl );
        setMaxbrUl(refVal_setMaxbrUl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("maxbrDl"))))
    {
        utility::string_t refVal_setMaxbrDl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maxbrDl"))), refVal_setMaxbrDl );
        setMaxbrDl(refVal_setMaxbrDl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gbrUl"))))
    {
        utility::string_t refVal_setGbrUl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gbrUl"))), refVal_setGbrUl );
        setGbrUl(refVal_setGbrUl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gbrDl"))))
    {
        utility::string_t refVal_setGbrDl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gbrDl"))), refVal_setGbrDl );
        setGbrDl(refVal_setGbrDl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("arp"))))
    {
        std::shared_ptr<Arp> refVal_setArp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("arp"))), refVal_setArp );
        setArp(refVal_setArp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("qnc"))))
    {
        bool refVal_setQnc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("qnc"))), refVal_setQnc );
        setQnc(refVal_setQnc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("priorityLevel"))))
    {
        int32_t refVal_setPriorityLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("priorityLevel"))), refVal_setPriorityLevel );
        setPriorityLevel(refVal_setPriorityLevel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("averWindow"))))
    {
        int32_t refVal_setAverWindow;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("averWindow"))), refVal_setAverWindow );
        setAverWindow(refVal_setAverWindow);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("maxDataBurstVol"))))
    {
        int32_t refVal_setMaxDataBurstVol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maxDataBurstVol"))), refVal_setMaxDataBurstVol );
        setMaxDataBurstVol(refVal_setMaxDataBurstVol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reflectiveQos"))))
    {
        bool refVal_setReflectiveQos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reflectiveQos"))), refVal_setReflectiveQos );
        setReflectiveQos(refVal_setReflectiveQos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sharingKeyDl"))))
    {
        utility::string_t refVal_setSharingKeyDl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sharingKeyDl"))), refVal_setSharingKeyDl );
        setSharingKeyDl(refVal_setSharingKeyDl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sharingKeyUl"))))
    {
        utility::string_t refVal_setSharingKeyUl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sharingKeyUl"))), refVal_setSharingKeyUl );
        setSharingKeyUl(refVal_setSharingKeyUl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("maxPacketLossRateDl"))))
    {
        int32_t refVal_setMaxPacketLossRateDl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maxPacketLossRateDl"))), refVal_setMaxPacketLossRateDl );
        setMaxPacketLossRateDl(refVal_setMaxPacketLossRateDl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("maxPacketLossRateUl"))))
    {
        int32_t refVal_setMaxPacketLossRateUl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maxPacketLossRateUl"))), refVal_setMaxPacketLossRateUl );
        setMaxPacketLossRateUl(refVal_setMaxPacketLossRateUl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("defQosFlowIndication"))))
    {
        bool refVal_setDefQosFlowIndication;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("defQosFlowIndication"))), refVal_setDefQosFlowIndication );
        setDefQosFlowIndication(refVal_setDefQosFlowIndication);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("extMaxDataBurstVol"))))
    {
        int32_t refVal_setExtMaxDataBurstVol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("extMaxDataBurstVol"))), refVal_setExtMaxDataBurstVol );
        setExtMaxDataBurstVol(refVal_setExtMaxDataBurstVol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("packetDelayBudget"))))
    {
        int32_t refVal_setPacketDelayBudget;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("packetDelayBudget"))), refVal_setPacketDelayBudget );
        setPacketDelayBudget(refVal_setPacketDelayBudget);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("packetErrorRate"))))
    {
        utility::string_t refVal_setPacketErrorRate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("packetErrorRate"))), refVal_setPacketErrorRate );
        setPacketErrorRate(refVal_setPacketErrorRate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pduSetQosDl"))))
    {
        std::shared_ptr<PduSetQosParaRm> refVal_setPduSetQosDl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pduSetQosDl"))), refVal_setPduSetQosDl );
        setPduSetQosDl(refVal_setPduSetQosDl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pduSetQosUl"))))
    {
        std::shared_ptr<PduSetQosParaRm> refVal_setPduSetQosUl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pduSetQosUl"))), refVal_setPduSetQosUl );
        setPduSetQosUl(refVal_setPduSetQosUl);
    }
    return ok;
}

utility::string_t QosData::getQosId() const
{
    return m_QosId;
}

void QosData::setQosId(const utility::string_t& value)
{
    m_QosId = value;
    m_QosIdIsSet = true;
}

bool QosData::qosIdIsSet() const
{
    return m_QosIdIsSet;
}

void QosData::unsetQosId()
{
    m_QosIdIsSet = false;
}
int32_t QosData::getR5qi() const
{
    return m_r_5qi;
}

void QosData::setR5qi(int32_t value)
{
    m_r_5qi = value;
    m_r_5qiIsSet = true;
}

bool QosData::r5qiIsSet() const
{
    return m_r_5qiIsSet;
}

void QosData::unsetr_5qi()
{
    m_r_5qiIsSet = false;
}
utility::string_t QosData::getMaxbrUl() const
{
    return m_MaxbrUl;
}

void QosData::setMaxbrUl(const utility::string_t& value)
{
    m_MaxbrUl = value;
    m_MaxbrUlIsSet = true;
}

bool QosData::maxbrUlIsSet() const
{
    return m_MaxbrUlIsSet;
}

void QosData::unsetMaxbrUl()
{
    m_MaxbrUlIsSet = false;
}
utility::string_t QosData::getMaxbrDl() const
{
    return m_MaxbrDl;
}

void QosData::setMaxbrDl(const utility::string_t& value)
{
    m_MaxbrDl = value;
    m_MaxbrDlIsSet = true;
}

bool QosData::maxbrDlIsSet() const
{
    return m_MaxbrDlIsSet;
}

void QosData::unsetMaxbrDl()
{
    m_MaxbrDlIsSet = false;
}
utility::string_t QosData::getGbrUl() const
{
    return m_GbrUl;
}

void QosData::setGbrUl(const utility::string_t& value)
{
    m_GbrUl = value;
    m_GbrUlIsSet = true;
}

bool QosData::gbrUlIsSet() const
{
    return m_GbrUlIsSet;
}

void QosData::unsetGbrUl()
{
    m_GbrUlIsSet = false;
}
utility::string_t QosData::getGbrDl() const
{
    return m_GbrDl;
}

void QosData::setGbrDl(const utility::string_t& value)
{
    m_GbrDl = value;
    m_GbrDlIsSet = true;
}

bool QosData::gbrDlIsSet() const
{
    return m_GbrDlIsSet;
}

void QosData::unsetGbrDl()
{
    m_GbrDlIsSet = false;
}
std::shared_ptr<Arp> QosData::getArp() const
{
    return m_Arp;
}

void QosData::setArp(const std::shared_ptr<Arp>& value)
{
    m_Arp = value;
    m_ArpIsSet = true;
}

bool QosData::arpIsSet() const
{
    return m_ArpIsSet;
}

void QosData::unsetArp()
{
    m_ArpIsSet = false;
}
bool QosData::isQnc() const
{
    return m_Qnc;
}

void QosData::setQnc(bool value)
{
    m_Qnc = value;
    m_QncIsSet = true;
}

bool QosData::qncIsSet() const
{
    return m_QncIsSet;
}

void QosData::unsetQnc()
{
    m_QncIsSet = false;
}
int32_t QosData::getPriorityLevel() const
{
    return m_PriorityLevel;
}

void QosData::setPriorityLevel(int32_t value)
{
    m_PriorityLevel = value;
    m_PriorityLevelIsSet = true;
}

bool QosData::priorityLevelIsSet() const
{
    return m_PriorityLevelIsSet;
}

void QosData::unsetPriorityLevel()
{
    m_PriorityLevelIsSet = false;
}
int32_t QosData::getAverWindow() const
{
    return m_AverWindow;
}

void QosData::setAverWindow(int32_t value)
{
    m_AverWindow = value;
    m_AverWindowIsSet = true;
}

bool QosData::averWindowIsSet() const
{
    return m_AverWindowIsSet;
}

void QosData::unsetAverWindow()
{
    m_AverWindowIsSet = false;
}
int32_t QosData::getMaxDataBurstVol() const
{
    return m_MaxDataBurstVol;
}

void QosData::setMaxDataBurstVol(int32_t value)
{
    m_MaxDataBurstVol = value;
    m_MaxDataBurstVolIsSet = true;
}

bool QosData::maxDataBurstVolIsSet() const
{
    return m_MaxDataBurstVolIsSet;
}

void QosData::unsetMaxDataBurstVol()
{
    m_MaxDataBurstVolIsSet = false;
}
bool QosData::isReflectiveQos() const
{
    return m_ReflectiveQos;
}

void QosData::setReflectiveQos(bool value)
{
    m_ReflectiveQos = value;
    m_ReflectiveQosIsSet = true;
}

bool QosData::reflectiveQosIsSet() const
{
    return m_ReflectiveQosIsSet;
}

void QosData::unsetReflectiveQos()
{
    m_ReflectiveQosIsSet = false;
}
utility::string_t QosData::getSharingKeyDl() const
{
    return m_SharingKeyDl;
}

void QosData::setSharingKeyDl(const utility::string_t& value)
{
    m_SharingKeyDl = value;
    m_SharingKeyDlIsSet = true;
}

bool QosData::sharingKeyDlIsSet() const
{
    return m_SharingKeyDlIsSet;
}

void QosData::unsetSharingKeyDl()
{
    m_SharingKeyDlIsSet = false;
}
utility::string_t QosData::getSharingKeyUl() const
{
    return m_SharingKeyUl;
}

void QosData::setSharingKeyUl(const utility::string_t& value)
{
    m_SharingKeyUl = value;
    m_SharingKeyUlIsSet = true;
}

bool QosData::sharingKeyUlIsSet() const
{
    return m_SharingKeyUlIsSet;
}

void QosData::unsetSharingKeyUl()
{
    m_SharingKeyUlIsSet = false;
}
int32_t QosData::getMaxPacketLossRateDl() const
{
    return m_MaxPacketLossRateDl;
}

void QosData::setMaxPacketLossRateDl(int32_t value)
{
    m_MaxPacketLossRateDl = value;
    m_MaxPacketLossRateDlIsSet = true;
}

bool QosData::maxPacketLossRateDlIsSet() const
{
    return m_MaxPacketLossRateDlIsSet;
}

void QosData::unsetMaxPacketLossRateDl()
{
    m_MaxPacketLossRateDlIsSet = false;
}
int32_t QosData::getMaxPacketLossRateUl() const
{
    return m_MaxPacketLossRateUl;
}

void QosData::setMaxPacketLossRateUl(int32_t value)
{
    m_MaxPacketLossRateUl = value;
    m_MaxPacketLossRateUlIsSet = true;
}

bool QosData::maxPacketLossRateUlIsSet() const
{
    return m_MaxPacketLossRateUlIsSet;
}

void QosData::unsetMaxPacketLossRateUl()
{
    m_MaxPacketLossRateUlIsSet = false;
}
bool QosData::isDefQosFlowIndication() const
{
    return m_DefQosFlowIndication;
}

void QosData::setDefQosFlowIndication(bool value)
{
    m_DefQosFlowIndication = value;
    m_DefQosFlowIndicationIsSet = true;
}

bool QosData::defQosFlowIndicationIsSet() const
{
    return m_DefQosFlowIndicationIsSet;
}

void QosData::unsetDefQosFlowIndication()
{
    m_DefQosFlowIndicationIsSet = false;
}
int32_t QosData::getExtMaxDataBurstVol() const
{
    return m_ExtMaxDataBurstVol;
}

void QosData::setExtMaxDataBurstVol(int32_t value)
{
    m_ExtMaxDataBurstVol = value;
    m_ExtMaxDataBurstVolIsSet = true;
}

bool QosData::extMaxDataBurstVolIsSet() const
{
    return m_ExtMaxDataBurstVolIsSet;
}

void QosData::unsetExtMaxDataBurstVol()
{
    m_ExtMaxDataBurstVolIsSet = false;
}
int32_t QosData::getPacketDelayBudget() const
{
    return m_PacketDelayBudget;
}

void QosData::setPacketDelayBudget(int32_t value)
{
    m_PacketDelayBudget = value;
    m_PacketDelayBudgetIsSet = true;
}

bool QosData::packetDelayBudgetIsSet() const
{
    return m_PacketDelayBudgetIsSet;
}

void QosData::unsetPacketDelayBudget()
{
    m_PacketDelayBudgetIsSet = false;
}
utility::string_t QosData::getPacketErrorRate() const
{
    return m_PacketErrorRate;
}

void QosData::setPacketErrorRate(const utility::string_t& value)
{
    m_PacketErrorRate = value;
    m_PacketErrorRateIsSet = true;
}

bool QosData::packetErrorRateIsSet() const
{
    return m_PacketErrorRateIsSet;
}

void QosData::unsetPacketErrorRate()
{
    m_PacketErrorRateIsSet = false;
}
std::shared_ptr<PduSetQosParaRm> QosData::getPduSetQosDl() const
{
    return m_PduSetQosDl;
}

void QosData::setPduSetQosDl(const std::shared_ptr<PduSetQosParaRm>& value)
{
    m_PduSetQosDl = value;
    m_PduSetQosDlIsSet = true;
}

bool QosData::pduSetQosDlIsSet() const
{
    return m_PduSetQosDlIsSet;
}

void QosData::unsetPduSetQosDl()
{
    m_PduSetQosDlIsSet = false;
}
std::shared_ptr<PduSetQosParaRm> QosData::getPduSetQosUl() const
{
    return m_PduSetQosUl;
}

void QosData::setPduSetQosUl(const std::shared_ptr<PduSetQosParaRm>& value)
{
    m_PduSetQosUl = value;
    m_PduSetQosUlIsSet = true;
}

bool QosData::pduSetQosUlIsSet() const
{
    return m_PduSetQosUlIsSet;
}

void QosData::unsetPduSetQosUl()
{
    m_PduSetQosUlIsSet = false;
}
}
}
}
}


