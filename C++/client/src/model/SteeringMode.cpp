/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SteeringMode.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SteeringMode::SteeringMode()
{
    m_SteerModeValueIsSet = false;
    m_ActiveIsSet = false;
    m_StandbyIsSet = false;
    m_r_3gLoad = 0;
    m_r_3gLoadIsSet = false;
    m_PrioAccIsSet = false;
    m_ThresValueIsSet = false;
    m_SteerModeIndIsSet = false;
    m_PrimaryIsSet = false;
}

SteeringMode::~SteeringMode()
{
}

void SteeringMode::validate()
{
    // TODO: implement validation
}

web::json::value SteeringMode::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SteerModeValueIsSet)
    {
        val[utility::conversions::to_string_t(U("steerModeValue"))] = ModelBase::toJson(m_SteerModeValue);
    }
    if(m_ActiveIsSet)
    {
        val[utility::conversions::to_string_t(U("active"))] = ModelBase::toJson(m_Active);
    }
    if(m_StandbyIsSet)
    {
        val[utility::conversions::to_string_t(U("standby"))] = ModelBase::toJson(m_Standby);
    }
    if(m_r_3gLoadIsSet)
    {
        val[utility::conversions::to_string_t(U("3gLoad"))] = ModelBase::toJson(m_r_3gLoad);
    }
    if(m_PrioAccIsSet)
    {
        val[utility::conversions::to_string_t(U("prioAcc"))] = ModelBase::toJson(m_PrioAcc);
    }
    if(m_ThresValueIsSet)
    {
        val[utility::conversions::to_string_t(U("thresValue"))] = ModelBase::toJson(m_ThresValue);
    }
    if(m_SteerModeIndIsSet)
    {
        val[utility::conversions::to_string_t(U("steerModeInd"))] = ModelBase::toJson(m_SteerModeInd);
    }
    if(m_PrimaryIsSet)
    {
        val[utility::conversions::to_string_t(U("primary"))] = ModelBase::toJson(m_Primary);
    }

    return val;
}

bool SteeringMode::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("steerModeValue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("steerModeValue")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SteerModeValue> refVal_setSteerModeValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSteerModeValue);
            setSteerModeValue(refVal_setSteerModeValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("active")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AccessType> refVal_setActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActive);
            setActive(refVal_setActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("standby"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("standby")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AccessTypeRm> refVal_setStandby;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStandby);
            setStandby(refVal_setStandby);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("3gLoad"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("3gLoad")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setR3gLoad;
            ok &= ModelBase::fromJson(fieldValue, refVal_setR3gLoad);
            setR3gLoad(refVal_setR3gLoad);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("prioAcc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("prioAcc")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AccessType> refVal_setPrioAcc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrioAcc);
            setPrioAcc(refVal_setPrioAcc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("thresValue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("thresValue")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ThresholdValue> refVal_setThresValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThresValue);
            setThresValue(refVal_setThresValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("steerModeInd"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("steerModeInd")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SteerModeIndicator> refVal_setSteerModeInd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSteerModeInd);
            setSteerModeInd(refVal_setSteerModeInd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("primary"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("primary")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AccessTypeRm> refVal_setPrimary;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrimary);
            setPrimary(refVal_setPrimary);
        }
    }
    return ok;
}

void SteeringMode::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SteerModeValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("steerModeValue")), m_SteerModeValue));
    }
    if(m_ActiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("active")), m_Active));
    }
    if(m_StandbyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("standby")), m_Standby));
    }
    if(m_r_3gLoadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("3gLoad")), m_r_3gLoad));
    }
    if(m_PrioAccIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("prioAcc")), m_PrioAcc));
    }
    if(m_ThresValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("thresValue")), m_ThresValue));
    }
    if(m_SteerModeIndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("steerModeInd")), m_SteerModeInd));
    }
    if(m_PrimaryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("primary")), m_Primary));
    }
}

bool SteeringMode::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("steerModeValue"))))
    {
        std::shared_ptr<SteerModeValue> refVal_setSteerModeValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("steerModeValue"))), refVal_setSteerModeValue );
        setSteerModeValue(refVal_setSteerModeValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("active"))))
    {
        std::shared_ptr<AccessType> refVal_setActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("active"))), refVal_setActive );
        setActive(refVal_setActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("standby"))))
    {
        std::shared_ptr<AccessTypeRm> refVal_setStandby;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("standby"))), refVal_setStandby );
        setStandby(refVal_setStandby);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("3gLoad"))))
    {
        int32_t refVal_setR3gLoad;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("3gLoad"))), refVal_setR3gLoad );
        setR3gLoad(refVal_setR3gLoad);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("prioAcc"))))
    {
        std::shared_ptr<AccessType> refVal_setPrioAcc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("prioAcc"))), refVal_setPrioAcc );
        setPrioAcc(refVal_setPrioAcc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("thresValue"))))
    {
        std::shared_ptr<ThresholdValue> refVal_setThresValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("thresValue"))), refVal_setThresValue );
        setThresValue(refVal_setThresValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("steerModeInd"))))
    {
        std::shared_ptr<SteerModeIndicator> refVal_setSteerModeInd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("steerModeInd"))), refVal_setSteerModeInd );
        setSteerModeInd(refVal_setSteerModeInd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("primary"))))
    {
        std::shared_ptr<AccessTypeRm> refVal_setPrimary;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("primary"))), refVal_setPrimary );
        setPrimary(refVal_setPrimary);
    }
    return ok;
}

std::shared_ptr<SteerModeValue> SteeringMode::getSteerModeValue() const
{
    return m_SteerModeValue;
}

void SteeringMode::setSteerModeValue(const std::shared_ptr<SteerModeValue>& value)
{
    m_SteerModeValue = value;
    m_SteerModeValueIsSet = true;
}

bool SteeringMode::steerModeValueIsSet() const
{
    return m_SteerModeValueIsSet;
}

void SteeringMode::unsetSteerModeValue()
{
    m_SteerModeValueIsSet = false;
}
std::shared_ptr<AccessType> SteeringMode::getActive() const
{
    return m_Active;
}

void SteeringMode::setActive(const std::shared_ptr<AccessType>& value)
{
    m_Active = value;
    m_ActiveIsSet = true;
}

bool SteeringMode::activeIsSet() const
{
    return m_ActiveIsSet;
}

void SteeringMode::unsetActive()
{
    m_ActiveIsSet = false;
}
std::shared_ptr<AccessTypeRm> SteeringMode::getStandby() const
{
    return m_Standby;
}

void SteeringMode::setStandby(const std::shared_ptr<AccessTypeRm>& value)
{
    m_Standby = value;
    m_StandbyIsSet = true;
}

bool SteeringMode::standbyIsSet() const
{
    return m_StandbyIsSet;
}

void SteeringMode::unsetStandby()
{
    m_StandbyIsSet = false;
}
int32_t SteeringMode::getR3gLoad() const
{
    return m_r_3gLoad;
}

void SteeringMode::setR3gLoad(int32_t value)
{
    m_r_3gLoad = value;
    m_r_3gLoadIsSet = true;
}

bool SteeringMode::r3gLoadIsSet() const
{
    return m_r_3gLoadIsSet;
}

void SteeringMode::unsetr_3gLoad()
{
    m_r_3gLoadIsSet = false;
}
std::shared_ptr<AccessType> SteeringMode::getPrioAcc() const
{
    return m_PrioAcc;
}

void SteeringMode::setPrioAcc(const std::shared_ptr<AccessType>& value)
{
    m_PrioAcc = value;
    m_PrioAccIsSet = true;
}

bool SteeringMode::prioAccIsSet() const
{
    return m_PrioAccIsSet;
}

void SteeringMode::unsetPrioAcc()
{
    m_PrioAccIsSet = false;
}
std::shared_ptr<ThresholdValue> SteeringMode::getThresValue() const
{
    return m_ThresValue;
}

void SteeringMode::setThresValue(const std::shared_ptr<ThresholdValue>& value)
{
    m_ThresValue = value;
    m_ThresValueIsSet = true;
}

bool SteeringMode::thresValueIsSet() const
{
    return m_ThresValueIsSet;
}

void SteeringMode::unsetThresValue()
{
    m_ThresValueIsSet = false;
}
std::shared_ptr<SteerModeIndicator> SteeringMode::getSteerModeInd() const
{
    return m_SteerModeInd;
}

void SteeringMode::setSteerModeInd(const std::shared_ptr<SteerModeIndicator>& value)
{
    m_SteerModeInd = value;
    m_SteerModeIndIsSet = true;
}

bool SteeringMode::steerModeIndIsSet() const
{
    return m_SteerModeIndIsSet;
}

void SteeringMode::unsetSteerModeInd()
{
    m_SteerModeIndIsSet = false;
}
std::shared_ptr<AccessTypeRm> SteeringMode::getPrimary() const
{
    return m_Primary;
}

void SteeringMode::setPrimary(const std::shared_ptr<AccessTypeRm>& value)
{
    m_Primary = value;
    m_PrimaryIsSet = true;
}

bool SteeringMode::primaryIsSet() const
{
    return m_PrimaryIsSet;
}

void SteeringMode::unsetPrimary()
{
    m_PrimaryIsSet = false;
}
}
}
}
}


