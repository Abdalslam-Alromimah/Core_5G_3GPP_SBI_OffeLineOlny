/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/RoamingChargingProfile.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



RoamingChargingProfile::RoamingChargingProfile()
{
    m_TriggersIsSet = false;
    m_PartialRecordMethodIsSet = false;
}

RoamingChargingProfile::~RoamingChargingProfile()
{
}

void RoamingChargingProfile::validate()
{
    // TODO: implement validation
}

web::json::value RoamingChargingProfile::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TriggersIsSet)
    {
        val[utility::conversions::to_string_t(U("triggers"))] = ModelBase::toJson(m_Triggers);
    }
    if(m_PartialRecordMethodIsSet)
    {
        val[utility::conversions::to_string_t(U("partialRecordMethod"))] = ModelBase::toJson(m_PartialRecordMethod);
    }

    return val;
}

bool RoamingChargingProfile::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("triggers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("triggers")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Trigger>> refVal_setTriggers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTriggers);
            setTriggers(refVal_setTriggers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partialRecordMethod"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partialRecordMethod")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PartialRecordMethod> refVal_setPartialRecordMethod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartialRecordMethod);
            setPartialRecordMethod(refVal_setPartialRecordMethod);
        }
    }
    return ok;
}

void RoamingChargingProfile::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TriggersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("triggers")), m_Triggers));
    }
    if(m_PartialRecordMethodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partialRecordMethod")), m_PartialRecordMethod));
    }
}

bool RoamingChargingProfile::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("triggers"))))
    {
        std::vector<std::shared_ptr<Trigger>> refVal_setTriggers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("triggers"))), refVal_setTriggers );
        setTriggers(refVal_setTriggers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partialRecordMethod"))))
    {
        std::shared_ptr<PartialRecordMethod> refVal_setPartialRecordMethod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partialRecordMethod"))), refVal_setPartialRecordMethod );
        setPartialRecordMethod(refVal_setPartialRecordMethod);
    }
    return ok;
}

std::vector<std::shared_ptr<Trigger>>& RoamingChargingProfile::getTriggers()
{
    return m_Triggers;
}

void RoamingChargingProfile::setTriggers(const std::vector<std::shared_ptr<Trigger>>& value)
{
    m_Triggers = value;
    m_TriggersIsSet = true;
}

bool RoamingChargingProfile::triggersIsSet() const
{
    return m_TriggersIsSet;
}

void RoamingChargingProfile::unsetTriggers()
{
    m_TriggersIsSet = false;
}
std::shared_ptr<PartialRecordMethod> RoamingChargingProfile::getPartialRecordMethod() const
{
    return m_PartialRecordMethod;
}

void RoamingChargingProfile::setPartialRecordMethod(const std::shared_ptr<PartialRecordMethod>& value)
{
    m_PartialRecordMethod = value;
    m_PartialRecordMethodIsSet = true;
}

bool RoamingChargingProfile::partialRecordMethodIsSet() const
{
    return m_PartialRecordMethodIsSet;
}

void RoamingChargingProfile::unsetPartialRecordMethod()
{
    m_PartialRecordMethodIsSet = false;
}
}
}
}
}


