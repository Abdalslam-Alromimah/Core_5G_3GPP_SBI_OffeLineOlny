/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/N3gaLocation.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



N3gaLocation::N3gaLocation()
{
    m_N3gppTaiIsSet = false;
    m_N3IwfId = utility::conversions::to_string_t("");
    m_N3IwfIdIsSet = false;
    m_UeIpv4Addr = utility::conversions::to_string_t("");
    m_UeIpv4AddrIsSet = false;
    m_UeIpv6AddrIsSet = false;
    m_PortNumber = 0;
    m_PortNumberIsSet = false;
    m_ProtocolIsSet = false;
    m_TnapIdIsSet = false;
    m_TwapIdIsSet = false;
    m_HfcNodeIdIsSet = false;
    m_GliIsSet = false;
    m_W5gbanLineTypeIsSet = false;
    m_Gci = utility::conversions::to_string_t("");
    m_GciIsSet = false;
}

N3gaLocation::~N3gaLocation()
{
}

void N3gaLocation::validate()
{
    // TODO: implement validation
}

web::json::value N3gaLocation::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_N3gppTaiIsSet)
    {
        val[utility::conversions::to_string_t(U("n3gppTai"))] = ModelBase::toJson(m_N3gppTai);
    }
    if(m_N3IwfIdIsSet)
    {
        val[utility::conversions::to_string_t(U("n3IwfId"))] = ModelBase::toJson(m_N3IwfId);
    }
    if(m_UeIpv4AddrIsSet)
    {
        val[utility::conversions::to_string_t(U("ueIpv4Addr"))] = ModelBase::toJson(m_UeIpv4Addr);
    }
    if(m_UeIpv6AddrIsSet)
    {
        val[utility::conversions::to_string_t(U("ueIpv6Addr"))] = ModelBase::toJson(m_UeIpv6Addr);
    }
    if(m_PortNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("portNumber"))] = ModelBase::toJson(m_PortNumber);
    }
    if(m_ProtocolIsSet)
    {
        val[utility::conversions::to_string_t(U("protocol"))] = ModelBase::toJson(m_Protocol);
    }
    if(m_TnapIdIsSet)
    {
        val[utility::conversions::to_string_t(U("tnapId"))] = ModelBase::toJson(m_TnapId);
    }
    if(m_TwapIdIsSet)
    {
        val[utility::conversions::to_string_t(U("twapId"))] = ModelBase::toJson(m_TwapId);
    }
    if(m_HfcNodeIdIsSet)
    {
        val[utility::conversions::to_string_t(U("hfcNodeId"))] = ModelBase::toJson(m_HfcNodeId);
    }
    if(m_GliIsSet)
    {
        val[utility::conversions::to_string_t(U("gli"))] = ModelBase::toJson(m_Gli);
    }
    if(m_W5gbanLineTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("w5gbanLineType"))] = ModelBase::toJson(m_W5gbanLineType);
    }
    if(m_GciIsSet)
    {
        val[utility::conversions::to_string_t(U("gci"))] = ModelBase::toJson(m_Gci);
    }

    return val;
}

bool N3gaLocation::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("n3gppTai"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("n3gppTai")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Tai> refVal_setN3gppTai;
            ok &= ModelBase::fromJson(fieldValue, refVal_setN3gppTai);
            setN3gppTai(refVal_setN3gppTai);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("n3IwfId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("n3IwfId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setN3IwfId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setN3IwfId);
            setN3IwfId(refVal_setN3IwfId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ueIpv4Addr"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ueIpv4Addr")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUeIpv4Addr;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUeIpv4Addr);
            setUeIpv4Addr(refVal_setUeIpv4Addr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ueIpv6Addr"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ueIpv6Addr")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Ipv6Addr> refVal_setUeIpv6Addr;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUeIpv6Addr);
            setUeIpv6Addr(refVal_setUeIpv6Addr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("portNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("portNumber")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPortNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPortNumber);
            setPortNumber(refVal_setPortNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("protocol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("protocol")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TransportProtocol> refVal_setProtocol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProtocol);
            setProtocol(refVal_setProtocol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tnapId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tnapId")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TnapId> refVal_setTnapId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTnapId);
            setTnapId(refVal_setTnapId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("twapId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("twapId")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TwapId> refVal_setTwapId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTwapId);
            setTwapId(refVal_setTwapId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hfcNodeId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hfcNodeId")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<HfcNodeId> refVal_setHfcNodeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHfcNodeId);
            setHfcNodeId(refVal_setHfcNodeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gli"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gli")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGli;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGli);
            setGli(refVal_setGli);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("w5gbanLineType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("w5gbanLineType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LineType> refVal_setW5gbanLineType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setW5gbanLineType);
            setW5gbanLineType(refVal_setW5gbanLineType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gci"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gci")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGci;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGci);
            setGci(refVal_setGci);
        }
    }
    return ok;
}

void N3gaLocation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_N3gppTaiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("n3gppTai")), m_N3gppTai));
    }
    if(m_N3IwfIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("n3IwfId")), m_N3IwfId));
    }
    if(m_UeIpv4AddrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ueIpv4Addr")), m_UeIpv4Addr));
    }
    if(m_UeIpv6AddrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ueIpv6Addr")), m_UeIpv6Addr));
    }
    if(m_PortNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("portNumber")), m_PortNumber));
    }
    if(m_ProtocolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("protocol")), m_Protocol));
    }
    if(m_TnapIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tnapId")), m_TnapId));
    }
    if(m_TwapIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("twapId")), m_TwapId));
    }
    if(m_HfcNodeIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hfcNodeId")), m_HfcNodeId));
    }
    if(m_GliIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gli")), m_Gli));
    }
    if(m_W5gbanLineTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("w5gbanLineType")), m_W5gbanLineType));
    }
    if(m_GciIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gci")), m_Gci));
    }
}

bool N3gaLocation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("n3gppTai"))))
    {
        std::shared_ptr<Tai> refVal_setN3gppTai;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("n3gppTai"))), refVal_setN3gppTai );
        setN3gppTai(refVal_setN3gppTai);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("n3IwfId"))))
    {
        utility::string_t refVal_setN3IwfId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("n3IwfId"))), refVal_setN3IwfId );
        setN3IwfId(refVal_setN3IwfId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ueIpv4Addr"))))
    {
        utility::string_t refVal_setUeIpv4Addr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ueIpv4Addr"))), refVal_setUeIpv4Addr );
        setUeIpv4Addr(refVal_setUeIpv4Addr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ueIpv6Addr"))))
    {
        std::shared_ptr<Ipv6Addr> refVal_setUeIpv6Addr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ueIpv6Addr"))), refVal_setUeIpv6Addr );
        setUeIpv6Addr(refVal_setUeIpv6Addr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("portNumber"))))
    {
        int32_t refVal_setPortNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("portNumber"))), refVal_setPortNumber );
        setPortNumber(refVal_setPortNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("protocol"))))
    {
        std::shared_ptr<TransportProtocol> refVal_setProtocol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("protocol"))), refVal_setProtocol );
        setProtocol(refVal_setProtocol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tnapId"))))
    {
        std::shared_ptr<TnapId> refVal_setTnapId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tnapId"))), refVal_setTnapId );
        setTnapId(refVal_setTnapId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("twapId"))))
    {
        std::shared_ptr<TwapId> refVal_setTwapId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("twapId"))), refVal_setTwapId );
        setTwapId(refVal_setTwapId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hfcNodeId"))))
    {
        std::shared_ptr<HfcNodeId> refVal_setHfcNodeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hfcNodeId"))), refVal_setHfcNodeId );
        setHfcNodeId(refVal_setHfcNodeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gli"))))
    {
        utility::string_t refVal_setGli;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gli"))), refVal_setGli );
        setGli(refVal_setGli);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("w5gbanLineType"))))
    {
        std::shared_ptr<LineType> refVal_setW5gbanLineType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("w5gbanLineType"))), refVal_setW5gbanLineType );
        setW5gbanLineType(refVal_setW5gbanLineType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gci"))))
    {
        utility::string_t refVal_setGci;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gci"))), refVal_setGci );
        setGci(refVal_setGci);
    }
    return ok;
}

std::shared_ptr<Tai> N3gaLocation::getN3gppTai() const
{
    return m_N3gppTai;
}

void N3gaLocation::setN3gppTai(const std::shared_ptr<Tai>& value)
{
    m_N3gppTai = value;
    m_N3gppTaiIsSet = true;
}

bool N3gaLocation::n3gppTaiIsSet() const
{
    return m_N3gppTaiIsSet;
}

void N3gaLocation::unsetN3gppTai()
{
    m_N3gppTaiIsSet = false;
}
utility::string_t N3gaLocation::getN3IwfId() const
{
    return m_N3IwfId;
}

void N3gaLocation::setN3IwfId(const utility::string_t& value)
{
    m_N3IwfId = value;
    m_N3IwfIdIsSet = true;
}

bool N3gaLocation::n3IwfIdIsSet() const
{
    return m_N3IwfIdIsSet;
}

void N3gaLocation::unsetN3IwfId()
{
    m_N3IwfIdIsSet = false;
}
utility::string_t N3gaLocation::getUeIpv4Addr() const
{
    return m_UeIpv4Addr;
}

void N3gaLocation::setUeIpv4Addr(const utility::string_t& value)
{
    m_UeIpv4Addr = value;
    m_UeIpv4AddrIsSet = true;
}

bool N3gaLocation::ueIpv4AddrIsSet() const
{
    return m_UeIpv4AddrIsSet;
}

void N3gaLocation::unsetUeIpv4Addr()
{
    m_UeIpv4AddrIsSet = false;
}
std::shared_ptr<Ipv6Addr> N3gaLocation::getUeIpv6Addr() const
{
    return m_UeIpv6Addr;
}

void N3gaLocation::setUeIpv6Addr(const std::shared_ptr<Ipv6Addr>& value)
{
    m_UeIpv6Addr = value;
    m_UeIpv6AddrIsSet = true;
}

bool N3gaLocation::ueIpv6AddrIsSet() const
{
    return m_UeIpv6AddrIsSet;
}

void N3gaLocation::unsetUeIpv6Addr()
{
    m_UeIpv6AddrIsSet = false;
}
int32_t N3gaLocation::getPortNumber() const
{
    return m_PortNumber;
}

void N3gaLocation::setPortNumber(int32_t value)
{
    m_PortNumber = value;
    m_PortNumberIsSet = true;
}

bool N3gaLocation::portNumberIsSet() const
{
    return m_PortNumberIsSet;
}

void N3gaLocation::unsetPortNumber()
{
    m_PortNumberIsSet = false;
}
std::shared_ptr<TransportProtocol> N3gaLocation::getProtocol() const
{
    return m_Protocol;
}

void N3gaLocation::setProtocol(const std::shared_ptr<TransportProtocol>& value)
{
    m_Protocol = value;
    m_ProtocolIsSet = true;
}

bool N3gaLocation::protocolIsSet() const
{
    return m_ProtocolIsSet;
}

void N3gaLocation::unsetProtocol()
{
    m_ProtocolIsSet = false;
}
std::shared_ptr<TnapId> N3gaLocation::getTnapId() const
{
    return m_TnapId;
}

void N3gaLocation::setTnapId(const std::shared_ptr<TnapId>& value)
{
    m_TnapId = value;
    m_TnapIdIsSet = true;
}

bool N3gaLocation::tnapIdIsSet() const
{
    return m_TnapIdIsSet;
}

void N3gaLocation::unsetTnapId()
{
    m_TnapIdIsSet = false;
}
std::shared_ptr<TwapId> N3gaLocation::getTwapId() const
{
    return m_TwapId;
}

void N3gaLocation::setTwapId(const std::shared_ptr<TwapId>& value)
{
    m_TwapId = value;
    m_TwapIdIsSet = true;
}

bool N3gaLocation::twapIdIsSet() const
{
    return m_TwapIdIsSet;
}

void N3gaLocation::unsetTwapId()
{
    m_TwapIdIsSet = false;
}
std::shared_ptr<HfcNodeId> N3gaLocation::getHfcNodeId() const
{
    return m_HfcNodeId;
}

void N3gaLocation::setHfcNodeId(const std::shared_ptr<HfcNodeId>& value)
{
    m_HfcNodeId = value;
    m_HfcNodeIdIsSet = true;
}

bool N3gaLocation::hfcNodeIdIsSet() const
{
    return m_HfcNodeIdIsSet;
}

void N3gaLocation::unsetHfcNodeId()
{
    m_HfcNodeIdIsSet = false;
}
utility::string_t N3gaLocation::getGli() const
{
    return m_Gli;
}

void N3gaLocation::setGli(const utility::string_t& value)
{
    m_Gli = value;
    m_GliIsSet = true;
}

bool N3gaLocation::gliIsSet() const
{
    return m_GliIsSet;
}

void N3gaLocation::unsetGli()
{
    m_GliIsSet = false;
}
std::shared_ptr<LineType> N3gaLocation::getW5gbanLineType() const
{
    return m_W5gbanLineType;
}

void N3gaLocation::setW5gbanLineType(const std::shared_ptr<LineType>& value)
{
    m_W5gbanLineType = value;
    m_W5gbanLineTypeIsSet = true;
}

bool N3gaLocation::w5gbanLineTypeIsSet() const
{
    return m_W5gbanLineTypeIsSet;
}

void N3gaLocation::unsetW5gbanLineType()
{
    m_W5gbanLineTypeIsSet = false;
}
utility::string_t N3gaLocation::getGci() const
{
    return m_Gci;
}

void N3gaLocation::setGci(const utility::string_t& value)
{
    m_Gci = value;
    m_GciIsSet = true;
}

bool N3gaLocation::gciIsSet() const
{
    return m_GciIsSet;
}

void N3gaLocation::unsetGci()
{
    m_GciIsSet = false;
}
}
}
}
}


