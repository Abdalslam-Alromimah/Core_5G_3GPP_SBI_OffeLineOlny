/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/RanNasRelCause.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



RanNasRelCause::RanNasRelCause()
{
    m_NgApCauseIsSet = false;
    m_r_5gMmCause = 0;
    m_r_5gMmCauseIsSet = false;
    m_r_5gSmCause = 0;
    m_r_5gSmCauseIsSet = false;
    m_EpsCause = utility::conversions::to_string_t("");
    m_EpsCauseIsSet = false;
}

RanNasRelCause::~RanNasRelCause()
{
}

void RanNasRelCause::validate()
{
    // TODO: implement validation
}

web::json::value RanNasRelCause::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NgApCauseIsSet)
    {
        val[utility::conversions::to_string_t(U("ngApCause"))] = ModelBase::toJson(m_NgApCause);
    }
    if(m_r_5gMmCauseIsSet)
    {
        val[utility::conversions::to_string_t(U("5gMmCause"))] = ModelBase::toJson(m_r_5gMmCause);
    }
    if(m_r_5gSmCauseIsSet)
    {
        val[utility::conversions::to_string_t(U("5gSmCause"))] = ModelBase::toJson(m_r_5gSmCause);
    }
    if(m_EpsCauseIsSet)
    {
        val[utility::conversions::to_string_t(U("epsCause"))] = ModelBase::toJson(m_EpsCause);
    }

    return val;
}

bool RanNasRelCause::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("ngApCause"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ngApCause")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<NgApCause> refVal_setNgApCause;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNgApCause);
            setNgApCause(refVal_setNgApCause);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("5gMmCause"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("5gMmCause")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setR5gMmCause;
            ok &= ModelBase::fromJson(fieldValue, refVal_setR5gMmCause);
            setR5gMmCause(refVal_setR5gMmCause);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("5gSmCause"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("5gSmCause")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setR5gSmCause;
            ok &= ModelBase::fromJson(fieldValue, refVal_setR5gSmCause);
            setR5gSmCause(refVal_setR5gSmCause);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("epsCause"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("epsCause")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEpsCause;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEpsCause);
            setEpsCause(refVal_setEpsCause);
        }
    }
    return ok;
}

void RanNasRelCause::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NgApCauseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ngApCause")), m_NgApCause));
    }
    if(m_r_5gMmCauseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("5gMmCause")), m_r_5gMmCause));
    }
    if(m_r_5gSmCauseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("5gSmCause")), m_r_5gSmCause));
    }
    if(m_EpsCauseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("epsCause")), m_EpsCause));
    }
}

bool RanNasRelCause::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("ngApCause"))))
    {
        std::shared_ptr<NgApCause> refVal_setNgApCause;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ngApCause"))), refVal_setNgApCause );
        setNgApCause(refVal_setNgApCause);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("5gMmCause"))))
    {
        int32_t refVal_setR5gMmCause;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("5gMmCause"))), refVal_setR5gMmCause );
        setR5gMmCause(refVal_setR5gMmCause);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("5gSmCause"))))
    {
        int32_t refVal_setR5gSmCause;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("5gSmCause"))), refVal_setR5gSmCause );
        setR5gSmCause(refVal_setR5gSmCause);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("epsCause"))))
    {
        utility::string_t refVal_setEpsCause;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("epsCause"))), refVal_setEpsCause );
        setEpsCause(refVal_setEpsCause);
    }
    return ok;
}

std::shared_ptr<NgApCause> RanNasRelCause::getNgApCause() const
{
    return m_NgApCause;
}

void RanNasRelCause::setNgApCause(const std::shared_ptr<NgApCause>& value)
{
    m_NgApCause = value;
    m_NgApCauseIsSet = true;
}

bool RanNasRelCause::ngApCauseIsSet() const
{
    return m_NgApCauseIsSet;
}

void RanNasRelCause::unsetNgApCause()
{
    m_NgApCauseIsSet = false;
}
int32_t RanNasRelCause::getR5gMmCause() const
{
    return m_r_5gMmCause;
}

void RanNasRelCause::setR5gMmCause(int32_t value)
{
    m_r_5gMmCause = value;
    m_r_5gMmCauseIsSet = true;
}

bool RanNasRelCause::r5gMmCauseIsSet() const
{
    return m_r_5gMmCauseIsSet;
}

void RanNasRelCause::unsetr_5gMmCause()
{
    m_r_5gMmCauseIsSet = false;
}
int32_t RanNasRelCause::getR5gSmCause() const
{
    return m_r_5gSmCause;
}

void RanNasRelCause::setR5gSmCause(int32_t value)
{
    m_r_5gSmCause = value;
    m_r_5gSmCauseIsSet = true;
}

bool RanNasRelCause::r5gSmCauseIsSet() const
{
    return m_r_5gSmCauseIsSet;
}

void RanNasRelCause::unsetr_5gSmCause()
{
    m_r_5gSmCauseIsSet = false;
}
utility::string_t RanNasRelCause::getEpsCause() const
{
    return m_EpsCause;
}

void RanNasRelCause::setEpsCause(const utility::string_t& value)
{
    m_EpsCause = value;
    m_EpsCauseIsSet = true;
}

bool RanNasRelCause::epsCauseIsSet() const
{
    return m_EpsCauseIsSet;
}

void RanNasRelCause::unsetEpsCause()
{
    m_EpsCauseIsSet = false;
}
}
}
}
}


