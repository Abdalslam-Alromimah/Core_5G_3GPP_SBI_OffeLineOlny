/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Trigger.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Trigger::Trigger()
{
    m_TriggerTypeIsSet = false;
    m_TriggerCategoryIsSet = false;
    m_TimeLimit = 0;
    m_TimeLimitIsSet = false;
    m_VolumeLimit = 0;
    m_VolumeLimitIsSet = false;
    m_VolumeLimit64 = 0;
    m_VolumeLimit64IsSet = false;
    m_EventLimit = 0;
    m_EventLimitIsSet = false;
    m_MaxNumberOfccc = 0;
    m_MaxNumberOfcccIsSet = false;
}

Trigger::~Trigger()
{
}

void Trigger::validate()
{
    // TODO: implement validation
}

web::json::value Trigger::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TriggerTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("triggerType"))] = ModelBase::toJson(m_TriggerType);
    }
    if(m_TriggerCategoryIsSet)
    {
        val[utility::conversions::to_string_t(U("triggerCategory"))] = ModelBase::toJson(m_TriggerCategory);
    }
    if(m_TimeLimitIsSet)
    {
        val[utility::conversions::to_string_t(U("timeLimit"))] = ModelBase::toJson(m_TimeLimit);
    }
    if(m_VolumeLimitIsSet)
    {
        val[utility::conversions::to_string_t(U("volumeLimit"))] = ModelBase::toJson(m_VolumeLimit);
    }
    if(m_VolumeLimit64IsSet)
    {
        val[utility::conversions::to_string_t(U("volumeLimit64"))] = ModelBase::toJson(m_VolumeLimit64);
    }
    if(m_EventLimitIsSet)
    {
        val[utility::conversions::to_string_t(U("eventLimit"))] = ModelBase::toJson(m_EventLimit);
    }
    if(m_MaxNumberOfcccIsSet)
    {
        val[utility::conversions::to_string_t(U("maxNumberOfccc"))] = ModelBase::toJson(m_MaxNumberOfccc);
    }

    return val;
}

bool Trigger::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("triggerType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("triggerType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TriggerType> refVal_setTriggerType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTriggerType);
            setTriggerType(refVal_setTriggerType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("triggerCategory"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("triggerCategory")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TriggerCategory> refVal_setTriggerCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTriggerCategory);
            setTriggerCategory(refVal_setTriggerCategory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timeLimit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timeLimit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTimeLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeLimit);
            setTimeLimit(refVal_setTimeLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("volumeLimit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("volumeLimit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setVolumeLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolumeLimit);
            setVolumeLimit(refVal_setVolumeLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("volumeLimit64"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("volumeLimit64")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setVolumeLimit64;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVolumeLimit64);
            setVolumeLimit64(refVal_setVolumeLimit64);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("eventLimit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("eventLimit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setEventLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventLimit);
            setEventLimit(refVal_setEventLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("maxNumberOfccc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maxNumberOfccc")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxNumberOfccc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxNumberOfccc);
            setMaxNumberOfccc(refVal_setMaxNumberOfccc);
        }
    }
    return ok;
}

void Trigger::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TriggerTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("triggerType")), m_TriggerType));
    }
    if(m_TriggerCategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("triggerCategory")), m_TriggerCategory));
    }
    if(m_TimeLimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timeLimit")), m_TimeLimit));
    }
    if(m_VolumeLimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("volumeLimit")), m_VolumeLimit));
    }
    if(m_VolumeLimit64IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("volumeLimit64")), m_VolumeLimit64));
    }
    if(m_EventLimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("eventLimit")), m_EventLimit));
    }
    if(m_MaxNumberOfcccIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maxNumberOfccc")), m_MaxNumberOfccc));
    }
}

bool Trigger::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("triggerType"))))
    {
        std::shared_ptr<TriggerType> refVal_setTriggerType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("triggerType"))), refVal_setTriggerType );
        setTriggerType(refVal_setTriggerType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("triggerCategory"))))
    {
        std::shared_ptr<TriggerCategory> refVal_setTriggerCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("triggerCategory"))), refVal_setTriggerCategory );
        setTriggerCategory(refVal_setTriggerCategory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timeLimit"))))
    {
        int32_t refVal_setTimeLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timeLimit"))), refVal_setTimeLimit );
        setTimeLimit(refVal_setTimeLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("volumeLimit"))))
    {
        int32_t refVal_setVolumeLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("volumeLimit"))), refVal_setVolumeLimit );
        setVolumeLimit(refVal_setVolumeLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("volumeLimit64"))))
    {
        int32_t refVal_setVolumeLimit64;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("volumeLimit64"))), refVal_setVolumeLimit64 );
        setVolumeLimit64(refVal_setVolumeLimit64);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("eventLimit"))))
    {
        int32_t refVal_setEventLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("eventLimit"))), refVal_setEventLimit );
        setEventLimit(refVal_setEventLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("maxNumberOfccc"))))
    {
        int32_t refVal_setMaxNumberOfccc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maxNumberOfccc"))), refVal_setMaxNumberOfccc );
        setMaxNumberOfccc(refVal_setMaxNumberOfccc);
    }
    return ok;
}

std::shared_ptr<TriggerType> Trigger::getTriggerType() const
{
    return m_TriggerType;
}

void Trigger::setTriggerType(const std::shared_ptr<TriggerType>& value)
{
    m_TriggerType = value;
    m_TriggerTypeIsSet = true;
}

bool Trigger::triggerTypeIsSet() const
{
    return m_TriggerTypeIsSet;
}

void Trigger::unsetTriggerType()
{
    m_TriggerTypeIsSet = false;
}
std::shared_ptr<TriggerCategory> Trigger::getTriggerCategory() const
{
    return m_TriggerCategory;
}

void Trigger::setTriggerCategory(const std::shared_ptr<TriggerCategory>& value)
{
    m_TriggerCategory = value;
    m_TriggerCategoryIsSet = true;
}

bool Trigger::triggerCategoryIsSet() const
{
    return m_TriggerCategoryIsSet;
}

void Trigger::unsetTriggerCategory()
{
    m_TriggerCategoryIsSet = false;
}
int32_t Trigger::getTimeLimit() const
{
    return m_TimeLimit;
}

void Trigger::setTimeLimit(int32_t value)
{
    m_TimeLimit = value;
    m_TimeLimitIsSet = true;
}

bool Trigger::timeLimitIsSet() const
{
    return m_TimeLimitIsSet;
}

void Trigger::unsetTimeLimit()
{
    m_TimeLimitIsSet = false;
}
int32_t Trigger::getVolumeLimit() const
{
    return m_VolumeLimit;
}

void Trigger::setVolumeLimit(int32_t value)
{
    m_VolumeLimit = value;
    m_VolumeLimitIsSet = true;
}

bool Trigger::volumeLimitIsSet() const
{
    return m_VolumeLimitIsSet;
}

void Trigger::unsetVolumeLimit()
{
    m_VolumeLimitIsSet = false;
}
int32_t Trigger::getVolumeLimit64() const
{
    return m_VolumeLimit64;
}

void Trigger::setVolumeLimit64(int32_t value)
{
    m_VolumeLimit64 = value;
    m_VolumeLimit64IsSet = true;
}

bool Trigger::volumeLimit64IsSet() const
{
    return m_VolumeLimit64IsSet;
}

void Trigger::unsetVolumeLimit64()
{
    m_VolumeLimit64IsSet = false;
}
int32_t Trigger::getEventLimit() const
{
    return m_EventLimit;
}

void Trigger::setEventLimit(int32_t value)
{
    m_EventLimit = value;
    m_EventLimitIsSet = true;
}

bool Trigger::eventLimitIsSet() const
{
    return m_EventLimitIsSet;
}

void Trigger::unsetEventLimit()
{
    m_EventLimitIsSet = false;
}
int32_t Trigger::getMaxNumberOfccc() const
{
    return m_MaxNumberOfccc;
}

void Trigger::setMaxNumberOfccc(int32_t value)
{
    m_MaxNumberOfccc = value;
    m_MaxNumberOfcccIsSet = true;
}

bool Trigger::maxNumberOfcccIsSet() const
{
    return m_MaxNumberOfcccIsSet;
}

void Trigger::unsetMaxNumberOfccc()
{
    m_MaxNumberOfcccIsSet = false;
}
}
}
}
}


