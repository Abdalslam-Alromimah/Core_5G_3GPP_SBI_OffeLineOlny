/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ChargingDataResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ChargingDataResponse::ChargingDataResponse()
{
    m_InvocationTimeStamp = utility::datetime();
    m_InvocationTimeStampIsSet = false;
    m_InvocationSequenceNumber = 0;
    m_InvocationSequenceNumberIsSet = false;
    m_InvocationResultIsSet = false;
    m_SessionFailoverIsSet = false;
    m_TriggersIsSet = false;
    m_PDUSessionChargingInformationIsSet = false;
    m_RoamingQBCInformationIsSet = false;
}

ChargingDataResponse::~ChargingDataResponse()
{
}

void ChargingDataResponse::validate()
{
    // TODO: implement validation
}

web::json::value ChargingDataResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_InvocationTimeStampIsSet)
    {
        val[utility::conversions::to_string_t(U("invocationTimeStamp"))] = ModelBase::toJson(m_InvocationTimeStamp);
    }
    if(m_InvocationSequenceNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("invocationSequenceNumber"))] = ModelBase::toJson(m_InvocationSequenceNumber);
    }
    if(m_InvocationResultIsSet)
    {
        val[utility::conversions::to_string_t(U("invocationResult"))] = ModelBase::toJson(m_InvocationResult);
    }
    if(m_SessionFailoverIsSet)
    {
        val[utility::conversions::to_string_t(U("sessionFailover"))] = ModelBase::toJson(m_SessionFailover);
    }
    if(m_TriggersIsSet)
    {
        val[utility::conversions::to_string_t(U("triggers"))] = ModelBase::toJson(m_Triggers);
    }
    if(m_PDUSessionChargingInformationIsSet)
    {
        val[utility::conversions::to_string_t(U("pDUSessionChargingInformation"))] = ModelBase::toJson(m_PDUSessionChargingInformation);
    }
    if(m_RoamingQBCInformationIsSet)
    {
        val[utility::conversions::to_string_t(U("roamingQBCInformation"))] = ModelBase::toJson(m_RoamingQBCInformation);
    }

    return val;
}

bool ChargingDataResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("invocationTimeStamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("invocationTimeStamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setInvocationTimeStamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInvocationTimeStamp);
            setInvocationTimeStamp(refVal_setInvocationTimeStamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("invocationSequenceNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("invocationSequenceNumber")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setInvocationSequenceNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInvocationSequenceNumber);
            setInvocationSequenceNumber(refVal_setInvocationSequenceNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("invocationResult"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("invocationResult")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<InvocationResult> refVal_setInvocationResult;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInvocationResult);
            setInvocationResult(refVal_setInvocationResult);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sessionFailover"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sessionFailover")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SessionFailover> refVal_setSessionFailover;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSessionFailover);
            setSessionFailover(refVal_setSessionFailover);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("triggers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("triggers")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Trigger>> refVal_setTriggers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTriggers);
            setTriggers(refVal_setTriggers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pDUSessionChargingInformation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pDUSessionChargingInformation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PDUSessionChargingInformation> refVal_setPDUSessionChargingInformation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPDUSessionChargingInformation);
            setPDUSessionChargingInformation(refVal_setPDUSessionChargingInformation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("roamingQBCInformation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("roamingQBCInformation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RoamingQBCInformation> refVal_setRoamingQBCInformation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRoamingQBCInformation);
            setRoamingQBCInformation(refVal_setRoamingQBCInformation);
        }
    }
    return ok;
}

void ChargingDataResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_InvocationTimeStampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("invocationTimeStamp")), m_InvocationTimeStamp));
    }
    if(m_InvocationSequenceNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("invocationSequenceNumber")), m_InvocationSequenceNumber));
    }
    if(m_InvocationResultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("invocationResult")), m_InvocationResult));
    }
    if(m_SessionFailoverIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sessionFailover")), m_SessionFailover));
    }
    if(m_TriggersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("triggers")), m_Triggers));
    }
    if(m_PDUSessionChargingInformationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pDUSessionChargingInformation")), m_PDUSessionChargingInformation));
    }
    if(m_RoamingQBCInformationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("roamingQBCInformation")), m_RoamingQBCInformation));
    }
}

bool ChargingDataResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("invocationTimeStamp"))))
    {
        utility::datetime refVal_setInvocationTimeStamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("invocationTimeStamp"))), refVal_setInvocationTimeStamp );
        setInvocationTimeStamp(refVal_setInvocationTimeStamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("invocationSequenceNumber"))))
    {
        int32_t refVal_setInvocationSequenceNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("invocationSequenceNumber"))), refVal_setInvocationSequenceNumber );
        setInvocationSequenceNumber(refVal_setInvocationSequenceNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("invocationResult"))))
    {
        std::shared_ptr<InvocationResult> refVal_setInvocationResult;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("invocationResult"))), refVal_setInvocationResult );
        setInvocationResult(refVal_setInvocationResult);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sessionFailover"))))
    {
        std::shared_ptr<SessionFailover> refVal_setSessionFailover;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sessionFailover"))), refVal_setSessionFailover );
        setSessionFailover(refVal_setSessionFailover);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("triggers"))))
    {
        std::vector<std::shared_ptr<Trigger>> refVal_setTriggers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("triggers"))), refVal_setTriggers );
        setTriggers(refVal_setTriggers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pDUSessionChargingInformation"))))
    {
        std::shared_ptr<PDUSessionChargingInformation> refVal_setPDUSessionChargingInformation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pDUSessionChargingInformation"))), refVal_setPDUSessionChargingInformation );
        setPDUSessionChargingInformation(refVal_setPDUSessionChargingInformation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("roamingQBCInformation"))))
    {
        std::shared_ptr<RoamingQBCInformation> refVal_setRoamingQBCInformation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("roamingQBCInformation"))), refVal_setRoamingQBCInformation );
        setRoamingQBCInformation(refVal_setRoamingQBCInformation);
    }
    return ok;
}

utility::datetime ChargingDataResponse::getInvocationTimeStamp() const
{
    return m_InvocationTimeStamp;
}

void ChargingDataResponse::setInvocationTimeStamp(const utility::datetime& value)
{
    m_InvocationTimeStamp = value;
    m_InvocationTimeStampIsSet = true;
}

bool ChargingDataResponse::invocationTimeStampIsSet() const
{
    return m_InvocationTimeStampIsSet;
}

void ChargingDataResponse::unsetInvocationTimeStamp()
{
    m_InvocationTimeStampIsSet = false;
}
int32_t ChargingDataResponse::getInvocationSequenceNumber() const
{
    return m_InvocationSequenceNumber;
}

void ChargingDataResponse::setInvocationSequenceNumber(int32_t value)
{
    m_InvocationSequenceNumber = value;
    m_InvocationSequenceNumberIsSet = true;
}

bool ChargingDataResponse::invocationSequenceNumberIsSet() const
{
    return m_InvocationSequenceNumberIsSet;
}

void ChargingDataResponse::unsetInvocationSequenceNumber()
{
    m_InvocationSequenceNumberIsSet = false;
}
std::shared_ptr<InvocationResult> ChargingDataResponse::getInvocationResult() const
{
    return m_InvocationResult;
}

void ChargingDataResponse::setInvocationResult(const std::shared_ptr<InvocationResult>& value)
{
    m_InvocationResult = value;
    m_InvocationResultIsSet = true;
}

bool ChargingDataResponse::invocationResultIsSet() const
{
    return m_InvocationResultIsSet;
}

void ChargingDataResponse::unsetInvocationResult()
{
    m_InvocationResultIsSet = false;
}
std::shared_ptr<SessionFailover> ChargingDataResponse::getSessionFailover() const
{
    return m_SessionFailover;
}

void ChargingDataResponse::setSessionFailover(const std::shared_ptr<SessionFailover>& value)
{
    m_SessionFailover = value;
    m_SessionFailoverIsSet = true;
}

bool ChargingDataResponse::sessionFailoverIsSet() const
{
    return m_SessionFailoverIsSet;
}

void ChargingDataResponse::unsetSessionFailover()
{
    m_SessionFailoverIsSet = false;
}
std::vector<std::shared_ptr<Trigger>>& ChargingDataResponse::getTriggers()
{
    return m_Triggers;
}

void ChargingDataResponse::setTriggers(const std::vector<std::shared_ptr<Trigger>>& value)
{
    m_Triggers = value;
    m_TriggersIsSet = true;
}

bool ChargingDataResponse::triggersIsSet() const
{
    return m_TriggersIsSet;
}

void ChargingDataResponse::unsetTriggers()
{
    m_TriggersIsSet = false;
}
std::shared_ptr<PDUSessionChargingInformation> ChargingDataResponse::getPDUSessionChargingInformation() const
{
    return m_PDUSessionChargingInformation;
}

void ChargingDataResponse::setPDUSessionChargingInformation(const std::shared_ptr<PDUSessionChargingInformation>& value)
{
    m_PDUSessionChargingInformation = value;
    m_PDUSessionChargingInformationIsSet = true;
}

bool ChargingDataResponse::pDUSessionChargingInformationIsSet() const
{
    return m_PDUSessionChargingInformationIsSet;
}

void ChargingDataResponse::unsetPDUSessionChargingInformation()
{
    m_PDUSessionChargingInformationIsSet = false;
}
std::shared_ptr<RoamingQBCInformation> ChargingDataResponse::getRoamingQBCInformation() const
{
    return m_RoamingQBCInformation;
}

void ChargingDataResponse::setRoamingQBCInformation(const std::shared_ptr<RoamingQBCInformation>& value)
{
    m_RoamingQBCInformation = value;
    m_RoamingQBCInformationIsSet = true;
}

bool ChargingDataResponse::roamingQBCInformationIsSet() const
{
    return m_RoamingQBCInformationIsSet;
}

void ChargingDataResponse::unsetRoamingQBCInformation()
{
    m_RoamingQBCInformationIsSet = false;
}
}
}
}
}


