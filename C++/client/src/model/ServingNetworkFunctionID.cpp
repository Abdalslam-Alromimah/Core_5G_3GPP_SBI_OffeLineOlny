/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ServingNetworkFunctionID.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ServingNetworkFunctionID::ServingNetworkFunctionID()
{
    m_ServingNetworkFunctionInformationIsSet = false;
    m_AMFId = utility::conversions::to_string_t("");
    m_AMFIdIsSet = false;
}

ServingNetworkFunctionID::~ServingNetworkFunctionID()
{
}

void ServingNetworkFunctionID::validate()
{
    // TODO: implement validation
}

web::json::value ServingNetworkFunctionID::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ServingNetworkFunctionInformationIsSet)
    {
        val[utility::conversions::to_string_t(U("servingNetworkFunctionInformation"))] = ModelBase::toJson(m_ServingNetworkFunctionInformation);
    }
    if(m_AMFIdIsSet)
    {
        val[utility::conversions::to_string_t(U("aMFId"))] = ModelBase::toJson(m_AMFId);
    }

    return val;
}

bool ServingNetworkFunctionID::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("servingNetworkFunctionInformation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("servingNetworkFunctionInformation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<NFIdentification> refVal_setServingNetworkFunctionInformation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServingNetworkFunctionInformation);
            setServingNetworkFunctionInformation(refVal_setServingNetworkFunctionInformation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("aMFId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("aMFId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAMFId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAMFId);
            setAMFId(refVal_setAMFId);
        }
    }
    return ok;
}

void ServingNetworkFunctionID::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ServingNetworkFunctionInformationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("servingNetworkFunctionInformation")), m_ServingNetworkFunctionInformation));
    }
    if(m_AMFIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("aMFId")), m_AMFId));
    }
}

bool ServingNetworkFunctionID::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("servingNetworkFunctionInformation"))))
    {
        std::shared_ptr<NFIdentification> refVal_setServingNetworkFunctionInformation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("servingNetworkFunctionInformation"))), refVal_setServingNetworkFunctionInformation );
        setServingNetworkFunctionInformation(refVal_setServingNetworkFunctionInformation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("aMFId"))))
    {
        utility::string_t refVal_setAMFId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("aMFId"))), refVal_setAMFId );
        setAMFId(refVal_setAMFId);
    }
    return ok;
}

std::shared_ptr<NFIdentification> ServingNetworkFunctionID::getServingNetworkFunctionInformation() const
{
    return m_ServingNetworkFunctionInformation;
}

void ServingNetworkFunctionID::setServingNetworkFunctionInformation(const std::shared_ptr<NFIdentification>& value)
{
    m_ServingNetworkFunctionInformation = value;
    m_ServingNetworkFunctionInformationIsSet = true;
}

bool ServingNetworkFunctionID::servingNetworkFunctionInformationIsSet() const
{
    return m_ServingNetworkFunctionInformationIsSet;
}

void ServingNetworkFunctionID::unsetServingNetworkFunctionInformation()
{
    m_ServingNetworkFunctionInformationIsSet = false;
}
utility::string_t ServingNetworkFunctionID::getAMFId() const
{
    return m_AMFId;
}

void ServingNetworkFunctionID::setAMFId(const utility::string_t& value)
{
    m_AMFId = value;
    m_AMFIdIsSet = true;
}

bool ServingNetworkFunctionID::aMFIdIsSet() const
{
    return m_AMFIdIsSet;
}

void ServingNetworkFunctionID::unsetAMFId()
{
    m_AMFIdIsSet = false;
}
}
}
}
}


