/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Ambr.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Ambr::Ambr()
{
    m_Uplink = utility::conversions::to_string_t("");
    m_UplinkIsSet = false;
    m_Downlink = utility::conversions::to_string_t("");
    m_DownlinkIsSet = false;
}

Ambr::~Ambr()
{
}

void Ambr::validate()
{
    // TODO: implement validation
}

web::json::value Ambr::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UplinkIsSet)
    {
        val[utility::conversions::to_string_t(U("uplink"))] = ModelBase::toJson(m_Uplink);
    }
    if(m_DownlinkIsSet)
    {
        val[utility::conversions::to_string_t(U("downlink"))] = ModelBase::toJson(m_Downlink);
    }

    return val;
}

bool Ambr::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("uplink"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uplink")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUplink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUplink);
            setUplink(refVal_setUplink);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("downlink"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("downlink")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDownlink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDownlink);
            setDownlink(refVal_setDownlink);
        }
    }
    return ok;
}

void Ambr::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_UplinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uplink")), m_Uplink));
    }
    if(m_DownlinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("downlink")), m_Downlink));
    }
}

bool Ambr::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("uplink"))))
    {
        utility::string_t refVal_setUplink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uplink"))), refVal_setUplink );
        setUplink(refVal_setUplink);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("downlink"))))
    {
        utility::string_t refVal_setDownlink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("downlink"))), refVal_setDownlink );
        setDownlink(refVal_setDownlink);
    }
    return ok;
}

utility::string_t Ambr::getUplink() const
{
    return m_Uplink;
}

void Ambr::setUplink(const utility::string_t& value)
{
    m_Uplink = value;
    m_UplinkIsSet = true;
}

bool Ambr::uplinkIsSet() const
{
    return m_UplinkIsSet;
}

void Ambr::unsetUplink()
{
    m_UplinkIsSet = false;
}
utility::string_t Ambr::getDownlink() const
{
    return m_Downlink;
}

void Ambr::setDownlink(const utility::string_t& value)
{
    m_Downlink = value;
    m_DownlinkIsSet = true;
}

bool Ambr::downlinkIsSet() const
{
    return m_DownlinkIsSet;
}

void Ambr::unsetDownlink()
{
    m_DownlinkIsSet = false;
}
}
}
}
}


