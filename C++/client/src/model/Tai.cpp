/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Tai.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Tai::Tai()
{
    m_PlmnIdIsSet = false;
    m_Tac = utility::conversions::to_string_t("");
    m_TacIsSet = false;
    m_Nid = utility::conversions::to_string_t("");
    m_NidIsSet = false;
}

Tai::~Tai()
{
}

void Tai::validate()
{
    // TODO: implement validation
}

web::json::value Tai::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PlmnIdIsSet)
    {
        val[utility::conversions::to_string_t(U("plmnId"))] = ModelBase::toJson(m_PlmnId);
    }
    if(m_TacIsSet)
    {
        val[utility::conversions::to_string_t(U("tac"))] = ModelBase::toJson(m_Tac);
    }
    if(m_NidIsSet)
    {
        val[utility::conversions::to_string_t(U("nid"))] = ModelBase::toJson(m_Nid);
    }

    return val;
}

bool Tai::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("plmnId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("plmnId")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlmnId> refVal_setPlmnId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlmnId);
            setPlmnId(refVal_setPlmnId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tac"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tac")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTac;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTac);
            setTac(refVal_setTac);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNid);
            setNid(refVal_setNid);
        }
    }
    return ok;
}

void Tai::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PlmnIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("plmnId")), m_PlmnId));
    }
    if(m_TacIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tac")), m_Tac));
    }
    if(m_NidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nid")), m_Nid));
    }
}

bool Tai::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("plmnId"))))
    {
        std::shared_ptr<PlmnId> refVal_setPlmnId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("plmnId"))), refVal_setPlmnId );
        setPlmnId(refVal_setPlmnId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tac"))))
    {
        utility::string_t refVal_setTac;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tac"))), refVal_setTac );
        setTac(refVal_setTac);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nid"))))
    {
        utility::string_t refVal_setNid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nid"))), refVal_setNid );
        setNid(refVal_setNid);
    }
    return ok;
}

std::shared_ptr<PlmnId> Tai::getPlmnId() const
{
    return m_PlmnId;
}

void Tai::setPlmnId(const std::shared_ptr<PlmnId>& value)
{
    m_PlmnId = value;
    m_PlmnIdIsSet = true;
}

bool Tai::plmnIdIsSet() const
{
    return m_PlmnIdIsSet;
}

void Tai::unsetPlmnId()
{
    m_PlmnIdIsSet = false;
}
utility::string_t Tai::getTac() const
{
    return m_Tac;
}

void Tai::setTac(const utility::string_t& value)
{
    m_Tac = value;
    m_TacIsSet = true;
}

bool Tai::tacIsSet() const
{
    return m_TacIsSet;
}

void Tai::unsetTac()
{
    m_TacIsSet = false;
}
utility::string_t Tai::getNid() const
{
    return m_Nid;
}

void Tai::setNid(const utility::string_t& value)
{
    m_Nid = value;
    m_NidIsSet = true;
}

bool Tai::nidIsSet() const
{
    return m_NidIsSet;
}

void Tai::unsetNid()
{
    m_NidIsSet = false;
}
}
}
}
}


