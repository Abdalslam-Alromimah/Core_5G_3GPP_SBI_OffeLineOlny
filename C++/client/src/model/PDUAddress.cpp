/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PDUAddress.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PDUAddress::PDUAddress()
{
    m_PduIPv4Address = utility::conversions::to_string_t("");
    m_PduIPv4AddressIsSet = false;
    m_PduIPv6AddresswithPrefixIsSet = false;
    m_PduAddressprefixlength = 0;
    m_PduAddressprefixlengthIsSet = false;
    m_IPv4dynamicAddressFlag = false;
    m_IPv4dynamicAddressFlagIsSet = false;
    m_IPv6dynamicPrefixFlag = false;
    m_IPv6dynamicPrefixFlagIsSet = false;
}

PDUAddress::~PDUAddress()
{
}

void PDUAddress::validate()
{
    // TODO: implement validation
}

web::json::value PDUAddress::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PduIPv4AddressIsSet)
    {
        val[utility::conversions::to_string_t(U("pduIPv4Address"))] = ModelBase::toJson(m_PduIPv4Address);
    }
    if(m_PduIPv6AddresswithPrefixIsSet)
    {
        val[utility::conversions::to_string_t(U("pduIPv6AddresswithPrefix"))] = ModelBase::toJson(m_PduIPv6AddresswithPrefix);
    }
    if(m_PduAddressprefixlengthIsSet)
    {
        val[utility::conversions::to_string_t(U("pduAddressprefixlength"))] = ModelBase::toJson(m_PduAddressprefixlength);
    }
    if(m_IPv4dynamicAddressFlagIsSet)
    {
        val[utility::conversions::to_string_t(U("iPv4dynamicAddressFlag"))] = ModelBase::toJson(m_IPv4dynamicAddressFlag);
    }
    if(m_IPv6dynamicPrefixFlagIsSet)
    {
        val[utility::conversions::to_string_t(U("iPv6dynamicPrefixFlag"))] = ModelBase::toJson(m_IPv6dynamicPrefixFlag);
    }

    return val;
}

bool PDUAddress::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("pduIPv4Address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pduIPv4Address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPduIPv4Address;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPduIPv4Address);
            setPduIPv4Address(refVal_setPduIPv4Address);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pduIPv6AddresswithPrefix"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pduIPv6AddresswithPrefix")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Ipv6Addr> refVal_setPduIPv6AddresswithPrefix;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPduIPv6AddresswithPrefix);
            setPduIPv6AddresswithPrefix(refVal_setPduIPv6AddresswithPrefix);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pduAddressprefixlength"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pduAddressprefixlength")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPduAddressprefixlength;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPduAddressprefixlength);
            setPduAddressprefixlength(refVal_setPduAddressprefixlength);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("iPv4dynamicAddressFlag"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("iPv4dynamicAddressFlag")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIPv4dynamicAddressFlag;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIPv4dynamicAddressFlag);
            setIPv4dynamicAddressFlag(refVal_setIPv4dynamicAddressFlag);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("iPv6dynamicPrefixFlag"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("iPv6dynamicPrefixFlag")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIPv6dynamicPrefixFlag;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIPv6dynamicPrefixFlag);
            setIPv6dynamicPrefixFlag(refVal_setIPv6dynamicPrefixFlag);
        }
    }
    return ok;
}

void PDUAddress::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PduIPv4AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pduIPv4Address")), m_PduIPv4Address));
    }
    if(m_PduIPv6AddresswithPrefixIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pduIPv6AddresswithPrefix")), m_PduIPv6AddresswithPrefix));
    }
    if(m_PduAddressprefixlengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pduAddressprefixlength")), m_PduAddressprefixlength));
    }
    if(m_IPv4dynamicAddressFlagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("iPv4dynamicAddressFlag")), m_IPv4dynamicAddressFlag));
    }
    if(m_IPv6dynamicPrefixFlagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("iPv6dynamicPrefixFlag")), m_IPv6dynamicPrefixFlag));
    }
}

bool PDUAddress::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("pduIPv4Address"))))
    {
        utility::string_t refVal_setPduIPv4Address;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pduIPv4Address"))), refVal_setPduIPv4Address );
        setPduIPv4Address(refVal_setPduIPv4Address);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pduIPv6AddresswithPrefix"))))
    {
        std::shared_ptr<Ipv6Addr> refVal_setPduIPv6AddresswithPrefix;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pduIPv6AddresswithPrefix"))), refVal_setPduIPv6AddresswithPrefix );
        setPduIPv6AddresswithPrefix(refVal_setPduIPv6AddresswithPrefix);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pduAddressprefixlength"))))
    {
        int32_t refVal_setPduAddressprefixlength;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pduAddressprefixlength"))), refVal_setPduAddressprefixlength );
        setPduAddressprefixlength(refVal_setPduAddressprefixlength);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("iPv4dynamicAddressFlag"))))
    {
        bool refVal_setIPv4dynamicAddressFlag;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("iPv4dynamicAddressFlag"))), refVal_setIPv4dynamicAddressFlag );
        setIPv4dynamicAddressFlag(refVal_setIPv4dynamicAddressFlag);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("iPv6dynamicPrefixFlag"))))
    {
        bool refVal_setIPv6dynamicPrefixFlag;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("iPv6dynamicPrefixFlag"))), refVal_setIPv6dynamicPrefixFlag );
        setIPv6dynamicPrefixFlag(refVal_setIPv6dynamicPrefixFlag);
    }
    return ok;
}

utility::string_t PDUAddress::getPduIPv4Address() const
{
    return m_PduIPv4Address;
}

void PDUAddress::setPduIPv4Address(const utility::string_t& value)
{
    m_PduIPv4Address = value;
    m_PduIPv4AddressIsSet = true;
}

bool PDUAddress::pduIPv4AddressIsSet() const
{
    return m_PduIPv4AddressIsSet;
}

void PDUAddress::unsetPduIPv4Address()
{
    m_PduIPv4AddressIsSet = false;
}
std::shared_ptr<Ipv6Addr> PDUAddress::getPduIPv6AddresswithPrefix() const
{
    return m_PduIPv6AddresswithPrefix;
}

void PDUAddress::setPduIPv6AddresswithPrefix(const std::shared_ptr<Ipv6Addr>& value)
{
    m_PduIPv6AddresswithPrefix = value;
    m_PduIPv6AddresswithPrefixIsSet = true;
}

bool PDUAddress::pduIPv6AddresswithPrefixIsSet() const
{
    return m_PduIPv6AddresswithPrefixIsSet;
}

void PDUAddress::unsetPduIPv6AddresswithPrefix()
{
    m_PduIPv6AddresswithPrefixIsSet = false;
}
int32_t PDUAddress::getPduAddressprefixlength() const
{
    return m_PduAddressprefixlength;
}

void PDUAddress::setPduAddressprefixlength(int32_t value)
{
    m_PduAddressprefixlength = value;
    m_PduAddressprefixlengthIsSet = true;
}

bool PDUAddress::pduAddressprefixlengthIsSet() const
{
    return m_PduAddressprefixlengthIsSet;
}

void PDUAddress::unsetPduAddressprefixlength()
{
    m_PduAddressprefixlengthIsSet = false;
}
bool PDUAddress::isIPv4dynamicAddressFlag() const
{
    return m_IPv4dynamicAddressFlag;
}

void PDUAddress::setIPv4dynamicAddressFlag(bool value)
{
    m_IPv4dynamicAddressFlag = value;
    m_IPv4dynamicAddressFlagIsSet = true;
}

bool PDUAddress::iPv4dynamicAddressFlagIsSet() const
{
    return m_IPv4dynamicAddressFlagIsSet;
}

void PDUAddress::unsetIPv4dynamicAddressFlag()
{
    m_IPv4dynamicAddressFlagIsSet = false;
}
bool PDUAddress::isIPv6dynamicPrefixFlag() const
{
    return m_IPv6dynamicPrefixFlag;
}

void PDUAddress::setIPv6dynamicPrefixFlag(bool value)
{
    m_IPv6dynamicPrefixFlag = value;
    m_IPv6dynamicPrefixFlagIsSet = true;
}

bool PDUAddress::iPv6dynamicPrefixFlagIsSet() const
{
    return m_IPv6dynamicPrefixFlagIsSet;
}

void PDUAddress::unsetIPv6dynamicPrefixFlag()
{
    m_IPv6dynamicPrefixFlagIsSet = false;
}
}
}
}
}


