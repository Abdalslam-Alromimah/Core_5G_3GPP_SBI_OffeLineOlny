/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Arp.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Arp::Arp()
{
    m_PriorityLevel = 0;
    m_PriorityLevelIsSet = false;
    m_PreemptCapIsSet = false;
    m_PreemptVulnIsSet = false;
}

Arp::~Arp()
{
}

void Arp::validate()
{
    // TODO: implement validation
}

web::json::value Arp::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PriorityLevelIsSet)
    {
        val[utility::conversions::to_string_t(U("priorityLevel"))] = ModelBase::toJson(m_PriorityLevel);
    }
    if(m_PreemptCapIsSet)
    {
        val[utility::conversions::to_string_t(U("preemptCap"))] = ModelBase::toJson(m_PreemptCap);
    }
    if(m_PreemptVulnIsSet)
    {
        val[utility::conversions::to_string_t(U("preemptVuln"))] = ModelBase::toJson(m_PreemptVuln);
    }

    return val;
}

bool Arp::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("priorityLevel"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("priorityLevel")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPriorityLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriorityLevel);
            setPriorityLevel(refVal_setPriorityLevel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("preemptCap"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("preemptCap")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PreemptionCapability> refVal_setPreemptCap;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPreemptCap);
            setPreemptCap(refVal_setPreemptCap);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("preemptVuln"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("preemptVuln")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PreemptionVulnerability> refVal_setPreemptVuln;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPreemptVuln);
            setPreemptVuln(refVal_setPreemptVuln);
        }
    }
    return ok;
}

void Arp::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PriorityLevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("priorityLevel")), m_PriorityLevel));
    }
    if(m_PreemptCapIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("preemptCap")), m_PreemptCap));
    }
    if(m_PreemptVulnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("preemptVuln")), m_PreemptVuln));
    }
}

bool Arp::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("priorityLevel"))))
    {
        int32_t refVal_setPriorityLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("priorityLevel"))), refVal_setPriorityLevel );
        setPriorityLevel(refVal_setPriorityLevel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("preemptCap"))))
    {
        std::shared_ptr<PreemptionCapability> refVal_setPreemptCap;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("preemptCap"))), refVal_setPreemptCap );
        setPreemptCap(refVal_setPreemptCap);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("preemptVuln"))))
    {
        std::shared_ptr<PreemptionVulnerability> refVal_setPreemptVuln;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("preemptVuln"))), refVal_setPreemptVuln );
        setPreemptVuln(refVal_setPreemptVuln);
    }
    return ok;
}

int32_t Arp::getPriorityLevel() const
{
    return m_PriorityLevel;
}

void Arp::setPriorityLevel(int32_t value)
{
    m_PriorityLevel = value;
    m_PriorityLevelIsSet = true;
}

bool Arp::priorityLevelIsSet() const
{
    return m_PriorityLevelIsSet;
}

void Arp::unsetPriorityLevel()
{
    m_PriorityLevelIsSet = false;
}
std::shared_ptr<PreemptionCapability> Arp::getPreemptCap() const
{
    return m_PreemptCap;
}

void Arp::setPreemptCap(const std::shared_ptr<PreemptionCapability>& value)
{
    m_PreemptCap = value;
    m_PreemptCapIsSet = true;
}

bool Arp::preemptCapIsSet() const
{
    return m_PreemptCapIsSet;
}

void Arp::unsetPreemptCap()
{
    m_PreemptCapIsSet = false;
}
std::shared_ptr<PreemptionVulnerability> Arp::getPreemptVuln() const
{
    return m_PreemptVuln;
}

void Arp::setPreemptVuln(const std::shared_ptr<PreemptionVulnerability>& value)
{
    m_PreemptVuln = value;
    m_PreemptVulnIsSet = true;
}

bool Arp::preemptVulnIsSet() const
{
    return m_PreemptVulnIsSet;
}

void Arp::unsetPreemptVuln()
{
    m_PreemptVulnIsSet = false;
}
}
}
}
}


