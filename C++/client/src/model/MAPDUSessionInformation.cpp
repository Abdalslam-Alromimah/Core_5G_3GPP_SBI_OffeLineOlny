/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/MAPDUSessionInformation.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



MAPDUSessionInformation::MAPDUSessionInformation()
{
    m_MAPDUSessionIndicatorIsSet = false;
    m_ATSSSCapabilityIsSet = false;
}

MAPDUSessionInformation::~MAPDUSessionInformation()
{
}

void MAPDUSessionInformation::validate()
{
    // TODO: implement validation
}

web::json::value MAPDUSessionInformation::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MAPDUSessionIndicatorIsSet)
    {
        val[utility::conversions::to_string_t(U("mAPDUSessionIndicator"))] = ModelBase::toJson(m_MAPDUSessionIndicator);
    }
    if(m_ATSSSCapabilityIsSet)
    {
        val[utility::conversions::to_string_t(U("aTSSSCapability"))] = ModelBase::toJson(m_ATSSSCapability);
    }

    return val;
}

bool MAPDUSessionInformation::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("mAPDUSessionIndicator"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mAPDUSessionIndicator")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MaPduIndication> refVal_setMAPDUSessionIndicator;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMAPDUSessionIndicator);
            setMAPDUSessionIndicator(refVal_setMAPDUSessionIndicator);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("aTSSSCapability"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("aTSSSCapability")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AtsssCapability> refVal_setATSSSCapability;
            ok &= ModelBase::fromJson(fieldValue, refVal_setATSSSCapability);
            setATSSSCapability(refVal_setATSSSCapability);
        }
    }
    return ok;
}

void MAPDUSessionInformation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MAPDUSessionIndicatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mAPDUSessionIndicator")), m_MAPDUSessionIndicator));
    }
    if(m_ATSSSCapabilityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("aTSSSCapability")), m_ATSSSCapability));
    }
}

bool MAPDUSessionInformation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("mAPDUSessionIndicator"))))
    {
        std::shared_ptr<MaPduIndication> refVal_setMAPDUSessionIndicator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mAPDUSessionIndicator"))), refVal_setMAPDUSessionIndicator );
        setMAPDUSessionIndicator(refVal_setMAPDUSessionIndicator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("aTSSSCapability"))))
    {
        std::shared_ptr<AtsssCapability> refVal_setATSSSCapability;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("aTSSSCapability"))), refVal_setATSSSCapability );
        setATSSSCapability(refVal_setATSSSCapability);
    }
    return ok;
}

std::shared_ptr<MaPduIndication> MAPDUSessionInformation::getMAPDUSessionIndicator() const
{
    return m_MAPDUSessionIndicator;
}

void MAPDUSessionInformation::setMAPDUSessionIndicator(const std::shared_ptr<MaPduIndication>& value)
{
    m_MAPDUSessionIndicator = value;
    m_MAPDUSessionIndicatorIsSet = true;
}

bool MAPDUSessionInformation::mAPDUSessionIndicatorIsSet() const
{
    return m_MAPDUSessionIndicatorIsSet;
}

void MAPDUSessionInformation::unsetMAPDUSessionIndicator()
{
    m_MAPDUSessionIndicatorIsSet = false;
}
std::shared_ptr<AtsssCapability> MAPDUSessionInformation::getATSSSCapability() const
{
    return m_ATSSSCapability;
}

void MAPDUSessionInformation::setATSSSCapability(const std::shared_ptr<AtsssCapability>& value)
{
    m_ATSSSCapability = value;
    m_ATSSSCapabilityIsSet = true;
}

bool MAPDUSessionInformation::aTSSSCapabilityIsSet() const
{
    return m_ATSSSCapabilityIsSet;
}

void MAPDUSessionInformation::unsetATSSSCapability()
{
    m_ATSSSCapabilityIsSet = false;
}
}
}
}
}


