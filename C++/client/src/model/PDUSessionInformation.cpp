/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PDUSessionInformation.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PDUSessionInformation::PDUSessionInformation()
{
    m_NetworkSlicingInfoIsSet = false;
    m_PduSessionID = 0;
    m_PduSessionIDIsSet = false;
    m_PduTypeIsSet = false;
    m_SscModeIsSet = false;
    m_HPlmnIdIsSet = false;
    m_ServingNetworkFunctionIDIsSet = false;
    m_RatTypeIsSet = false;
    m_MAPDUNon3GPPRATTypeIsSet = false;
    m_DnnId = utility::conversions::to_string_t("");
    m_DnnIdIsSet = false;
    m_ChargingCharacteristics = utility::conversions::to_string_t("");
    m_ChargingCharacteristicsIsSet = false;
    m_ChargingCharacteristicsSelectionModeIsSet = false;
    m_StartTime = utility::datetime();
    m_StartTimeIsSet = false;
    m_StopTime = utility::datetime();
    m_StopTimeIsSet = false;
    m_r_3gppPSDataOffStatusIsSet = false;
    m_SessionStopIndicator = false;
    m_SessionStopIndicatorIsSet = false;
    m_PduAddressIsSet = false;
    m_Diagnostics = 0;
    m_DiagnosticsIsSet = false;
    m_AuthorizedQoSInformationIsSet = false;
    m_SubscribedQoSInformationIsSet = false;
    m_AuthorizedSessionAMBRIsSet = false;
    m_SubscribedSessionAMBRIsSet = false;
    m_ServingCNPlmnIdIsSet = false;
    m_MAPDUSessionInformationIsSet = false;
    m_EnhancedDiagnosticsIsSet = false;
}

PDUSessionInformation::~PDUSessionInformation()
{
}

void PDUSessionInformation::validate()
{
    // TODO: implement validation
}

web::json::value PDUSessionInformation::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NetworkSlicingInfoIsSet)
    {
        val[utility::conversions::to_string_t(U("networkSlicingInfo"))] = ModelBase::toJson(m_NetworkSlicingInfo);
    }
    if(m_PduSessionIDIsSet)
    {
        val[utility::conversions::to_string_t(U("pduSessionID"))] = ModelBase::toJson(m_PduSessionID);
    }
    if(m_PduTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("pduType"))] = ModelBase::toJson(m_PduType);
    }
    if(m_SscModeIsSet)
    {
        val[utility::conversions::to_string_t(U("sscMode"))] = ModelBase::toJson(m_SscMode);
    }
    if(m_HPlmnIdIsSet)
    {
        val[utility::conversions::to_string_t(U("hPlmnId"))] = ModelBase::toJson(m_HPlmnId);
    }
    if(m_ServingNetworkFunctionIDIsSet)
    {
        val[utility::conversions::to_string_t(U("servingNetworkFunctionID"))] = ModelBase::toJson(m_ServingNetworkFunctionID);
    }
    if(m_RatTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("ratType"))] = ModelBase::toJson(m_RatType);
    }
    if(m_MAPDUNon3GPPRATTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("mAPDUNon3GPPRATType"))] = ModelBase::toJson(m_MAPDUNon3GPPRATType);
    }
    if(m_DnnIdIsSet)
    {
        val[utility::conversions::to_string_t(U("dnnId"))] = ModelBase::toJson(m_DnnId);
    }
    if(m_ChargingCharacteristicsIsSet)
    {
        val[utility::conversions::to_string_t(U("chargingCharacteristics"))] = ModelBase::toJson(m_ChargingCharacteristics);
    }
    if(m_ChargingCharacteristicsSelectionModeIsSet)
    {
        val[utility::conversions::to_string_t(U("chargingCharacteristicsSelectionMode"))] = ModelBase::toJson(m_ChargingCharacteristicsSelectionMode);
    }
    if(m_StartTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("startTime"))] = ModelBase::toJson(m_StartTime);
    }
    if(m_StopTimeIsSet)
    {
        val[utility::conversions::to_string_t(U("stopTime"))] = ModelBase::toJson(m_StopTime);
    }
    if(m_r_3gppPSDataOffStatusIsSet)
    {
        val[utility::conversions::to_string_t(U("3gppPSDataOffStatus"))] = ModelBase::toJson(m_r_3gppPSDataOffStatus);
    }
    if(m_SessionStopIndicatorIsSet)
    {
        val[utility::conversions::to_string_t(U("sessionStopIndicator"))] = ModelBase::toJson(m_SessionStopIndicator);
    }
    if(m_PduAddressIsSet)
    {
        val[utility::conversions::to_string_t(U("pduAddress"))] = ModelBase::toJson(m_PduAddress);
    }
    if(m_DiagnosticsIsSet)
    {
        val[utility::conversions::to_string_t(U("diagnostics"))] = ModelBase::toJson(m_Diagnostics);
    }
    if(m_AuthorizedQoSInformationIsSet)
    {
        val[utility::conversions::to_string_t(U("authorizedQoSInformation"))] = ModelBase::toJson(m_AuthorizedQoSInformation);
    }
    if(m_SubscribedQoSInformationIsSet)
    {
        val[utility::conversions::to_string_t(U("subscribedQoSInformation"))] = ModelBase::toJson(m_SubscribedQoSInformation);
    }
    if(m_AuthorizedSessionAMBRIsSet)
    {
        val[utility::conversions::to_string_t(U("authorizedSessionAMBR"))] = ModelBase::toJson(m_AuthorizedSessionAMBR);
    }
    if(m_SubscribedSessionAMBRIsSet)
    {
        val[utility::conversions::to_string_t(U("subscribedSessionAMBR"))] = ModelBase::toJson(m_SubscribedSessionAMBR);
    }
    if(m_ServingCNPlmnIdIsSet)
    {
        val[utility::conversions::to_string_t(U("servingCNPlmnId"))] = ModelBase::toJson(m_ServingCNPlmnId);
    }
    if(m_MAPDUSessionInformationIsSet)
    {
        val[utility::conversions::to_string_t(U("mAPDUSessionInformation"))] = ModelBase::toJson(m_MAPDUSessionInformation);
    }
    if(m_EnhancedDiagnosticsIsSet)
    {
        val[utility::conversions::to_string_t(U("enhancedDiagnostics"))] = ModelBase::toJson(m_EnhancedDiagnostics);
    }

    return val;
}

bool PDUSessionInformation::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("networkSlicingInfo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("networkSlicingInfo")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<NetworkSlicingInfo> refVal_setNetworkSlicingInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNetworkSlicingInfo);
            setNetworkSlicingInfo(refVal_setNetworkSlicingInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pduSessionID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pduSessionID")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPduSessionID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPduSessionID);
            setPduSessionID(refVal_setPduSessionID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pduType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pduType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PduSessionType> refVal_setPduType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPduType);
            setPduType(refVal_setPduType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sscMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sscMode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SscMode> refVal_setSscMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSscMode);
            setSscMode(refVal_setSscMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hPlmnId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hPlmnId")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlmnId> refVal_setHPlmnId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHPlmnId);
            setHPlmnId(refVal_setHPlmnId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("servingNetworkFunctionID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("servingNetworkFunctionID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ServingNetworkFunctionID> refVal_setServingNetworkFunctionID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServingNetworkFunctionID);
            setServingNetworkFunctionID(refVal_setServingNetworkFunctionID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ratType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ratType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RatType> refVal_setRatType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRatType);
            setRatType(refVal_setRatType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mAPDUNon3GPPRATType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mAPDUNon3GPPRATType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RatType> refVal_setMAPDUNon3GPPRATType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMAPDUNon3GPPRATType);
            setMAPDUNon3GPPRATType(refVal_setMAPDUNon3GPPRATType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dnnId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dnnId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDnnId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDnnId);
            setDnnId(refVal_setDnnId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chargingCharacteristics"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chargingCharacteristics")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setChargingCharacteristics;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChargingCharacteristics);
            setChargingCharacteristics(refVal_setChargingCharacteristics);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chargingCharacteristicsSelectionMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chargingCharacteristicsSelectionMode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ChargingCharacteristicsSelectionMode> refVal_setChargingCharacteristicsSelectionMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChargingCharacteristicsSelectionMode);
            setChargingCharacteristicsSelectionMode(refVal_setChargingCharacteristicsSelectionMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("startTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("startTime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setStartTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartTime);
            setStartTime(refVal_setStartTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stopTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stopTime")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setStopTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStopTime);
            setStopTime(refVal_setStopTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("3gppPSDataOffStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("3gppPSDataOffStatus")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<r_3GPPPSDataOffStatus> refVal_setR3gppPSDataOffStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setR3gppPSDataOffStatus);
            setR3gppPSDataOffStatus(refVal_setR3gppPSDataOffStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sessionStopIndicator"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sessionStopIndicator")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSessionStopIndicator;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSessionStopIndicator);
            setSessionStopIndicator(refVal_setSessionStopIndicator);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pduAddress"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pduAddress")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PDUAddress> refVal_setPduAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPduAddress);
            setPduAddress(refVal_setPduAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("diagnostics"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("diagnostics")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDiagnostics;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDiagnostics);
            setDiagnostics(refVal_setDiagnostics);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("authorizedQoSInformation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("authorizedQoSInformation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AuthorizedDefaultQos> refVal_setAuthorizedQoSInformation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAuthorizedQoSInformation);
            setAuthorizedQoSInformation(refVal_setAuthorizedQoSInformation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subscribedQoSInformation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subscribedQoSInformation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SubscribedDefaultQos> refVal_setSubscribedQoSInformation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubscribedQoSInformation);
            setSubscribedQoSInformation(refVal_setSubscribedQoSInformation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("authorizedSessionAMBR"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("authorizedSessionAMBR")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Ambr> refVal_setAuthorizedSessionAMBR;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAuthorizedSessionAMBR);
            setAuthorizedSessionAMBR(refVal_setAuthorizedSessionAMBR);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subscribedSessionAMBR"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subscribedSessionAMBR")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Ambr> refVal_setSubscribedSessionAMBR;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubscribedSessionAMBR);
            setSubscribedSessionAMBR(refVal_setSubscribedSessionAMBR);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("servingCNPlmnId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("servingCNPlmnId")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlmnId> refVal_setServingCNPlmnId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServingCNPlmnId);
            setServingCNPlmnId(refVal_setServingCNPlmnId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mAPDUSessionInformation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mAPDUSessionInformation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MAPDUSessionInformation> refVal_setMAPDUSessionInformation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMAPDUSessionInformation);
            setMAPDUSessionInformation(refVal_setMAPDUSessionInformation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("enhancedDiagnostics"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("enhancedDiagnostics")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<RanNasRelCause>> refVal_setEnhancedDiagnostics;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnhancedDiagnostics);
            setEnhancedDiagnostics(refVal_setEnhancedDiagnostics);
        }
    }
    return ok;
}

void PDUSessionInformation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NetworkSlicingInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("networkSlicingInfo")), m_NetworkSlicingInfo));
    }
    if(m_PduSessionIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pduSessionID")), m_PduSessionID));
    }
    if(m_PduTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pduType")), m_PduType));
    }
    if(m_SscModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sscMode")), m_SscMode));
    }
    if(m_HPlmnIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hPlmnId")), m_HPlmnId));
    }
    if(m_ServingNetworkFunctionIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("servingNetworkFunctionID")), m_ServingNetworkFunctionID));
    }
    if(m_RatTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ratType")), m_RatType));
    }
    if(m_MAPDUNon3GPPRATTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mAPDUNon3GPPRATType")), m_MAPDUNon3GPPRATType));
    }
    if(m_DnnIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dnnId")), m_DnnId));
    }
    if(m_ChargingCharacteristicsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chargingCharacteristics")), m_ChargingCharacteristics));
    }
    if(m_ChargingCharacteristicsSelectionModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chargingCharacteristicsSelectionMode")), m_ChargingCharacteristicsSelectionMode));
    }
    if(m_StartTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("startTime")), m_StartTime));
    }
    if(m_StopTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stopTime")), m_StopTime));
    }
    if(m_r_3gppPSDataOffStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("3gppPSDataOffStatus")), m_r_3gppPSDataOffStatus));
    }
    if(m_SessionStopIndicatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sessionStopIndicator")), m_SessionStopIndicator));
    }
    if(m_PduAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pduAddress")), m_PduAddress));
    }
    if(m_DiagnosticsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("diagnostics")), m_Diagnostics));
    }
    if(m_AuthorizedQoSInformationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("authorizedQoSInformation")), m_AuthorizedQoSInformation));
    }
    if(m_SubscribedQoSInformationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subscribedQoSInformation")), m_SubscribedQoSInformation));
    }
    if(m_AuthorizedSessionAMBRIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("authorizedSessionAMBR")), m_AuthorizedSessionAMBR));
    }
    if(m_SubscribedSessionAMBRIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subscribedSessionAMBR")), m_SubscribedSessionAMBR));
    }
    if(m_ServingCNPlmnIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("servingCNPlmnId")), m_ServingCNPlmnId));
    }
    if(m_MAPDUSessionInformationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mAPDUSessionInformation")), m_MAPDUSessionInformation));
    }
    if(m_EnhancedDiagnosticsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("enhancedDiagnostics")), m_EnhancedDiagnostics));
    }
}

bool PDUSessionInformation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("networkSlicingInfo"))))
    {
        std::shared_ptr<NetworkSlicingInfo> refVal_setNetworkSlicingInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("networkSlicingInfo"))), refVal_setNetworkSlicingInfo );
        setNetworkSlicingInfo(refVal_setNetworkSlicingInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pduSessionID"))))
    {
        int32_t refVal_setPduSessionID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pduSessionID"))), refVal_setPduSessionID );
        setPduSessionID(refVal_setPduSessionID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pduType"))))
    {
        std::shared_ptr<PduSessionType> refVal_setPduType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pduType"))), refVal_setPduType );
        setPduType(refVal_setPduType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sscMode"))))
    {
        std::shared_ptr<SscMode> refVal_setSscMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sscMode"))), refVal_setSscMode );
        setSscMode(refVal_setSscMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hPlmnId"))))
    {
        std::shared_ptr<PlmnId> refVal_setHPlmnId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hPlmnId"))), refVal_setHPlmnId );
        setHPlmnId(refVal_setHPlmnId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("servingNetworkFunctionID"))))
    {
        std::shared_ptr<ServingNetworkFunctionID> refVal_setServingNetworkFunctionID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("servingNetworkFunctionID"))), refVal_setServingNetworkFunctionID );
        setServingNetworkFunctionID(refVal_setServingNetworkFunctionID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ratType"))))
    {
        std::shared_ptr<RatType> refVal_setRatType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ratType"))), refVal_setRatType );
        setRatType(refVal_setRatType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mAPDUNon3GPPRATType"))))
    {
        std::shared_ptr<RatType> refVal_setMAPDUNon3GPPRATType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mAPDUNon3GPPRATType"))), refVal_setMAPDUNon3GPPRATType );
        setMAPDUNon3GPPRATType(refVal_setMAPDUNon3GPPRATType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dnnId"))))
    {
        utility::string_t refVal_setDnnId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dnnId"))), refVal_setDnnId );
        setDnnId(refVal_setDnnId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chargingCharacteristics"))))
    {
        utility::string_t refVal_setChargingCharacteristics;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chargingCharacteristics"))), refVal_setChargingCharacteristics );
        setChargingCharacteristics(refVal_setChargingCharacteristics);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chargingCharacteristicsSelectionMode"))))
    {
        std::shared_ptr<ChargingCharacteristicsSelectionMode> refVal_setChargingCharacteristicsSelectionMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chargingCharacteristicsSelectionMode"))), refVal_setChargingCharacteristicsSelectionMode );
        setChargingCharacteristicsSelectionMode(refVal_setChargingCharacteristicsSelectionMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("startTime"))))
    {
        utility::datetime refVal_setStartTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("startTime"))), refVal_setStartTime );
        setStartTime(refVal_setStartTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stopTime"))))
    {
        utility::datetime refVal_setStopTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stopTime"))), refVal_setStopTime );
        setStopTime(refVal_setStopTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("3gppPSDataOffStatus"))))
    {
        std::shared_ptr<r_3GPPPSDataOffStatus> refVal_setR3gppPSDataOffStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("3gppPSDataOffStatus"))), refVal_setR3gppPSDataOffStatus );
        setR3gppPSDataOffStatus(refVal_setR3gppPSDataOffStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sessionStopIndicator"))))
    {
        bool refVal_setSessionStopIndicator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sessionStopIndicator"))), refVal_setSessionStopIndicator );
        setSessionStopIndicator(refVal_setSessionStopIndicator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pduAddress"))))
    {
        std::shared_ptr<PDUAddress> refVal_setPduAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pduAddress"))), refVal_setPduAddress );
        setPduAddress(refVal_setPduAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("diagnostics"))))
    {
        int32_t refVal_setDiagnostics;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("diagnostics"))), refVal_setDiagnostics );
        setDiagnostics(refVal_setDiagnostics);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("authorizedQoSInformation"))))
    {
        std::shared_ptr<AuthorizedDefaultQos> refVal_setAuthorizedQoSInformation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("authorizedQoSInformation"))), refVal_setAuthorizedQoSInformation );
        setAuthorizedQoSInformation(refVal_setAuthorizedQoSInformation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subscribedQoSInformation"))))
    {
        std::shared_ptr<SubscribedDefaultQos> refVal_setSubscribedQoSInformation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subscribedQoSInformation"))), refVal_setSubscribedQoSInformation );
        setSubscribedQoSInformation(refVal_setSubscribedQoSInformation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("authorizedSessionAMBR"))))
    {
        std::shared_ptr<Ambr> refVal_setAuthorizedSessionAMBR;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("authorizedSessionAMBR"))), refVal_setAuthorizedSessionAMBR );
        setAuthorizedSessionAMBR(refVal_setAuthorizedSessionAMBR);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subscribedSessionAMBR"))))
    {
        std::shared_ptr<Ambr> refVal_setSubscribedSessionAMBR;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subscribedSessionAMBR"))), refVal_setSubscribedSessionAMBR );
        setSubscribedSessionAMBR(refVal_setSubscribedSessionAMBR);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("servingCNPlmnId"))))
    {
        std::shared_ptr<PlmnId> refVal_setServingCNPlmnId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("servingCNPlmnId"))), refVal_setServingCNPlmnId );
        setServingCNPlmnId(refVal_setServingCNPlmnId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mAPDUSessionInformation"))))
    {
        std::shared_ptr<MAPDUSessionInformation> refVal_setMAPDUSessionInformation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mAPDUSessionInformation"))), refVal_setMAPDUSessionInformation );
        setMAPDUSessionInformation(refVal_setMAPDUSessionInformation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("enhancedDiagnostics"))))
    {
        std::vector<std::shared_ptr<RanNasRelCause>> refVal_setEnhancedDiagnostics;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("enhancedDiagnostics"))), refVal_setEnhancedDiagnostics );
        setEnhancedDiagnostics(refVal_setEnhancedDiagnostics);
    }
    return ok;
}

std::shared_ptr<NetworkSlicingInfo> PDUSessionInformation::getNetworkSlicingInfo() const
{
    return m_NetworkSlicingInfo;
}

void PDUSessionInformation::setNetworkSlicingInfo(const std::shared_ptr<NetworkSlicingInfo>& value)
{
    m_NetworkSlicingInfo = value;
    m_NetworkSlicingInfoIsSet = true;
}

bool PDUSessionInformation::networkSlicingInfoIsSet() const
{
    return m_NetworkSlicingInfoIsSet;
}

void PDUSessionInformation::unsetNetworkSlicingInfo()
{
    m_NetworkSlicingInfoIsSet = false;
}
int32_t PDUSessionInformation::getPduSessionID() const
{
    return m_PduSessionID;
}

void PDUSessionInformation::setPduSessionID(int32_t value)
{
    m_PduSessionID = value;
    m_PduSessionIDIsSet = true;
}

bool PDUSessionInformation::pduSessionIDIsSet() const
{
    return m_PduSessionIDIsSet;
}

void PDUSessionInformation::unsetPduSessionID()
{
    m_PduSessionIDIsSet = false;
}
std::shared_ptr<PduSessionType> PDUSessionInformation::getPduType() const
{
    return m_PduType;
}

void PDUSessionInformation::setPduType(const std::shared_ptr<PduSessionType>& value)
{
    m_PduType = value;
    m_PduTypeIsSet = true;
}

bool PDUSessionInformation::pduTypeIsSet() const
{
    return m_PduTypeIsSet;
}

void PDUSessionInformation::unsetPduType()
{
    m_PduTypeIsSet = false;
}
std::shared_ptr<SscMode> PDUSessionInformation::getSscMode() const
{
    return m_SscMode;
}

void PDUSessionInformation::setSscMode(const std::shared_ptr<SscMode>& value)
{
    m_SscMode = value;
    m_SscModeIsSet = true;
}

bool PDUSessionInformation::sscModeIsSet() const
{
    return m_SscModeIsSet;
}

void PDUSessionInformation::unsetSscMode()
{
    m_SscModeIsSet = false;
}
std::shared_ptr<PlmnId> PDUSessionInformation::getHPlmnId() const
{
    return m_HPlmnId;
}

void PDUSessionInformation::setHPlmnId(const std::shared_ptr<PlmnId>& value)
{
    m_HPlmnId = value;
    m_HPlmnIdIsSet = true;
}

bool PDUSessionInformation::hPlmnIdIsSet() const
{
    return m_HPlmnIdIsSet;
}

void PDUSessionInformation::unsetHPlmnId()
{
    m_HPlmnIdIsSet = false;
}
std::shared_ptr<ServingNetworkFunctionID> PDUSessionInformation::getServingNetworkFunctionID() const
{
    return m_ServingNetworkFunctionID;
}

void PDUSessionInformation::setServingNetworkFunctionID(const std::shared_ptr<ServingNetworkFunctionID>& value)
{
    m_ServingNetworkFunctionID = value;
    m_ServingNetworkFunctionIDIsSet = true;
}

bool PDUSessionInformation::servingNetworkFunctionIDIsSet() const
{
    return m_ServingNetworkFunctionIDIsSet;
}

void PDUSessionInformation::unsetServingNetworkFunctionID()
{
    m_ServingNetworkFunctionIDIsSet = false;
}
std::shared_ptr<RatType> PDUSessionInformation::getRatType() const
{
    return m_RatType;
}

void PDUSessionInformation::setRatType(const std::shared_ptr<RatType>& value)
{
    m_RatType = value;
    m_RatTypeIsSet = true;
}

bool PDUSessionInformation::ratTypeIsSet() const
{
    return m_RatTypeIsSet;
}

void PDUSessionInformation::unsetRatType()
{
    m_RatTypeIsSet = false;
}
std::shared_ptr<RatType> PDUSessionInformation::getMAPDUNon3GPPRATType() const
{
    return m_MAPDUNon3GPPRATType;
}

void PDUSessionInformation::setMAPDUNon3GPPRATType(const std::shared_ptr<RatType>& value)
{
    m_MAPDUNon3GPPRATType = value;
    m_MAPDUNon3GPPRATTypeIsSet = true;
}

bool PDUSessionInformation::mAPDUNon3GPPRATTypeIsSet() const
{
    return m_MAPDUNon3GPPRATTypeIsSet;
}

void PDUSessionInformation::unsetMAPDUNon3GPPRATType()
{
    m_MAPDUNon3GPPRATTypeIsSet = false;
}
utility::string_t PDUSessionInformation::getDnnId() const
{
    return m_DnnId;
}

void PDUSessionInformation::setDnnId(const utility::string_t& value)
{
    m_DnnId = value;
    m_DnnIdIsSet = true;
}

bool PDUSessionInformation::dnnIdIsSet() const
{
    return m_DnnIdIsSet;
}

void PDUSessionInformation::unsetDnnId()
{
    m_DnnIdIsSet = false;
}
utility::string_t PDUSessionInformation::getChargingCharacteristics() const
{
    return m_ChargingCharacteristics;
}

void PDUSessionInformation::setChargingCharacteristics(const utility::string_t& value)
{
    m_ChargingCharacteristics = value;
    m_ChargingCharacteristicsIsSet = true;
}

bool PDUSessionInformation::chargingCharacteristicsIsSet() const
{
    return m_ChargingCharacteristicsIsSet;
}

void PDUSessionInformation::unsetChargingCharacteristics()
{
    m_ChargingCharacteristicsIsSet = false;
}
std::shared_ptr<ChargingCharacteristicsSelectionMode> PDUSessionInformation::getChargingCharacteristicsSelectionMode() const
{
    return m_ChargingCharacteristicsSelectionMode;
}

void PDUSessionInformation::setChargingCharacteristicsSelectionMode(const std::shared_ptr<ChargingCharacteristicsSelectionMode>& value)
{
    m_ChargingCharacteristicsSelectionMode = value;
    m_ChargingCharacteristicsSelectionModeIsSet = true;
}

bool PDUSessionInformation::chargingCharacteristicsSelectionModeIsSet() const
{
    return m_ChargingCharacteristicsSelectionModeIsSet;
}

void PDUSessionInformation::unsetChargingCharacteristicsSelectionMode()
{
    m_ChargingCharacteristicsSelectionModeIsSet = false;
}
utility::datetime PDUSessionInformation::getStartTime() const
{
    return m_StartTime;
}

void PDUSessionInformation::setStartTime(const utility::datetime& value)
{
    m_StartTime = value;
    m_StartTimeIsSet = true;
}

bool PDUSessionInformation::startTimeIsSet() const
{
    return m_StartTimeIsSet;
}

void PDUSessionInformation::unsetStartTime()
{
    m_StartTimeIsSet = false;
}
utility::datetime PDUSessionInformation::getStopTime() const
{
    return m_StopTime;
}

void PDUSessionInformation::setStopTime(const utility::datetime& value)
{
    m_StopTime = value;
    m_StopTimeIsSet = true;
}

bool PDUSessionInformation::stopTimeIsSet() const
{
    return m_StopTimeIsSet;
}

void PDUSessionInformation::unsetStopTime()
{
    m_StopTimeIsSet = false;
}
std::shared_ptr<r_3GPPPSDataOffStatus> PDUSessionInformation::getR3gppPSDataOffStatus() const
{
    return m_r_3gppPSDataOffStatus;
}

void PDUSessionInformation::setR3gppPSDataOffStatus(const std::shared_ptr<r_3GPPPSDataOffStatus>& value)
{
    m_r_3gppPSDataOffStatus = value;
    m_r_3gppPSDataOffStatusIsSet = true;
}

bool PDUSessionInformation::r3gppPSDataOffStatusIsSet() const
{
    return m_r_3gppPSDataOffStatusIsSet;
}

void PDUSessionInformation::unsetr_3gppPSDataOffStatus()
{
    m_r_3gppPSDataOffStatusIsSet = false;
}
bool PDUSessionInformation::isSessionStopIndicator() const
{
    return m_SessionStopIndicator;
}

void PDUSessionInformation::setSessionStopIndicator(bool value)
{
    m_SessionStopIndicator = value;
    m_SessionStopIndicatorIsSet = true;
}

bool PDUSessionInformation::sessionStopIndicatorIsSet() const
{
    return m_SessionStopIndicatorIsSet;
}

void PDUSessionInformation::unsetSessionStopIndicator()
{
    m_SessionStopIndicatorIsSet = false;
}
std::shared_ptr<PDUAddress> PDUSessionInformation::getPduAddress() const
{
    return m_PduAddress;
}

void PDUSessionInformation::setPduAddress(const std::shared_ptr<PDUAddress>& value)
{
    m_PduAddress = value;
    m_PduAddressIsSet = true;
}

bool PDUSessionInformation::pduAddressIsSet() const
{
    return m_PduAddressIsSet;
}

void PDUSessionInformation::unsetPduAddress()
{
    m_PduAddressIsSet = false;
}
int32_t PDUSessionInformation::getDiagnostics() const
{
    return m_Diagnostics;
}

void PDUSessionInformation::setDiagnostics(int32_t value)
{
    m_Diagnostics = value;
    m_DiagnosticsIsSet = true;
}

bool PDUSessionInformation::diagnosticsIsSet() const
{
    return m_DiagnosticsIsSet;
}

void PDUSessionInformation::unsetDiagnostics()
{
    m_DiagnosticsIsSet = false;
}
std::shared_ptr<AuthorizedDefaultQos> PDUSessionInformation::getAuthorizedQoSInformation() const
{
    return m_AuthorizedQoSInformation;
}

void PDUSessionInformation::setAuthorizedQoSInformation(const std::shared_ptr<AuthorizedDefaultQos>& value)
{
    m_AuthorizedQoSInformation = value;
    m_AuthorizedQoSInformationIsSet = true;
}

bool PDUSessionInformation::authorizedQoSInformationIsSet() const
{
    return m_AuthorizedQoSInformationIsSet;
}

void PDUSessionInformation::unsetAuthorizedQoSInformation()
{
    m_AuthorizedQoSInformationIsSet = false;
}
std::shared_ptr<SubscribedDefaultQos> PDUSessionInformation::getSubscribedQoSInformation() const
{
    return m_SubscribedQoSInformation;
}

void PDUSessionInformation::setSubscribedQoSInformation(const std::shared_ptr<SubscribedDefaultQos>& value)
{
    m_SubscribedQoSInformation = value;
    m_SubscribedQoSInformationIsSet = true;
}

bool PDUSessionInformation::subscribedQoSInformationIsSet() const
{
    return m_SubscribedQoSInformationIsSet;
}

void PDUSessionInformation::unsetSubscribedQoSInformation()
{
    m_SubscribedQoSInformationIsSet = false;
}
std::shared_ptr<Ambr> PDUSessionInformation::getAuthorizedSessionAMBR() const
{
    return m_AuthorizedSessionAMBR;
}

void PDUSessionInformation::setAuthorizedSessionAMBR(const std::shared_ptr<Ambr>& value)
{
    m_AuthorizedSessionAMBR = value;
    m_AuthorizedSessionAMBRIsSet = true;
}

bool PDUSessionInformation::authorizedSessionAMBRIsSet() const
{
    return m_AuthorizedSessionAMBRIsSet;
}

void PDUSessionInformation::unsetAuthorizedSessionAMBR()
{
    m_AuthorizedSessionAMBRIsSet = false;
}
std::shared_ptr<Ambr> PDUSessionInformation::getSubscribedSessionAMBR() const
{
    return m_SubscribedSessionAMBR;
}

void PDUSessionInformation::setSubscribedSessionAMBR(const std::shared_ptr<Ambr>& value)
{
    m_SubscribedSessionAMBR = value;
    m_SubscribedSessionAMBRIsSet = true;
}

bool PDUSessionInformation::subscribedSessionAMBRIsSet() const
{
    return m_SubscribedSessionAMBRIsSet;
}

void PDUSessionInformation::unsetSubscribedSessionAMBR()
{
    m_SubscribedSessionAMBRIsSet = false;
}
std::shared_ptr<PlmnId> PDUSessionInformation::getServingCNPlmnId() const
{
    return m_ServingCNPlmnId;
}

void PDUSessionInformation::setServingCNPlmnId(const std::shared_ptr<PlmnId>& value)
{
    m_ServingCNPlmnId = value;
    m_ServingCNPlmnIdIsSet = true;
}

bool PDUSessionInformation::servingCNPlmnIdIsSet() const
{
    return m_ServingCNPlmnIdIsSet;
}

void PDUSessionInformation::unsetServingCNPlmnId()
{
    m_ServingCNPlmnIdIsSet = false;
}
std::shared_ptr<MAPDUSessionInformation> PDUSessionInformation::getMAPDUSessionInformation() const
{
    return m_MAPDUSessionInformation;
}

void PDUSessionInformation::setMAPDUSessionInformation(const std::shared_ptr<MAPDUSessionInformation>& value)
{
    m_MAPDUSessionInformation = value;
    m_MAPDUSessionInformationIsSet = true;
}

bool PDUSessionInformation::mAPDUSessionInformationIsSet() const
{
    return m_MAPDUSessionInformationIsSet;
}

void PDUSessionInformation::unsetMAPDUSessionInformation()
{
    m_MAPDUSessionInformationIsSet = false;
}
std::vector<std::shared_ptr<RanNasRelCause>>& PDUSessionInformation::getEnhancedDiagnostics()
{
    return m_EnhancedDiagnostics;
}

void PDUSessionInformation::setEnhancedDiagnostics(const std::vector<std::shared_ptr<RanNasRelCause>>& value)
{
    m_EnhancedDiagnostics = value;
    m_EnhancedDiagnosticsIsSet = true;
}

bool PDUSessionInformation::enhancedDiagnosticsIsSet() const
{
    return m_EnhancedDiagnosticsIsSet;
}

void PDUSessionInformation::unsetEnhancedDiagnostics()
{
    m_EnhancedDiagnosticsIsSet = false;
}
}
}
}
}


