/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UsedUnitContainer.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UsedUnitContainer::UsedUnitContainer()
{
    m_ServiceId = 0;
    m_ServiceIdIsSet = false;
    m_TriggersIsSet = false;
    m_TriggerTimestamp = utility::datetime();
    m_TriggerTimestampIsSet = false;
    m_Time = 0;
    m_TimeIsSet = false;
    m_TotalVolume = 0;
    m_TotalVolumeIsSet = false;
    m_UplinkVolume = 0;
    m_UplinkVolumeIsSet = false;
    m_DownlinkVolume = 0;
    m_DownlinkVolumeIsSet = false;
    m_ServiceSpecificUnits = 0;
    m_ServiceSpecificUnitsIsSet = false;
    m_EventTimeStampsIsSet = false;
    m_LocalSequenceNumber = 0;
    m_LocalSequenceNumberIsSet = false;
    m_PDUContainerInformationIsSet = false;
}

UsedUnitContainer::~UsedUnitContainer()
{
}

void UsedUnitContainer::validate()
{
    // TODO: implement validation
}

web::json::value UsedUnitContainer::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ServiceIdIsSet)
    {
        val[utility::conversions::to_string_t(U("serviceId"))] = ModelBase::toJson(m_ServiceId);
    }
    if(m_TriggersIsSet)
    {
        val[utility::conversions::to_string_t(U("triggers"))] = ModelBase::toJson(m_Triggers);
    }
    if(m_TriggerTimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("triggerTimestamp"))] = ModelBase::toJson(m_TriggerTimestamp);
    }
    if(m_TimeIsSet)
    {
        val[utility::conversions::to_string_t(U("time"))] = ModelBase::toJson(m_Time);
    }
    if(m_TotalVolumeIsSet)
    {
        val[utility::conversions::to_string_t(U("totalVolume"))] = ModelBase::toJson(m_TotalVolume);
    }
    if(m_UplinkVolumeIsSet)
    {
        val[utility::conversions::to_string_t(U("uplinkVolume"))] = ModelBase::toJson(m_UplinkVolume);
    }
    if(m_DownlinkVolumeIsSet)
    {
        val[utility::conversions::to_string_t(U("downlinkVolume"))] = ModelBase::toJson(m_DownlinkVolume);
    }
    if(m_ServiceSpecificUnitsIsSet)
    {
        val[utility::conversions::to_string_t(U("serviceSpecificUnits"))] = ModelBase::toJson(m_ServiceSpecificUnits);
    }
    if(m_EventTimeStampsIsSet)
    {
        val[utility::conversions::to_string_t(U("eventTimeStamps"))] = ModelBase::toJson(m_EventTimeStamps);
    }
    if(m_LocalSequenceNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("localSequenceNumber"))] = ModelBase::toJson(m_LocalSequenceNumber);
    }
    if(m_PDUContainerInformationIsSet)
    {
        val[utility::conversions::to_string_t(U("pDUContainerInformation"))] = ModelBase::toJson(m_PDUContainerInformation);
    }

    return val;
}

bool UsedUnitContainer::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("serviceId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("serviceId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setServiceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServiceId);
            setServiceId(refVal_setServiceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("triggers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("triggers")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Trigger>> refVal_setTriggers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTriggers);
            setTriggers(refVal_setTriggers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("triggerTimestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("triggerTimestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTriggerTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTriggerTimestamp);
            setTriggerTimestamp(refVal_setTriggerTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTime);
            setTime(refVal_setTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("totalVolume"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("totalVolume")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotalVolume;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalVolume);
            setTotalVolume(refVal_setTotalVolume);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uplinkVolume"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uplinkVolume")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUplinkVolume;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUplinkVolume);
            setUplinkVolume(refVal_setUplinkVolume);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("downlinkVolume"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("downlinkVolume")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDownlinkVolume;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDownlinkVolume);
            setDownlinkVolume(refVal_setDownlinkVolume);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("serviceSpecificUnits"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("serviceSpecificUnits")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setServiceSpecificUnits;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServiceSpecificUnits);
            setServiceSpecificUnits(refVal_setServiceSpecificUnits);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("eventTimeStamps"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("eventTimeStamps")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::datetime>> refVal_setEventTimeStamps;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventTimeStamps);
            setEventTimeStamps(refVal_setEventTimeStamps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("localSequenceNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("localSequenceNumber")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLocalSequenceNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLocalSequenceNumber);
            setLocalSequenceNumber(refVal_setLocalSequenceNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pDUContainerInformation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pDUContainerInformation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PDUContainerInformation> refVal_setPDUContainerInformation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPDUContainerInformation);
            setPDUContainerInformation(refVal_setPDUContainerInformation);
        }
    }
    return ok;
}

void UsedUnitContainer::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ServiceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("serviceId")), m_ServiceId));
    }
    if(m_TriggersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("triggers")), m_Triggers));
    }
    if(m_TriggerTimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("triggerTimestamp")), m_TriggerTimestamp));
    }
    if(m_TimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time")), m_Time));
    }
    if(m_TotalVolumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("totalVolume")), m_TotalVolume));
    }
    if(m_UplinkVolumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uplinkVolume")), m_UplinkVolume));
    }
    if(m_DownlinkVolumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("downlinkVolume")), m_DownlinkVolume));
    }
    if(m_ServiceSpecificUnitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("serviceSpecificUnits")), m_ServiceSpecificUnits));
    }
    if(m_EventTimeStampsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("eventTimeStamps")), m_EventTimeStamps));
    }
    if(m_LocalSequenceNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("localSequenceNumber")), m_LocalSequenceNumber));
    }
    if(m_PDUContainerInformationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pDUContainerInformation")), m_PDUContainerInformation));
    }
}

bool UsedUnitContainer::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("serviceId"))))
    {
        int32_t refVal_setServiceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("serviceId"))), refVal_setServiceId );
        setServiceId(refVal_setServiceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("triggers"))))
    {
        std::vector<std::shared_ptr<Trigger>> refVal_setTriggers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("triggers"))), refVal_setTriggers );
        setTriggers(refVal_setTriggers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("triggerTimestamp"))))
    {
        utility::datetime refVal_setTriggerTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("triggerTimestamp"))), refVal_setTriggerTimestamp );
        setTriggerTimestamp(refVal_setTriggerTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time"))))
    {
        int32_t refVal_setTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time"))), refVal_setTime );
        setTime(refVal_setTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("totalVolume"))))
    {
        int32_t refVal_setTotalVolume;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("totalVolume"))), refVal_setTotalVolume );
        setTotalVolume(refVal_setTotalVolume);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uplinkVolume"))))
    {
        int32_t refVal_setUplinkVolume;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uplinkVolume"))), refVal_setUplinkVolume );
        setUplinkVolume(refVal_setUplinkVolume);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("downlinkVolume"))))
    {
        int32_t refVal_setDownlinkVolume;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("downlinkVolume"))), refVal_setDownlinkVolume );
        setDownlinkVolume(refVal_setDownlinkVolume);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("serviceSpecificUnits"))))
    {
        int32_t refVal_setServiceSpecificUnits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("serviceSpecificUnits"))), refVal_setServiceSpecificUnits );
        setServiceSpecificUnits(refVal_setServiceSpecificUnits);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("eventTimeStamps"))))
    {
        std::vector<std::shared_ptr<utility::datetime>> refVal_setEventTimeStamps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("eventTimeStamps"))), refVal_setEventTimeStamps );
        setEventTimeStamps(refVal_setEventTimeStamps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("localSequenceNumber"))))
    {
        int32_t refVal_setLocalSequenceNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("localSequenceNumber"))), refVal_setLocalSequenceNumber );
        setLocalSequenceNumber(refVal_setLocalSequenceNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pDUContainerInformation"))))
    {
        std::shared_ptr<PDUContainerInformation> refVal_setPDUContainerInformation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pDUContainerInformation"))), refVal_setPDUContainerInformation );
        setPDUContainerInformation(refVal_setPDUContainerInformation);
    }
    return ok;
}

int32_t UsedUnitContainer::getServiceId() const
{
    return m_ServiceId;
}

void UsedUnitContainer::setServiceId(int32_t value)
{
    m_ServiceId = value;
    m_ServiceIdIsSet = true;
}

bool UsedUnitContainer::serviceIdIsSet() const
{
    return m_ServiceIdIsSet;
}

void UsedUnitContainer::unsetServiceId()
{
    m_ServiceIdIsSet = false;
}
std::vector<std::shared_ptr<Trigger>>& UsedUnitContainer::getTriggers()
{
    return m_Triggers;
}

void UsedUnitContainer::setTriggers(const std::vector<std::shared_ptr<Trigger>>& value)
{
    m_Triggers = value;
    m_TriggersIsSet = true;
}

bool UsedUnitContainer::triggersIsSet() const
{
    return m_TriggersIsSet;
}

void UsedUnitContainer::unsetTriggers()
{
    m_TriggersIsSet = false;
}
utility::datetime UsedUnitContainer::getTriggerTimestamp() const
{
    return m_TriggerTimestamp;
}

void UsedUnitContainer::setTriggerTimestamp(const utility::datetime& value)
{
    m_TriggerTimestamp = value;
    m_TriggerTimestampIsSet = true;
}

bool UsedUnitContainer::triggerTimestampIsSet() const
{
    return m_TriggerTimestampIsSet;
}

void UsedUnitContainer::unsetTriggerTimestamp()
{
    m_TriggerTimestampIsSet = false;
}
int32_t UsedUnitContainer::getTime() const
{
    return m_Time;
}

void UsedUnitContainer::setTime(int32_t value)
{
    m_Time = value;
    m_TimeIsSet = true;
}

bool UsedUnitContainer::timeIsSet() const
{
    return m_TimeIsSet;
}

void UsedUnitContainer::unsetTime()
{
    m_TimeIsSet = false;
}
int32_t UsedUnitContainer::getTotalVolume() const
{
    return m_TotalVolume;
}

void UsedUnitContainer::setTotalVolume(int32_t value)
{
    m_TotalVolume = value;
    m_TotalVolumeIsSet = true;
}

bool UsedUnitContainer::totalVolumeIsSet() const
{
    return m_TotalVolumeIsSet;
}

void UsedUnitContainer::unsetTotalVolume()
{
    m_TotalVolumeIsSet = false;
}
int32_t UsedUnitContainer::getUplinkVolume() const
{
    return m_UplinkVolume;
}

void UsedUnitContainer::setUplinkVolume(int32_t value)
{
    m_UplinkVolume = value;
    m_UplinkVolumeIsSet = true;
}

bool UsedUnitContainer::uplinkVolumeIsSet() const
{
    return m_UplinkVolumeIsSet;
}

void UsedUnitContainer::unsetUplinkVolume()
{
    m_UplinkVolumeIsSet = false;
}
int32_t UsedUnitContainer::getDownlinkVolume() const
{
    return m_DownlinkVolume;
}

void UsedUnitContainer::setDownlinkVolume(int32_t value)
{
    m_DownlinkVolume = value;
    m_DownlinkVolumeIsSet = true;
}

bool UsedUnitContainer::downlinkVolumeIsSet() const
{
    return m_DownlinkVolumeIsSet;
}

void UsedUnitContainer::unsetDownlinkVolume()
{
    m_DownlinkVolumeIsSet = false;
}
int32_t UsedUnitContainer::getServiceSpecificUnits() const
{
    return m_ServiceSpecificUnits;
}

void UsedUnitContainer::setServiceSpecificUnits(int32_t value)
{
    m_ServiceSpecificUnits = value;
    m_ServiceSpecificUnitsIsSet = true;
}

bool UsedUnitContainer::serviceSpecificUnitsIsSet() const
{
    return m_ServiceSpecificUnitsIsSet;
}

void UsedUnitContainer::unsetServiceSpecificUnits()
{
    m_ServiceSpecificUnitsIsSet = false;
}
std::vector<std::shared_ptr<utility::datetime>>& UsedUnitContainer::getEventTimeStamps()
{
    return m_EventTimeStamps;
}

void UsedUnitContainer::setEventTimeStamps(const std::vector<std::shared_ptr<utility::datetime>>& value)
{
    m_EventTimeStamps = value;
    m_EventTimeStampsIsSet = true;
}

bool UsedUnitContainer::eventTimeStampsIsSet() const
{
    return m_EventTimeStampsIsSet;
}

void UsedUnitContainer::unsetEventTimeStamps()
{
    m_EventTimeStampsIsSet = false;
}
int32_t UsedUnitContainer::getLocalSequenceNumber() const
{
    return m_LocalSequenceNumber;
}

void UsedUnitContainer::setLocalSequenceNumber(int32_t value)
{
    m_LocalSequenceNumber = value;
    m_LocalSequenceNumberIsSet = true;
}

bool UsedUnitContainer::localSequenceNumberIsSet() const
{
    return m_LocalSequenceNumberIsSet;
}

void UsedUnitContainer::unsetLocalSequenceNumber()
{
    m_LocalSequenceNumberIsSet = false;
}
std::shared_ptr<PDUContainerInformation> UsedUnitContainer::getPDUContainerInformation() const
{
    return m_PDUContainerInformation;
}

void UsedUnitContainer::setPDUContainerInformation(const std::shared_ptr<PDUContainerInformation>& value)
{
    m_PDUContainerInformation = value;
    m_PDUContainerInformationIsSet = true;
}

bool UsedUnitContainer::pDUContainerInformationIsSet() const
{
    return m_PDUContainerInformationIsSet;
}

void UsedUnitContainer::unsetPDUContainerInformation()
{
    m_PDUContainerInformationIsSet = false;
}
}
}
}
}


