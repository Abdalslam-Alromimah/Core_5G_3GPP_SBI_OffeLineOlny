/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/NtnTaiInfo.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



NtnTaiInfo::NtnTaiInfo()
{
    m_PlmnIdIsSet = false;
    m_TacListIsSet = false;
    m_DerivedTac = utility::conversions::to_string_t("");
    m_DerivedTacIsSet = false;
}

NtnTaiInfo::~NtnTaiInfo()
{
}

void NtnTaiInfo::validate()
{
    // TODO: implement validation
}

web::json::value NtnTaiInfo::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PlmnIdIsSet)
    {
        val[utility::conversions::to_string_t(U("plmnId"))] = ModelBase::toJson(m_PlmnId);
    }
    if(m_TacListIsSet)
    {
        val[utility::conversions::to_string_t(U("tacList"))] = ModelBase::toJson(m_TacList);
    }
    if(m_DerivedTacIsSet)
    {
        val[utility::conversions::to_string_t(U("derivedTac"))] = ModelBase::toJson(m_DerivedTac);
    }

    return val;
}

bool NtnTaiInfo::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("plmnId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("plmnId")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlmnIdNid> refVal_setPlmnId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlmnId);
            setPlmnId(refVal_setPlmnId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tacList"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tacList")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<utility::string_t>> refVal_setTacList;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTacList);
            setTacList(refVal_setTacList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("derivedTac"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("derivedTac")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDerivedTac;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDerivedTac);
            setDerivedTac(refVal_setDerivedTac);
        }
    }
    return ok;
}

void NtnTaiInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PlmnIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("plmnId")), m_PlmnId));
    }
    if(m_TacListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tacList")), m_TacList));
    }
    if(m_DerivedTacIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("derivedTac")), m_DerivedTac));
    }
}

bool NtnTaiInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("plmnId"))))
    {
        std::shared_ptr<PlmnIdNid> refVal_setPlmnId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("plmnId"))), refVal_setPlmnId );
        setPlmnId(refVal_setPlmnId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tacList"))))
    {
        std::vector<std::shared_ptr<utility::string_t>> refVal_setTacList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tacList"))), refVal_setTacList );
        setTacList(refVal_setTacList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("derivedTac"))))
    {
        utility::string_t refVal_setDerivedTac;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("derivedTac"))), refVal_setDerivedTac );
        setDerivedTac(refVal_setDerivedTac);
    }
    return ok;
}

std::shared_ptr<PlmnIdNid> NtnTaiInfo::getPlmnId() const
{
    return m_PlmnId;
}

void NtnTaiInfo::setPlmnId(const std::shared_ptr<PlmnIdNid>& value)
{
    m_PlmnId = value;
    m_PlmnIdIsSet = true;
}

bool NtnTaiInfo::plmnIdIsSet() const
{
    return m_PlmnIdIsSet;
}

void NtnTaiInfo::unsetPlmnId()
{
    m_PlmnIdIsSet = false;
}
std::vector<std::shared_ptr<utility::string_t>>& NtnTaiInfo::getTacList()
{
    return m_TacList;
}

void NtnTaiInfo::setTacList(const std::vector<std::shared_ptr<utility::string_t>>& value)
{
    m_TacList = value;
    m_TacListIsSet = true;
}

bool NtnTaiInfo::tacListIsSet() const
{
    return m_TacListIsSet;
}

void NtnTaiInfo::unsetTacList()
{
    m_TacListIsSet = false;
}
utility::string_t NtnTaiInfo::getDerivedTac() const
{
    return m_DerivedTac;
}

void NtnTaiInfo::setDerivedTac(const utility::string_t& value)
{
    m_DerivedTac = value;
    m_DerivedTacIsSet = true;
}

bool NtnTaiInfo::derivedTacIsSet() const
{
    return m_DerivedTacIsSet;
}

void NtnTaiInfo::unsetDerivedTac()
{
    m_DerivedTacIsSet = false;
}
}
}
}
}


