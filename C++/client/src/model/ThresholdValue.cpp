/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ThresholdValue.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ThresholdValue::ThresholdValue()
{
    m_RttThres = 0;
    m_RttThresIsSet = false;
    m_PlrThres = 0;
    m_PlrThresIsSet = false;
}

ThresholdValue::~ThresholdValue()
{
}

void ThresholdValue::validate()
{
    // TODO: implement validation
}

web::json::value ThresholdValue::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_RttThresIsSet)
    {
        val[utility::conversions::to_string_t(U("rttThres"))] = ModelBase::toJson(m_RttThres);
    }
    if(m_PlrThresIsSet)
    {
        val[utility::conversions::to_string_t(U("plrThres"))] = ModelBase::toJson(m_PlrThres);
    }

    return val;
}

bool ThresholdValue::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("rttThres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rttThres")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRttThres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRttThres);
            setRttThres(refVal_setRttThres);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("plrThres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("plrThres")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPlrThres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlrThres);
            setPlrThres(refVal_setPlrThres);
        }
    }
    return ok;
}

void ThresholdValue::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_RttThresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rttThres")), m_RttThres));
    }
    if(m_PlrThresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("plrThres")), m_PlrThres));
    }
}

bool ThresholdValue::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("rttThres"))))
    {
        int32_t refVal_setRttThres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rttThres"))), refVal_setRttThres );
        setRttThres(refVal_setRttThres);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("plrThres"))))
    {
        int32_t refVal_setPlrThres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("plrThres"))), refVal_setPlrThres );
        setPlrThres(refVal_setPlrThres);
    }
    return ok;
}

int32_t ThresholdValue::getRttThres() const
{
    return m_RttThres;
}

void ThresholdValue::setRttThres(int32_t value)
{
    m_RttThres = value;
    m_RttThresIsSet = true;
}

bool ThresholdValue::rttThresIsSet() const
{
    return m_RttThresIsSet;
}

void ThresholdValue::unsetRttThres()
{
    m_RttThresIsSet = false;
}
int32_t ThresholdValue::getPlrThres() const
{
    return m_PlrThres;
}

void ThresholdValue::setPlrThres(int32_t value)
{
    m_PlrThres = value;
    m_PlrThresIsSet = true;
}

bool ThresholdValue::plrThresIsSet() const
{
    return m_PlrThresIsSet;
}

void ThresholdValue::unsetPlrThres()
{
    m_PlrThresIsSet = false;
}
}
}
}
}


