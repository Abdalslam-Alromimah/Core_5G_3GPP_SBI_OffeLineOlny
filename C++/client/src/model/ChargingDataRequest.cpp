/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ChargingDataRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ChargingDataRequest::ChargingDataRequest()
{
    m_SubscriberIdentifier = utility::conversions::to_string_t("");
    m_SubscriberIdentifierIsSet = false;
    m_NfConsumerIdentificationIsSet = false;
    m_InvocationTimeStamp = utility::datetime();
    m_InvocationTimeStampIsSet = false;
    m_InvocationSequenceNumber = 0;
    m_InvocationSequenceNumberIsSet = false;
    m_RetransmissionIndicator = false;
    m_RetransmissionIndicatorIsSet = false;
    m_ServiceSpecificationInfo = utility::conversions::to_string_t("");
    m_ServiceSpecificationInfoIsSet = false;
    m_MultipleUnitUsageIsSet = false;
    m_TriggersIsSet = false;
    m_PDUSessionChargingInformationIsSet = false;
    m_RoamingQBCInformationIsSet = false;
}

ChargingDataRequest::~ChargingDataRequest()
{
}

void ChargingDataRequest::validate()
{
    // TODO: implement validation
}

web::json::value ChargingDataRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SubscriberIdentifierIsSet)
    {
        val[utility::conversions::to_string_t(U("subscriberIdentifier"))] = ModelBase::toJson(m_SubscriberIdentifier);
    }
    if(m_NfConsumerIdentificationIsSet)
    {
        val[utility::conversions::to_string_t(U("nfConsumerIdentification"))] = ModelBase::toJson(m_NfConsumerIdentification);
    }
    if(m_InvocationTimeStampIsSet)
    {
        val[utility::conversions::to_string_t(U("invocationTimeStamp"))] = ModelBase::toJson(m_InvocationTimeStamp);
    }
    if(m_InvocationSequenceNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("invocationSequenceNumber"))] = ModelBase::toJson(m_InvocationSequenceNumber);
    }
    if(m_RetransmissionIndicatorIsSet)
    {
        val[utility::conversions::to_string_t(U("retransmissionIndicator"))] = ModelBase::toJson(m_RetransmissionIndicator);
    }
    if(m_ServiceSpecificationInfoIsSet)
    {
        val[utility::conversions::to_string_t(U("serviceSpecificationInfo"))] = ModelBase::toJson(m_ServiceSpecificationInfo);
    }
    if(m_MultipleUnitUsageIsSet)
    {
        val[utility::conversions::to_string_t(U("multipleUnitUsage"))] = ModelBase::toJson(m_MultipleUnitUsage);
    }
    if(m_TriggersIsSet)
    {
        val[utility::conversions::to_string_t(U("triggers"))] = ModelBase::toJson(m_Triggers);
    }
    if(m_PDUSessionChargingInformationIsSet)
    {
        val[utility::conversions::to_string_t(U("pDUSessionChargingInformation"))] = ModelBase::toJson(m_PDUSessionChargingInformation);
    }
    if(m_RoamingQBCInformationIsSet)
    {
        val[utility::conversions::to_string_t(U("roamingQBCInformation"))] = ModelBase::toJson(m_RoamingQBCInformation);
    }

    return val;
}

bool ChargingDataRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("subscriberIdentifier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subscriberIdentifier")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubscriberIdentifier;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubscriberIdentifier);
            setSubscriberIdentifier(refVal_setSubscriberIdentifier);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nfConsumerIdentification"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nfConsumerIdentification")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<NFIdentification> refVal_setNfConsumerIdentification;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNfConsumerIdentification);
            setNfConsumerIdentification(refVal_setNfConsumerIdentification);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("invocationTimeStamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("invocationTimeStamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setInvocationTimeStamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInvocationTimeStamp);
            setInvocationTimeStamp(refVal_setInvocationTimeStamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("invocationSequenceNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("invocationSequenceNumber")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setInvocationSequenceNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInvocationSequenceNumber);
            setInvocationSequenceNumber(refVal_setInvocationSequenceNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("retransmissionIndicator"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("retransmissionIndicator")));
        if(!fieldValue.is_null())
        {
            bool refVal_setRetransmissionIndicator;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRetransmissionIndicator);
            setRetransmissionIndicator(refVal_setRetransmissionIndicator);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("serviceSpecificationInfo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("serviceSpecificationInfo")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setServiceSpecificationInfo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServiceSpecificationInfo);
            setServiceSpecificationInfo(refVal_setServiceSpecificationInfo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("multipleUnitUsage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("multipleUnitUsage")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<MultipleUnitUsage>> refVal_setMultipleUnitUsage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMultipleUnitUsage);
            setMultipleUnitUsage(refVal_setMultipleUnitUsage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("triggers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("triggers")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Trigger>> refVal_setTriggers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTriggers);
            setTriggers(refVal_setTriggers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pDUSessionChargingInformation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pDUSessionChargingInformation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PDUSessionChargingInformation> refVal_setPDUSessionChargingInformation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPDUSessionChargingInformation);
            setPDUSessionChargingInformation(refVal_setPDUSessionChargingInformation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("roamingQBCInformation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("roamingQBCInformation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RoamingQBCInformation> refVal_setRoamingQBCInformation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRoamingQBCInformation);
            setRoamingQBCInformation(refVal_setRoamingQBCInformation);
        }
    }
    return ok;
}

void ChargingDataRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SubscriberIdentifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subscriberIdentifier")), m_SubscriberIdentifier));
    }
    if(m_NfConsumerIdentificationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nfConsumerIdentification")), m_NfConsumerIdentification));
    }
    if(m_InvocationTimeStampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("invocationTimeStamp")), m_InvocationTimeStamp));
    }
    if(m_InvocationSequenceNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("invocationSequenceNumber")), m_InvocationSequenceNumber));
    }
    if(m_RetransmissionIndicatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("retransmissionIndicator")), m_RetransmissionIndicator));
    }
    if(m_ServiceSpecificationInfoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("serviceSpecificationInfo")), m_ServiceSpecificationInfo));
    }
    if(m_MultipleUnitUsageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("multipleUnitUsage")), m_MultipleUnitUsage));
    }
    if(m_TriggersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("triggers")), m_Triggers));
    }
    if(m_PDUSessionChargingInformationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pDUSessionChargingInformation")), m_PDUSessionChargingInformation));
    }
    if(m_RoamingQBCInformationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("roamingQBCInformation")), m_RoamingQBCInformation));
    }
}

bool ChargingDataRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("subscriberIdentifier"))))
    {
        utility::string_t refVal_setSubscriberIdentifier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subscriberIdentifier"))), refVal_setSubscriberIdentifier );
        setSubscriberIdentifier(refVal_setSubscriberIdentifier);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nfConsumerIdentification"))))
    {
        std::shared_ptr<NFIdentification> refVal_setNfConsumerIdentification;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nfConsumerIdentification"))), refVal_setNfConsumerIdentification );
        setNfConsumerIdentification(refVal_setNfConsumerIdentification);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("invocationTimeStamp"))))
    {
        utility::datetime refVal_setInvocationTimeStamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("invocationTimeStamp"))), refVal_setInvocationTimeStamp );
        setInvocationTimeStamp(refVal_setInvocationTimeStamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("invocationSequenceNumber"))))
    {
        int32_t refVal_setInvocationSequenceNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("invocationSequenceNumber"))), refVal_setInvocationSequenceNumber );
        setInvocationSequenceNumber(refVal_setInvocationSequenceNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("retransmissionIndicator"))))
    {
        bool refVal_setRetransmissionIndicator;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("retransmissionIndicator"))), refVal_setRetransmissionIndicator );
        setRetransmissionIndicator(refVal_setRetransmissionIndicator);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("serviceSpecificationInfo"))))
    {
        utility::string_t refVal_setServiceSpecificationInfo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("serviceSpecificationInfo"))), refVal_setServiceSpecificationInfo );
        setServiceSpecificationInfo(refVal_setServiceSpecificationInfo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("multipleUnitUsage"))))
    {
        std::vector<std::shared_ptr<MultipleUnitUsage>> refVal_setMultipleUnitUsage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("multipleUnitUsage"))), refVal_setMultipleUnitUsage );
        setMultipleUnitUsage(refVal_setMultipleUnitUsage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("triggers"))))
    {
        std::vector<std::shared_ptr<Trigger>> refVal_setTriggers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("triggers"))), refVal_setTriggers );
        setTriggers(refVal_setTriggers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pDUSessionChargingInformation"))))
    {
        std::shared_ptr<PDUSessionChargingInformation> refVal_setPDUSessionChargingInformation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pDUSessionChargingInformation"))), refVal_setPDUSessionChargingInformation );
        setPDUSessionChargingInformation(refVal_setPDUSessionChargingInformation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("roamingQBCInformation"))))
    {
        std::shared_ptr<RoamingQBCInformation> refVal_setRoamingQBCInformation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("roamingQBCInformation"))), refVal_setRoamingQBCInformation );
        setRoamingQBCInformation(refVal_setRoamingQBCInformation);
    }
    return ok;
}

utility::string_t ChargingDataRequest::getSubscriberIdentifier() const
{
    return m_SubscriberIdentifier;
}

void ChargingDataRequest::setSubscriberIdentifier(const utility::string_t& value)
{
    m_SubscriberIdentifier = value;
    m_SubscriberIdentifierIsSet = true;
}

bool ChargingDataRequest::subscriberIdentifierIsSet() const
{
    return m_SubscriberIdentifierIsSet;
}

void ChargingDataRequest::unsetSubscriberIdentifier()
{
    m_SubscriberIdentifierIsSet = false;
}
std::shared_ptr<NFIdentification> ChargingDataRequest::getNfConsumerIdentification() const
{
    return m_NfConsumerIdentification;
}

void ChargingDataRequest::setNfConsumerIdentification(const std::shared_ptr<NFIdentification>& value)
{
    m_NfConsumerIdentification = value;
    m_NfConsumerIdentificationIsSet = true;
}

bool ChargingDataRequest::nfConsumerIdentificationIsSet() const
{
    return m_NfConsumerIdentificationIsSet;
}

void ChargingDataRequest::unsetNfConsumerIdentification()
{
    m_NfConsumerIdentificationIsSet = false;
}
utility::datetime ChargingDataRequest::getInvocationTimeStamp() const
{
    return m_InvocationTimeStamp;
}

void ChargingDataRequest::setInvocationTimeStamp(const utility::datetime& value)
{
    m_InvocationTimeStamp = value;
    m_InvocationTimeStampIsSet = true;
}

bool ChargingDataRequest::invocationTimeStampIsSet() const
{
    return m_InvocationTimeStampIsSet;
}

void ChargingDataRequest::unsetInvocationTimeStamp()
{
    m_InvocationTimeStampIsSet = false;
}
int32_t ChargingDataRequest::getInvocationSequenceNumber() const
{
    return m_InvocationSequenceNumber;
}

void ChargingDataRequest::setInvocationSequenceNumber(int32_t value)
{
    m_InvocationSequenceNumber = value;
    m_InvocationSequenceNumberIsSet = true;
}

bool ChargingDataRequest::invocationSequenceNumberIsSet() const
{
    return m_InvocationSequenceNumberIsSet;
}

void ChargingDataRequest::unsetInvocationSequenceNumber()
{
    m_InvocationSequenceNumberIsSet = false;
}
bool ChargingDataRequest::isRetransmissionIndicator() const
{
    return m_RetransmissionIndicator;
}

void ChargingDataRequest::setRetransmissionIndicator(bool value)
{
    m_RetransmissionIndicator = value;
    m_RetransmissionIndicatorIsSet = true;
}

bool ChargingDataRequest::retransmissionIndicatorIsSet() const
{
    return m_RetransmissionIndicatorIsSet;
}

void ChargingDataRequest::unsetRetransmissionIndicator()
{
    m_RetransmissionIndicatorIsSet = false;
}
utility::string_t ChargingDataRequest::getServiceSpecificationInfo() const
{
    return m_ServiceSpecificationInfo;
}

void ChargingDataRequest::setServiceSpecificationInfo(const utility::string_t& value)
{
    m_ServiceSpecificationInfo = value;
    m_ServiceSpecificationInfoIsSet = true;
}

bool ChargingDataRequest::serviceSpecificationInfoIsSet() const
{
    return m_ServiceSpecificationInfoIsSet;
}

void ChargingDataRequest::unsetServiceSpecificationInfo()
{
    m_ServiceSpecificationInfoIsSet = false;
}
std::vector<std::shared_ptr<MultipleUnitUsage>>& ChargingDataRequest::getMultipleUnitUsage()
{
    return m_MultipleUnitUsage;
}

void ChargingDataRequest::setMultipleUnitUsage(const std::vector<std::shared_ptr<MultipleUnitUsage>>& value)
{
    m_MultipleUnitUsage = value;
    m_MultipleUnitUsageIsSet = true;
}

bool ChargingDataRequest::multipleUnitUsageIsSet() const
{
    return m_MultipleUnitUsageIsSet;
}

void ChargingDataRequest::unsetMultipleUnitUsage()
{
    m_MultipleUnitUsageIsSet = false;
}
std::vector<std::shared_ptr<Trigger>>& ChargingDataRequest::getTriggers()
{
    return m_Triggers;
}

void ChargingDataRequest::setTriggers(const std::vector<std::shared_ptr<Trigger>>& value)
{
    m_Triggers = value;
    m_TriggersIsSet = true;
}

bool ChargingDataRequest::triggersIsSet() const
{
    return m_TriggersIsSet;
}

void ChargingDataRequest::unsetTriggers()
{
    m_TriggersIsSet = false;
}
std::shared_ptr<PDUSessionChargingInformation> ChargingDataRequest::getPDUSessionChargingInformation() const
{
    return m_PDUSessionChargingInformation;
}

void ChargingDataRequest::setPDUSessionChargingInformation(const std::shared_ptr<PDUSessionChargingInformation>& value)
{
    m_PDUSessionChargingInformation = value;
    m_PDUSessionChargingInformationIsSet = true;
}

bool ChargingDataRequest::pDUSessionChargingInformationIsSet() const
{
    return m_PDUSessionChargingInformationIsSet;
}

void ChargingDataRequest::unsetPDUSessionChargingInformation()
{
    m_PDUSessionChargingInformationIsSet = false;
}
std::shared_ptr<RoamingQBCInformation> ChargingDataRequest::getRoamingQBCInformation() const
{
    return m_RoamingQBCInformation;
}

void ChargingDataRequest::setRoamingQBCInformation(const std::shared_ptr<RoamingQBCInformation>& value)
{
    m_RoamingQBCInformation = value;
    m_RoamingQBCInformationIsSet = true;
}

bool ChargingDataRequest::roamingQBCInformationIsSet() const
{
    return m_RoamingQBCInformationIsSet;
}

void ChargingDataRequest::unsetRoamingQBCInformation()
{
    m_RoamingQBCInformationIsSet = false;
}
}
}
}
}


