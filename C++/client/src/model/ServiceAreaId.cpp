/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ServiceAreaId.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ServiceAreaId::ServiceAreaId()
{
    m_PlmnIdIsSet = false;
    m_Lac = utility::conversions::to_string_t("");
    m_LacIsSet = false;
    m_Sac = utility::conversions::to_string_t("");
    m_SacIsSet = false;
}

ServiceAreaId::~ServiceAreaId()
{
}

void ServiceAreaId::validate()
{
    // TODO: implement validation
}

web::json::value ServiceAreaId::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PlmnIdIsSet)
    {
        val[utility::conversions::to_string_t(U("plmnId"))] = ModelBase::toJson(m_PlmnId);
    }
    if(m_LacIsSet)
    {
        val[utility::conversions::to_string_t(U("lac"))] = ModelBase::toJson(m_Lac);
    }
    if(m_SacIsSet)
    {
        val[utility::conversions::to_string_t(U("sac"))] = ModelBase::toJson(m_Sac);
    }

    return val;
}

bool ServiceAreaId::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("plmnId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("plmnId")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlmnId> refVal_setPlmnId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlmnId);
            setPlmnId(refVal_setPlmnId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lac"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lac")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLac;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLac);
            setLac(refVal_setLac);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sac"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sac")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSac;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSac);
            setSac(refVal_setSac);
        }
    }
    return ok;
}

void ServiceAreaId::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PlmnIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("plmnId")), m_PlmnId));
    }
    if(m_LacIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lac")), m_Lac));
    }
    if(m_SacIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sac")), m_Sac));
    }
}

bool ServiceAreaId::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("plmnId"))))
    {
        std::shared_ptr<PlmnId> refVal_setPlmnId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("plmnId"))), refVal_setPlmnId );
        setPlmnId(refVal_setPlmnId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lac"))))
    {
        utility::string_t refVal_setLac;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lac"))), refVal_setLac );
        setLac(refVal_setLac);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sac"))))
    {
        utility::string_t refVal_setSac;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sac"))), refVal_setSac );
        setSac(refVal_setSac);
    }
    return ok;
}

std::shared_ptr<PlmnId> ServiceAreaId::getPlmnId() const
{
    return m_PlmnId;
}

void ServiceAreaId::setPlmnId(const std::shared_ptr<PlmnId>& value)
{
    m_PlmnId = value;
    m_PlmnIdIsSet = true;
}

bool ServiceAreaId::plmnIdIsSet() const
{
    return m_PlmnIdIsSet;
}

void ServiceAreaId::unsetPlmnId()
{
    m_PlmnIdIsSet = false;
}
utility::string_t ServiceAreaId::getLac() const
{
    return m_Lac;
}

void ServiceAreaId::setLac(const utility::string_t& value)
{
    m_Lac = value;
    m_LacIsSet = true;
}

bool ServiceAreaId::lacIsSet() const
{
    return m_LacIsSet;
}

void ServiceAreaId::unsetLac()
{
    m_LacIsSet = false;
}
utility::string_t ServiceAreaId::getSac() const
{
    return m_Sac;
}

void ServiceAreaId::setSac(const utility::string_t& value)
{
    m_Sac = value;
    m_SacIsSet = true;
}

bool ServiceAreaId::sacIsSet() const
{
    return m_SacIsSet;
}

void ServiceAreaId::unsetSac()
{
    m_SacIsSet = false;
}
}
}
}
}


