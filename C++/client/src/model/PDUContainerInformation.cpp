/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PDUContainerInformation.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PDUContainerInformation::PDUContainerInformation()
{
    m_TimeofFirstUsage = utility::datetime();
    m_TimeofFirstUsageIsSet = false;
    m_TimeofLastUsage = utility::datetime();
    m_TimeofLastUsageIsSet = false;
    m_QoSInformationIsSet = false;
    m_QoSCharacteristicsIsSet = false;
    m_AFCorrelationInformation = utility::conversions::to_string_t("");
    m_AFCorrelationInformationIsSet = false;
    m_UserLocationInformationIsSet = false;
    m_UetimeZone = utility::conversions::to_string_t("");
    m_UetimeZoneIsSet = false;
    m_RATTypeIsSet = false;
    m_ServingNodeIDIsSet = false;
    m_PresenceReportingAreaInformationIsSet = false;
    m_r_3gppPSDataOffStatusIsSet = false;
    m_SponsorIdentity = utility::conversions::to_string_t("");
    m_SponsorIdentityIsSet = false;
    m_ApplicationserviceProviderIdentity = utility::conversions::to_string_t("");
    m_ApplicationserviceProviderIdentityIsSet = false;
    m_ChargingRuleBaseName = utility::conversions::to_string_t("");
    m_ChargingRuleBaseNameIsSet = false;
    m_MAPDUSteeringFunctionalityIsSet = false;
    m_MAPDUSteeringModeIsSet = false;
}

PDUContainerInformation::~PDUContainerInformation()
{
}

void PDUContainerInformation::validate()
{
    // TODO: implement validation
}

web::json::value PDUContainerInformation::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TimeofFirstUsageIsSet)
    {
        val[utility::conversions::to_string_t(U("timeofFirstUsage"))] = ModelBase::toJson(m_TimeofFirstUsage);
    }
    if(m_TimeofLastUsageIsSet)
    {
        val[utility::conversions::to_string_t(U("timeofLastUsage"))] = ModelBase::toJson(m_TimeofLastUsage);
    }
    if(m_QoSInformationIsSet)
    {
        val[utility::conversions::to_string_t(U("qoSInformation"))] = ModelBase::toJson(m_QoSInformation);
    }
    if(m_QoSCharacteristicsIsSet)
    {
        val[utility::conversions::to_string_t(U("qoSCharacteristics"))] = ModelBase::toJson(m_QoSCharacteristics);
    }
    if(m_AFCorrelationInformationIsSet)
    {
        val[utility::conversions::to_string_t(U("aFCorrelationInformation"))] = ModelBase::toJson(m_AFCorrelationInformation);
    }
    if(m_UserLocationInformationIsSet)
    {
        val[utility::conversions::to_string_t(U("userLocationInformation"))] = ModelBase::toJson(m_UserLocationInformation);
    }
    if(m_UetimeZoneIsSet)
    {
        val[utility::conversions::to_string_t(U("uetimeZone"))] = ModelBase::toJson(m_UetimeZone);
    }
    if(m_RATTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("rATType"))] = ModelBase::toJson(m_RATType);
    }
    if(m_ServingNodeIDIsSet)
    {
        val[utility::conversions::to_string_t(U("servingNodeID"))] = ModelBase::toJson(m_ServingNodeID);
    }
    if(m_PresenceReportingAreaInformationIsSet)
    {
        val[utility::conversions::to_string_t(U("presenceReportingAreaInformation"))] = ModelBase::toJson(m_PresenceReportingAreaInformation);
    }
    if(m_r_3gppPSDataOffStatusIsSet)
    {
        val[utility::conversions::to_string_t(U("3gppPSDataOffStatus"))] = ModelBase::toJson(m_r_3gppPSDataOffStatus);
    }
    if(m_SponsorIdentityIsSet)
    {
        val[utility::conversions::to_string_t(U("sponsorIdentity"))] = ModelBase::toJson(m_SponsorIdentity);
    }
    if(m_ApplicationserviceProviderIdentityIsSet)
    {
        val[utility::conversions::to_string_t(U("applicationserviceProviderIdentity"))] = ModelBase::toJson(m_ApplicationserviceProviderIdentity);
    }
    if(m_ChargingRuleBaseNameIsSet)
    {
        val[utility::conversions::to_string_t(U("chargingRuleBaseName"))] = ModelBase::toJson(m_ChargingRuleBaseName);
    }
    if(m_MAPDUSteeringFunctionalityIsSet)
    {
        val[utility::conversions::to_string_t(U("mAPDUSteeringFunctionality"))] = ModelBase::toJson(m_MAPDUSteeringFunctionality);
    }
    if(m_MAPDUSteeringModeIsSet)
    {
        val[utility::conversions::to_string_t(U("mAPDUSteeringMode"))] = ModelBase::toJson(m_MAPDUSteeringMode);
    }

    return val;
}

bool PDUContainerInformation::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("timeofFirstUsage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timeofFirstUsage")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimeofFirstUsage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeofFirstUsage);
            setTimeofFirstUsage(refVal_setTimeofFirstUsage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timeofLastUsage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timeofLastUsage")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimeofLastUsage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeofLastUsage);
            setTimeofLastUsage(refVal_setTimeofLastUsage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("qoSInformation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("qoSInformation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<QosData> refVal_setQoSInformation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQoSInformation);
            setQoSInformation(refVal_setQoSInformation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("qoSCharacteristics"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("qoSCharacteristics")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<QosCharacteristics> refVal_setQoSCharacteristics;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQoSCharacteristics);
            setQoSCharacteristics(refVal_setQoSCharacteristics);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("aFCorrelationInformation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("aFCorrelationInformation")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAFCorrelationInformation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAFCorrelationInformation);
            setAFCorrelationInformation(refVal_setAFCorrelationInformation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userLocationInformation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userLocationInformation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UserLocation> refVal_setUserLocationInformation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserLocationInformation);
            setUserLocationInformation(refVal_setUserLocationInformation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uetimeZone"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uetimeZone")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUetimeZone;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUetimeZone);
            setUetimeZone(refVal_setUetimeZone);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rATType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rATType")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RatType> refVal_setRATType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRATType);
            setRATType(refVal_setRATType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("servingNodeID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("servingNodeID")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ServingNetworkFunctionID>> refVal_setServingNodeID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServingNodeID);
            setServingNodeID(refVal_setServingNodeID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("presenceReportingAreaInformation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("presenceReportingAreaInformation")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<PresenceInfo>> refVal_setPresenceReportingAreaInformation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPresenceReportingAreaInformation);
            setPresenceReportingAreaInformation(refVal_setPresenceReportingAreaInformation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("3gppPSDataOffStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("3gppPSDataOffStatus")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<r_3GPPPSDataOffStatus> refVal_setR3gppPSDataOffStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setR3gppPSDataOffStatus);
            setR3gppPSDataOffStatus(refVal_setR3gppPSDataOffStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sponsorIdentity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sponsorIdentity")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSponsorIdentity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSponsorIdentity);
            setSponsorIdentity(refVal_setSponsorIdentity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("applicationserviceProviderIdentity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("applicationserviceProviderIdentity")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setApplicationserviceProviderIdentity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setApplicationserviceProviderIdentity);
            setApplicationserviceProviderIdentity(refVal_setApplicationserviceProviderIdentity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("chargingRuleBaseName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chargingRuleBaseName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setChargingRuleBaseName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChargingRuleBaseName);
            setChargingRuleBaseName(refVal_setChargingRuleBaseName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mAPDUSteeringFunctionality"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mAPDUSteeringFunctionality")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SteeringFunctionality> refVal_setMAPDUSteeringFunctionality;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMAPDUSteeringFunctionality);
            setMAPDUSteeringFunctionality(refVal_setMAPDUSteeringFunctionality);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mAPDUSteeringMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mAPDUSteeringMode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SteeringMode> refVal_setMAPDUSteeringMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMAPDUSteeringMode);
            setMAPDUSteeringMode(refVal_setMAPDUSteeringMode);
        }
    }
    return ok;
}

void PDUContainerInformation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TimeofFirstUsageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timeofFirstUsage")), m_TimeofFirstUsage));
    }
    if(m_TimeofLastUsageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timeofLastUsage")), m_TimeofLastUsage));
    }
    if(m_QoSInformationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("qoSInformation")), m_QoSInformation));
    }
    if(m_QoSCharacteristicsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("qoSCharacteristics")), m_QoSCharacteristics));
    }
    if(m_AFCorrelationInformationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("aFCorrelationInformation")), m_AFCorrelationInformation));
    }
    if(m_UserLocationInformationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userLocationInformation")), m_UserLocationInformation));
    }
    if(m_UetimeZoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uetimeZone")), m_UetimeZone));
    }
    if(m_RATTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rATType")), m_RATType));
    }
    if(m_ServingNodeIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("servingNodeID")), m_ServingNodeID));
    }
    if(m_PresenceReportingAreaInformationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("presenceReportingAreaInformation")), m_PresenceReportingAreaInformation));
    }
    if(m_r_3gppPSDataOffStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("3gppPSDataOffStatus")), m_r_3gppPSDataOffStatus));
    }
    if(m_SponsorIdentityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sponsorIdentity")), m_SponsorIdentity));
    }
    if(m_ApplicationserviceProviderIdentityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("applicationserviceProviderIdentity")), m_ApplicationserviceProviderIdentity));
    }
    if(m_ChargingRuleBaseNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chargingRuleBaseName")), m_ChargingRuleBaseName));
    }
    if(m_MAPDUSteeringFunctionalityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mAPDUSteeringFunctionality")), m_MAPDUSteeringFunctionality));
    }
    if(m_MAPDUSteeringModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mAPDUSteeringMode")), m_MAPDUSteeringMode));
    }
}

bool PDUContainerInformation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("timeofFirstUsage"))))
    {
        utility::datetime refVal_setTimeofFirstUsage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timeofFirstUsage"))), refVal_setTimeofFirstUsage );
        setTimeofFirstUsage(refVal_setTimeofFirstUsage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timeofLastUsage"))))
    {
        utility::datetime refVal_setTimeofLastUsage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timeofLastUsage"))), refVal_setTimeofLastUsage );
        setTimeofLastUsage(refVal_setTimeofLastUsage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("qoSInformation"))))
    {
        std::shared_ptr<QosData> refVal_setQoSInformation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("qoSInformation"))), refVal_setQoSInformation );
        setQoSInformation(refVal_setQoSInformation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("qoSCharacteristics"))))
    {
        std::shared_ptr<QosCharacteristics> refVal_setQoSCharacteristics;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("qoSCharacteristics"))), refVal_setQoSCharacteristics );
        setQoSCharacteristics(refVal_setQoSCharacteristics);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("aFCorrelationInformation"))))
    {
        utility::string_t refVal_setAFCorrelationInformation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("aFCorrelationInformation"))), refVal_setAFCorrelationInformation );
        setAFCorrelationInformation(refVal_setAFCorrelationInformation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userLocationInformation"))))
    {
        std::shared_ptr<UserLocation> refVal_setUserLocationInformation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userLocationInformation"))), refVal_setUserLocationInformation );
        setUserLocationInformation(refVal_setUserLocationInformation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uetimeZone"))))
    {
        utility::string_t refVal_setUetimeZone;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uetimeZone"))), refVal_setUetimeZone );
        setUetimeZone(refVal_setUetimeZone);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rATType"))))
    {
        std::shared_ptr<RatType> refVal_setRATType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rATType"))), refVal_setRATType );
        setRATType(refVal_setRATType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("servingNodeID"))))
    {
        std::vector<std::shared_ptr<ServingNetworkFunctionID>> refVal_setServingNodeID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("servingNodeID"))), refVal_setServingNodeID );
        setServingNodeID(refVal_setServingNodeID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("presenceReportingAreaInformation"))))
    {
        std::map<utility::string_t, std::shared_ptr<PresenceInfo>> refVal_setPresenceReportingAreaInformation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("presenceReportingAreaInformation"))), refVal_setPresenceReportingAreaInformation );
        setPresenceReportingAreaInformation(refVal_setPresenceReportingAreaInformation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("3gppPSDataOffStatus"))))
    {
        std::shared_ptr<r_3GPPPSDataOffStatus> refVal_setR3gppPSDataOffStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("3gppPSDataOffStatus"))), refVal_setR3gppPSDataOffStatus );
        setR3gppPSDataOffStatus(refVal_setR3gppPSDataOffStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sponsorIdentity"))))
    {
        utility::string_t refVal_setSponsorIdentity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sponsorIdentity"))), refVal_setSponsorIdentity );
        setSponsorIdentity(refVal_setSponsorIdentity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("applicationserviceProviderIdentity"))))
    {
        utility::string_t refVal_setApplicationserviceProviderIdentity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("applicationserviceProviderIdentity"))), refVal_setApplicationserviceProviderIdentity );
        setApplicationserviceProviderIdentity(refVal_setApplicationserviceProviderIdentity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("chargingRuleBaseName"))))
    {
        utility::string_t refVal_setChargingRuleBaseName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chargingRuleBaseName"))), refVal_setChargingRuleBaseName );
        setChargingRuleBaseName(refVal_setChargingRuleBaseName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mAPDUSteeringFunctionality"))))
    {
        std::shared_ptr<SteeringFunctionality> refVal_setMAPDUSteeringFunctionality;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mAPDUSteeringFunctionality"))), refVal_setMAPDUSteeringFunctionality );
        setMAPDUSteeringFunctionality(refVal_setMAPDUSteeringFunctionality);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mAPDUSteeringMode"))))
    {
        std::shared_ptr<SteeringMode> refVal_setMAPDUSteeringMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mAPDUSteeringMode"))), refVal_setMAPDUSteeringMode );
        setMAPDUSteeringMode(refVal_setMAPDUSteeringMode);
    }
    return ok;
}

utility::datetime PDUContainerInformation::getTimeofFirstUsage() const
{
    return m_TimeofFirstUsage;
}

void PDUContainerInformation::setTimeofFirstUsage(const utility::datetime& value)
{
    m_TimeofFirstUsage = value;
    m_TimeofFirstUsageIsSet = true;
}

bool PDUContainerInformation::timeofFirstUsageIsSet() const
{
    return m_TimeofFirstUsageIsSet;
}

void PDUContainerInformation::unsetTimeofFirstUsage()
{
    m_TimeofFirstUsageIsSet = false;
}
utility::datetime PDUContainerInformation::getTimeofLastUsage() const
{
    return m_TimeofLastUsage;
}

void PDUContainerInformation::setTimeofLastUsage(const utility::datetime& value)
{
    m_TimeofLastUsage = value;
    m_TimeofLastUsageIsSet = true;
}

bool PDUContainerInformation::timeofLastUsageIsSet() const
{
    return m_TimeofLastUsageIsSet;
}

void PDUContainerInformation::unsetTimeofLastUsage()
{
    m_TimeofLastUsageIsSet = false;
}
std::shared_ptr<QosData> PDUContainerInformation::getQoSInformation() const
{
    return m_QoSInformation;
}

void PDUContainerInformation::setQoSInformation(const std::shared_ptr<QosData>& value)
{
    m_QoSInformation = value;
    m_QoSInformationIsSet = true;
}

bool PDUContainerInformation::qoSInformationIsSet() const
{
    return m_QoSInformationIsSet;
}

void PDUContainerInformation::unsetQoSInformation()
{
    m_QoSInformationIsSet = false;
}
std::shared_ptr<QosCharacteristics> PDUContainerInformation::getQoSCharacteristics() const
{
    return m_QoSCharacteristics;
}

void PDUContainerInformation::setQoSCharacteristics(const std::shared_ptr<QosCharacteristics>& value)
{
    m_QoSCharacteristics = value;
    m_QoSCharacteristicsIsSet = true;
}

bool PDUContainerInformation::qoSCharacteristicsIsSet() const
{
    return m_QoSCharacteristicsIsSet;
}

void PDUContainerInformation::unsetQoSCharacteristics()
{
    m_QoSCharacteristicsIsSet = false;
}
utility::string_t PDUContainerInformation::getAFCorrelationInformation() const
{
    return m_AFCorrelationInformation;
}

void PDUContainerInformation::setAFCorrelationInformation(const utility::string_t& value)
{
    m_AFCorrelationInformation = value;
    m_AFCorrelationInformationIsSet = true;
}

bool PDUContainerInformation::aFCorrelationInformationIsSet() const
{
    return m_AFCorrelationInformationIsSet;
}

void PDUContainerInformation::unsetAFCorrelationInformation()
{
    m_AFCorrelationInformationIsSet = false;
}
std::shared_ptr<UserLocation> PDUContainerInformation::getUserLocationInformation() const
{
    return m_UserLocationInformation;
}

void PDUContainerInformation::setUserLocationInformation(const std::shared_ptr<UserLocation>& value)
{
    m_UserLocationInformation = value;
    m_UserLocationInformationIsSet = true;
}

bool PDUContainerInformation::userLocationInformationIsSet() const
{
    return m_UserLocationInformationIsSet;
}

void PDUContainerInformation::unsetUserLocationInformation()
{
    m_UserLocationInformationIsSet = false;
}
utility::string_t PDUContainerInformation::getUetimeZone() const
{
    return m_UetimeZone;
}

void PDUContainerInformation::setUetimeZone(const utility::string_t& value)
{
    m_UetimeZone = value;
    m_UetimeZoneIsSet = true;
}

bool PDUContainerInformation::uetimeZoneIsSet() const
{
    return m_UetimeZoneIsSet;
}

void PDUContainerInformation::unsetUetimeZone()
{
    m_UetimeZoneIsSet = false;
}
std::shared_ptr<RatType> PDUContainerInformation::getRATType() const
{
    return m_RATType;
}

void PDUContainerInformation::setRATType(const std::shared_ptr<RatType>& value)
{
    m_RATType = value;
    m_RATTypeIsSet = true;
}

bool PDUContainerInformation::rATTypeIsSet() const
{
    return m_RATTypeIsSet;
}

void PDUContainerInformation::unsetRATType()
{
    m_RATTypeIsSet = false;
}
std::vector<std::shared_ptr<ServingNetworkFunctionID>>& PDUContainerInformation::getServingNodeID()
{
    return m_ServingNodeID;
}

void PDUContainerInformation::setServingNodeID(const std::vector<std::shared_ptr<ServingNetworkFunctionID>>& value)
{
    m_ServingNodeID = value;
    m_ServingNodeIDIsSet = true;
}

bool PDUContainerInformation::servingNodeIDIsSet() const
{
    return m_ServingNodeIDIsSet;
}

void PDUContainerInformation::unsetServingNodeID()
{
    m_ServingNodeIDIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<PresenceInfo>>& PDUContainerInformation::getPresenceReportingAreaInformation()
{
    return m_PresenceReportingAreaInformation;
}

void PDUContainerInformation::setPresenceReportingAreaInformation(const std::map<utility::string_t, std::shared_ptr<PresenceInfo>>& value)
{
    m_PresenceReportingAreaInformation = value;
    m_PresenceReportingAreaInformationIsSet = true;
}

bool PDUContainerInformation::presenceReportingAreaInformationIsSet() const
{
    return m_PresenceReportingAreaInformationIsSet;
}

void PDUContainerInformation::unsetPresenceReportingAreaInformation()
{
    m_PresenceReportingAreaInformationIsSet = false;
}
std::shared_ptr<r_3GPPPSDataOffStatus> PDUContainerInformation::getR3gppPSDataOffStatus() const
{
    return m_r_3gppPSDataOffStatus;
}

void PDUContainerInformation::setR3gppPSDataOffStatus(const std::shared_ptr<r_3GPPPSDataOffStatus>& value)
{
    m_r_3gppPSDataOffStatus = value;
    m_r_3gppPSDataOffStatusIsSet = true;
}

bool PDUContainerInformation::r3gppPSDataOffStatusIsSet() const
{
    return m_r_3gppPSDataOffStatusIsSet;
}

void PDUContainerInformation::unsetr_3gppPSDataOffStatus()
{
    m_r_3gppPSDataOffStatusIsSet = false;
}
utility::string_t PDUContainerInformation::getSponsorIdentity() const
{
    return m_SponsorIdentity;
}

void PDUContainerInformation::setSponsorIdentity(const utility::string_t& value)
{
    m_SponsorIdentity = value;
    m_SponsorIdentityIsSet = true;
}

bool PDUContainerInformation::sponsorIdentityIsSet() const
{
    return m_SponsorIdentityIsSet;
}

void PDUContainerInformation::unsetSponsorIdentity()
{
    m_SponsorIdentityIsSet = false;
}
utility::string_t PDUContainerInformation::getApplicationserviceProviderIdentity() const
{
    return m_ApplicationserviceProviderIdentity;
}

void PDUContainerInformation::setApplicationserviceProviderIdentity(const utility::string_t& value)
{
    m_ApplicationserviceProviderIdentity = value;
    m_ApplicationserviceProviderIdentityIsSet = true;
}

bool PDUContainerInformation::applicationserviceProviderIdentityIsSet() const
{
    return m_ApplicationserviceProviderIdentityIsSet;
}

void PDUContainerInformation::unsetApplicationserviceProviderIdentity()
{
    m_ApplicationserviceProviderIdentityIsSet = false;
}
utility::string_t PDUContainerInformation::getChargingRuleBaseName() const
{
    return m_ChargingRuleBaseName;
}

void PDUContainerInformation::setChargingRuleBaseName(const utility::string_t& value)
{
    m_ChargingRuleBaseName = value;
    m_ChargingRuleBaseNameIsSet = true;
}

bool PDUContainerInformation::chargingRuleBaseNameIsSet() const
{
    return m_ChargingRuleBaseNameIsSet;
}

void PDUContainerInformation::unsetChargingRuleBaseName()
{
    m_ChargingRuleBaseNameIsSet = false;
}
std::shared_ptr<SteeringFunctionality> PDUContainerInformation::getMAPDUSteeringFunctionality() const
{
    return m_MAPDUSteeringFunctionality;
}

void PDUContainerInformation::setMAPDUSteeringFunctionality(const std::shared_ptr<SteeringFunctionality>& value)
{
    m_MAPDUSteeringFunctionality = value;
    m_MAPDUSteeringFunctionalityIsSet = true;
}

bool PDUContainerInformation::mAPDUSteeringFunctionalityIsSet() const
{
    return m_MAPDUSteeringFunctionalityIsSet;
}

void PDUContainerInformation::unsetMAPDUSteeringFunctionality()
{
    m_MAPDUSteeringFunctionalityIsSet = false;
}
std::shared_ptr<SteeringMode> PDUContainerInformation::getMAPDUSteeringMode() const
{
    return m_MAPDUSteeringMode;
}

void PDUContainerInformation::setMAPDUSteeringMode(const std::shared_ptr<SteeringMode>& value)
{
    m_MAPDUSteeringMode = value;
    m_MAPDUSteeringModeIsSet = true;
}

bool PDUContainerInformation::mAPDUSteeringModeIsSet() const
{
    return m_MAPDUSteeringModeIsSet;
}

void PDUContainerInformation::unsetMAPDUSteeringMode()
{
    m_MAPDUSteeringModeIsSet = false;
}
}
}
}
}


