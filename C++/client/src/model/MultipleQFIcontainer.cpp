/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/MultipleQFIcontainer.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



MultipleQFIcontainer::MultipleQFIcontainer()
{
    m_TriggersIsSet = false;
    m_TriggerTimestamp = utility::datetime();
    m_TriggerTimestampIsSet = false;
    m_Time = 0;
    m_TimeIsSet = false;
    m_TotalVolume = 0;
    m_TotalVolumeIsSet = false;
    m_UplinkVolume = 0;
    m_UplinkVolumeIsSet = false;
    m_LocalSequenceNumber = 0;
    m_LocalSequenceNumberIsSet = false;
    m_QFIContainerInformationIsSet = false;
}

MultipleQFIcontainer::~MultipleQFIcontainer()
{
}

void MultipleQFIcontainer::validate()
{
    // TODO: implement validation
}

web::json::value MultipleQFIcontainer::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TriggersIsSet)
    {
        val[utility::conversions::to_string_t(U("triggers"))] = ModelBase::toJson(m_Triggers);
    }
    if(m_TriggerTimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("triggerTimestamp"))] = ModelBase::toJson(m_TriggerTimestamp);
    }
    if(m_TimeIsSet)
    {
        val[utility::conversions::to_string_t(U("time"))] = ModelBase::toJson(m_Time);
    }
    if(m_TotalVolumeIsSet)
    {
        val[utility::conversions::to_string_t(U("totalVolume"))] = ModelBase::toJson(m_TotalVolume);
    }
    if(m_UplinkVolumeIsSet)
    {
        val[utility::conversions::to_string_t(U("uplinkVolume"))] = ModelBase::toJson(m_UplinkVolume);
    }
    if(m_LocalSequenceNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("localSequenceNumber"))] = ModelBase::toJson(m_LocalSequenceNumber);
    }
    if(m_QFIContainerInformationIsSet)
    {
        val[utility::conversions::to_string_t(U("qFIContainerInformation"))] = ModelBase::toJson(m_QFIContainerInformation);
    }

    return val;
}

bool MultipleQFIcontainer::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("triggers"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("triggers")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Trigger>> refVal_setTriggers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTriggers);
            setTriggers(refVal_setTriggers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("triggerTimestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("triggerTimestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTriggerTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTriggerTimestamp);
            setTriggerTimestamp(refVal_setTriggerTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTime);
            setTime(refVal_setTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("totalVolume"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("totalVolume")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotalVolume;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalVolume);
            setTotalVolume(refVal_setTotalVolume);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uplinkVolume"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uplinkVolume")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUplinkVolume;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUplinkVolume);
            setUplinkVolume(refVal_setUplinkVolume);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("localSequenceNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("localSequenceNumber")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLocalSequenceNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLocalSequenceNumber);
            setLocalSequenceNumber(refVal_setLocalSequenceNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("qFIContainerInformation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("qFIContainerInformation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<QFIContainerInformation> refVal_setQFIContainerInformation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQFIContainerInformation);
            setQFIContainerInformation(refVal_setQFIContainerInformation);
        }
    }
    return ok;
}

void MultipleQFIcontainer::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TriggersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("triggers")), m_Triggers));
    }
    if(m_TriggerTimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("triggerTimestamp")), m_TriggerTimestamp));
    }
    if(m_TimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time")), m_Time));
    }
    if(m_TotalVolumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("totalVolume")), m_TotalVolume));
    }
    if(m_UplinkVolumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uplinkVolume")), m_UplinkVolume));
    }
    if(m_LocalSequenceNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("localSequenceNumber")), m_LocalSequenceNumber));
    }
    if(m_QFIContainerInformationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("qFIContainerInformation")), m_QFIContainerInformation));
    }
}

bool MultipleQFIcontainer::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("triggers"))))
    {
        std::vector<std::shared_ptr<Trigger>> refVal_setTriggers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("triggers"))), refVal_setTriggers );
        setTriggers(refVal_setTriggers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("triggerTimestamp"))))
    {
        utility::datetime refVal_setTriggerTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("triggerTimestamp"))), refVal_setTriggerTimestamp );
        setTriggerTimestamp(refVal_setTriggerTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time"))))
    {
        int32_t refVal_setTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time"))), refVal_setTime );
        setTime(refVal_setTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("totalVolume"))))
    {
        int32_t refVal_setTotalVolume;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("totalVolume"))), refVal_setTotalVolume );
        setTotalVolume(refVal_setTotalVolume);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uplinkVolume"))))
    {
        int32_t refVal_setUplinkVolume;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uplinkVolume"))), refVal_setUplinkVolume );
        setUplinkVolume(refVal_setUplinkVolume);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("localSequenceNumber"))))
    {
        int32_t refVal_setLocalSequenceNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("localSequenceNumber"))), refVal_setLocalSequenceNumber );
        setLocalSequenceNumber(refVal_setLocalSequenceNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("qFIContainerInformation"))))
    {
        std::shared_ptr<QFIContainerInformation> refVal_setQFIContainerInformation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("qFIContainerInformation"))), refVal_setQFIContainerInformation );
        setQFIContainerInformation(refVal_setQFIContainerInformation);
    }
    return ok;
}

std::vector<std::shared_ptr<Trigger>>& MultipleQFIcontainer::getTriggers()
{
    return m_Triggers;
}

void MultipleQFIcontainer::setTriggers(const std::vector<std::shared_ptr<Trigger>>& value)
{
    m_Triggers = value;
    m_TriggersIsSet = true;
}

bool MultipleQFIcontainer::triggersIsSet() const
{
    return m_TriggersIsSet;
}

void MultipleQFIcontainer::unsetTriggers()
{
    m_TriggersIsSet = false;
}
utility::datetime MultipleQFIcontainer::getTriggerTimestamp() const
{
    return m_TriggerTimestamp;
}

void MultipleQFIcontainer::setTriggerTimestamp(const utility::datetime& value)
{
    m_TriggerTimestamp = value;
    m_TriggerTimestampIsSet = true;
}

bool MultipleQFIcontainer::triggerTimestampIsSet() const
{
    return m_TriggerTimestampIsSet;
}

void MultipleQFIcontainer::unsetTriggerTimestamp()
{
    m_TriggerTimestampIsSet = false;
}
int32_t MultipleQFIcontainer::getTime() const
{
    return m_Time;
}

void MultipleQFIcontainer::setTime(int32_t value)
{
    m_Time = value;
    m_TimeIsSet = true;
}

bool MultipleQFIcontainer::timeIsSet() const
{
    return m_TimeIsSet;
}

void MultipleQFIcontainer::unsetTime()
{
    m_TimeIsSet = false;
}
int32_t MultipleQFIcontainer::getTotalVolume() const
{
    return m_TotalVolume;
}

void MultipleQFIcontainer::setTotalVolume(int32_t value)
{
    m_TotalVolume = value;
    m_TotalVolumeIsSet = true;
}

bool MultipleQFIcontainer::totalVolumeIsSet() const
{
    return m_TotalVolumeIsSet;
}

void MultipleQFIcontainer::unsetTotalVolume()
{
    m_TotalVolumeIsSet = false;
}
int32_t MultipleQFIcontainer::getUplinkVolume() const
{
    return m_UplinkVolume;
}

void MultipleQFIcontainer::setUplinkVolume(int32_t value)
{
    m_UplinkVolume = value;
    m_UplinkVolumeIsSet = true;
}

bool MultipleQFIcontainer::uplinkVolumeIsSet() const
{
    return m_UplinkVolumeIsSet;
}

void MultipleQFIcontainer::unsetUplinkVolume()
{
    m_UplinkVolumeIsSet = false;
}
int32_t MultipleQFIcontainer::getLocalSequenceNumber() const
{
    return m_LocalSequenceNumber;
}

void MultipleQFIcontainer::setLocalSequenceNumber(int32_t value)
{
    m_LocalSequenceNumber = value;
    m_LocalSequenceNumberIsSet = true;
}

bool MultipleQFIcontainer::localSequenceNumberIsSet() const
{
    return m_LocalSequenceNumberIsSet;
}

void MultipleQFIcontainer::unsetLocalSequenceNumber()
{
    m_LocalSequenceNumberIsSet = false;
}
std::shared_ptr<QFIContainerInformation> MultipleQFIcontainer::getQFIContainerInformation() const
{
    return m_QFIContainerInformation;
}

void MultipleQFIcontainer::setQFIContainerInformation(const std::shared_ptr<QFIContainerInformation>& value)
{
    m_QFIContainerInformation = value;
    m_QFIContainerInformationIsSet = true;
}

bool MultipleQFIcontainer::qFIContainerInformationIsSet() const
{
    return m_QFIContainerInformationIsSet;
}

void MultipleQFIcontainer::unsetQFIContainerInformation()
{
    m_QFIContainerInformationIsSet = false;
}
}
}
}
}


