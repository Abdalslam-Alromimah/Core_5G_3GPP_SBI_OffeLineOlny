/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UtraLocation.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



UtraLocation::UtraLocation()
{
    m_CgiIsSet = false;
    m_SaiIsSet = false;
    m_LaiIsSet = false;
    m_RaiIsSet = false;
    m_AgeOfLocationInformation = 0;
    m_AgeOfLocationInformationIsSet = false;
    m_UeLocationTimestamp = utility::datetime();
    m_UeLocationTimestampIsSet = false;
    m_GeographicalInformation = utility::conversions::to_string_t("");
    m_GeographicalInformationIsSet = false;
    m_GeodeticInformation = utility::conversions::to_string_t("");
    m_GeodeticInformationIsSet = false;
}

UtraLocation::~UtraLocation()
{
}

void UtraLocation::validate()
{
    // TODO: implement validation
}

web::json::value UtraLocation::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CgiIsSet)
    {
        val[utility::conversions::to_string_t(U("cgi"))] = ModelBase::toJson(m_Cgi);
    }
    if(m_SaiIsSet)
    {
        val[utility::conversions::to_string_t(U("sai"))] = ModelBase::toJson(m_Sai);
    }
    if(m_LaiIsSet)
    {
        val[utility::conversions::to_string_t(U("lai"))] = ModelBase::toJson(m_Lai);
    }
    if(m_RaiIsSet)
    {
        val[utility::conversions::to_string_t(U("rai"))] = ModelBase::toJson(m_Rai);
    }
    if(m_AgeOfLocationInformationIsSet)
    {
        val[utility::conversions::to_string_t(U("ageOfLocationInformation"))] = ModelBase::toJson(m_AgeOfLocationInformation);
    }
    if(m_UeLocationTimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("ueLocationTimestamp"))] = ModelBase::toJson(m_UeLocationTimestamp);
    }
    if(m_GeographicalInformationIsSet)
    {
        val[utility::conversions::to_string_t(U("geographicalInformation"))] = ModelBase::toJson(m_GeographicalInformation);
    }
    if(m_GeodeticInformationIsSet)
    {
        val[utility::conversions::to_string_t(U("geodeticInformation"))] = ModelBase::toJson(m_GeodeticInformation);
    }

    return val;
}

bool UtraLocation::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("cgi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cgi")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CellGlobalId> refVal_setCgi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCgi);
            setCgi(refVal_setCgi);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sai"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sai")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ServiceAreaId> refVal_setSai;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSai);
            setSai(refVal_setSai);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lai"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lai")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LocationAreaId> refVal_setLai;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLai);
            setLai(refVal_setLai);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rai"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rai")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RoutingAreaId> refVal_setRai;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRai);
            setRai(refVal_setRai);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ageOfLocationInformation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ageOfLocationInformation")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAgeOfLocationInformation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAgeOfLocationInformation);
            setAgeOfLocationInformation(refVal_setAgeOfLocationInformation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ueLocationTimestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ueLocationTimestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUeLocationTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUeLocationTimestamp);
            setUeLocationTimestamp(refVal_setUeLocationTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("geographicalInformation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("geographicalInformation")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGeographicalInformation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGeographicalInformation);
            setGeographicalInformation(refVal_setGeographicalInformation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("geodeticInformation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("geodeticInformation")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGeodeticInformation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGeodeticInformation);
            setGeodeticInformation(refVal_setGeodeticInformation);
        }
    }
    return ok;
}

void UtraLocation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CgiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cgi")), m_Cgi));
    }
    if(m_SaiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sai")), m_Sai));
    }
    if(m_LaiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lai")), m_Lai));
    }
    if(m_RaiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rai")), m_Rai));
    }
    if(m_AgeOfLocationInformationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ageOfLocationInformation")), m_AgeOfLocationInformation));
    }
    if(m_UeLocationTimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ueLocationTimestamp")), m_UeLocationTimestamp));
    }
    if(m_GeographicalInformationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("geographicalInformation")), m_GeographicalInformation));
    }
    if(m_GeodeticInformationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("geodeticInformation")), m_GeodeticInformation));
    }
}

bool UtraLocation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("cgi"))))
    {
        std::shared_ptr<CellGlobalId> refVal_setCgi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cgi"))), refVal_setCgi );
        setCgi(refVal_setCgi);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sai"))))
    {
        std::shared_ptr<ServiceAreaId> refVal_setSai;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sai"))), refVal_setSai );
        setSai(refVal_setSai);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lai"))))
    {
        std::shared_ptr<LocationAreaId> refVal_setLai;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lai"))), refVal_setLai );
        setLai(refVal_setLai);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rai"))))
    {
        std::shared_ptr<RoutingAreaId> refVal_setRai;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rai"))), refVal_setRai );
        setRai(refVal_setRai);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ageOfLocationInformation"))))
    {
        int32_t refVal_setAgeOfLocationInformation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ageOfLocationInformation"))), refVal_setAgeOfLocationInformation );
        setAgeOfLocationInformation(refVal_setAgeOfLocationInformation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ueLocationTimestamp"))))
    {
        utility::datetime refVal_setUeLocationTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ueLocationTimestamp"))), refVal_setUeLocationTimestamp );
        setUeLocationTimestamp(refVal_setUeLocationTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("geographicalInformation"))))
    {
        utility::string_t refVal_setGeographicalInformation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("geographicalInformation"))), refVal_setGeographicalInformation );
        setGeographicalInformation(refVal_setGeographicalInformation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("geodeticInformation"))))
    {
        utility::string_t refVal_setGeodeticInformation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("geodeticInformation"))), refVal_setGeodeticInformation );
        setGeodeticInformation(refVal_setGeodeticInformation);
    }
    return ok;
}

std::shared_ptr<CellGlobalId> UtraLocation::getCgi() const
{
    return m_Cgi;
}

void UtraLocation::setCgi(const std::shared_ptr<CellGlobalId>& value)
{
    m_Cgi = value;
    m_CgiIsSet = true;
}

bool UtraLocation::cgiIsSet() const
{
    return m_CgiIsSet;
}

void UtraLocation::unsetCgi()
{
    m_CgiIsSet = false;
}
std::shared_ptr<ServiceAreaId> UtraLocation::getSai() const
{
    return m_Sai;
}

void UtraLocation::setSai(const std::shared_ptr<ServiceAreaId>& value)
{
    m_Sai = value;
    m_SaiIsSet = true;
}

bool UtraLocation::saiIsSet() const
{
    return m_SaiIsSet;
}

void UtraLocation::unsetSai()
{
    m_SaiIsSet = false;
}
std::shared_ptr<LocationAreaId> UtraLocation::getLai() const
{
    return m_Lai;
}

void UtraLocation::setLai(const std::shared_ptr<LocationAreaId>& value)
{
    m_Lai = value;
    m_LaiIsSet = true;
}

bool UtraLocation::laiIsSet() const
{
    return m_LaiIsSet;
}

void UtraLocation::unsetLai()
{
    m_LaiIsSet = false;
}
std::shared_ptr<RoutingAreaId> UtraLocation::getRai() const
{
    return m_Rai;
}

void UtraLocation::setRai(const std::shared_ptr<RoutingAreaId>& value)
{
    m_Rai = value;
    m_RaiIsSet = true;
}

bool UtraLocation::raiIsSet() const
{
    return m_RaiIsSet;
}

void UtraLocation::unsetRai()
{
    m_RaiIsSet = false;
}
int32_t UtraLocation::getAgeOfLocationInformation() const
{
    return m_AgeOfLocationInformation;
}

void UtraLocation::setAgeOfLocationInformation(int32_t value)
{
    m_AgeOfLocationInformation = value;
    m_AgeOfLocationInformationIsSet = true;
}

bool UtraLocation::ageOfLocationInformationIsSet() const
{
    return m_AgeOfLocationInformationIsSet;
}

void UtraLocation::unsetAgeOfLocationInformation()
{
    m_AgeOfLocationInformationIsSet = false;
}
utility::datetime UtraLocation::getUeLocationTimestamp() const
{
    return m_UeLocationTimestamp;
}

void UtraLocation::setUeLocationTimestamp(const utility::datetime& value)
{
    m_UeLocationTimestamp = value;
    m_UeLocationTimestampIsSet = true;
}

bool UtraLocation::ueLocationTimestampIsSet() const
{
    return m_UeLocationTimestampIsSet;
}

void UtraLocation::unsetUeLocationTimestamp()
{
    m_UeLocationTimestampIsSet = false;
}
utility::string_t UtraLocation::getGeographicalInformation() const
{
    return m_GeographicalInformation;
}

void UtraLocation::setGeographicalInformation(const utility::string_t& value)
{
    m_GeographicalInformation = value;
    m_GeographicalInformationIsSet = true;
}

bool UtraLocation::geographicalInformationIsSet() const
{
    return m_GeographicalInformationIsSet;
}

void UtraLocation::unsetGeographicalInformation()
{
    m_GeographicalInformationIsSet = false;
}
utility::string_t UtraLocation::getGeodeticInformation() const
{
    return m_GeodeticInformation;
}

void UtraLocation::setGeodeticInformation(const utility::string_t& value)
{
    m_GeodeticInformation = value;
    m_GeodeticInformationIsSet = true;
}

bool UtraLocation::geodeticInformationIsSet() const
{
    return m_GeodeticInformationIsSet;
}

void UtraLocation::unsetGeodeticInformation()
{
    m_GeodeticInformationIsSet = false;
}
}
}
}
}


