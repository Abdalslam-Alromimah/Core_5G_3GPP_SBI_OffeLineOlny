/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AtsssCapability.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



AtsssCapability::AtsssCapability()
{
    m_AtsssLL = false;
    m_AtsssLLIsSet = false;
    m_Mptcp = false;
    m_MptcpIsSet = false;
    m_Mpquic = false;
    m_MpquicIsSet = false;
    m_RttWithoutPmf = false;
    m_RttWithoutPmfIsSet = false;
}

AtsssCapability::~AtsssCapability()
{
}

void AtsssCapability::validate()
{
    // TODO: implement validation
}

web::json::value AtsssCapability::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AtsssLLIsSet)
    {
        val[utility::conversions::to_string_t(U("atsssLL"))] = ModelBase::toJson(m_AtsssLL);
    }
    if(m_MptcpIsSet)
    {
        val[utility::conversions::to_string_t(U("mptcp"))] = ModelBase::toJson(m_Mptcp);
    }
    if(m_MpquicIsSet)
    {
        val[utility::conversions::to_string_t(U("mpquic"))] = ModelBase::toJson(m_Mpquic);
    }
    if(m_RttWithoutPmfIsSet)
    {
        val[utility::conversions::to_string_t(U("rttWithoutPmf"))] = ModelBase::toJson(m_RttWithoutPmf);
    }

    return val;
}

bool AtsssCapability::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("atsssLL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("atsssLL")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAtsssLL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAtsssLL);
            setAtsssLL(refVal_setAtsssLL);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mptcp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mptcp")));
        if(!fieldValue.is_null())
        {
            bool refVal_setMptcp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMptcp);
            setMptcp(refVal_setMptcp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mpquic"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mpquic")));
        if(!fieldValue.is_null())
        {
            bool refVal_setMpquic;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMpquic);
            setMpquic(refVal_setMpquic);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rttWithoutPmf"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rttWithoutPmf")));
        if(!fieldValue.is_null())
        {
            bool refVal_setRttWithoutPmf;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRttWithoutPmf);
            setRttWithoutPmf(refVal_setRttWithoutPmf);
        }
    }
    return ok;
}

void AtsssCapability::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AtsssLLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("atsssLL")), m_AtsssLL));
    }
    if(m_MptcpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mptcp")), m_Mptcp));
    }
    if(m_MpquicIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mpquic")), m_Mpquic));
    }
    if(m_RttWithoutPmfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rttWithoutPmf")), m_RttWithoutPmf));
    }
}

bool AtsssCapability::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("atsssLL"))))
    {
        bool refVal_setAtsssLL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("atsssLL"))), refVal_setAtsssLL );
        setAtsssLL(refVal_setAtsssLL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mptcp"))))
    {
        bool refVal_setMptcp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mptcp"))), refVal_setMptcp );
        setMptcp(refVal_setMptcp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mpquic"))))
    {
        bool refVal_setMpquic;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mpquic"))), refVal_setMpquic );
        setMpquic(refVal_setMpquic);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rttWithoutPmf"))))
    {
        bool refVal_setRttWithoutPmf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rttWithoutPmf"))), refVal_setRttWithoutPmf );
        setRttWithoutPmf(refVal_setRttWithoutPmf);
    }
    return ok;
}

bool AtsssCapability::isAtsssLL() const
{
    return m_AtsssLL;
}

void AtsssCapability::setAtsssLL(bool value)
{
    m_AtsssLL = value;
    m_AtsssLLIsSet = true;
}

bool AtsssCapability::atsssLLIsSet() const
{
    return m_AtsssLLIsSet;
}

void AtsssCapability::unsetAtsssLL()
{
    m_AtsssLLIsSet = false;
}
bool AtsssCapability::isMptcp() const
{
    return m_Mptcp;
}

void AtsssCapability::setMptcp(bool value)
{
    m_Mptcp = value;
    m_MptcpIsSet = true;
}

bool AtsssCapability::mptcpIsSet() const
{
    return m_MptcpIsSet;
}

void AtsssCapability::unsetMptcp()
{
    m_MptcpIsSet = false;
}
bool AtsssCapability::isMpquic() const
{
    return m_Mpquic;
}

void AtsssCapability::setMpquic(bool value)
{
    m_Mpquic = value;
    m_MpquicIsSet = true;
}

bool AtsssCapability::mpquicIsSet() const
{
    return m_MpquicIsSet;
}

void AtsssCapability::unsetMpquic()
{
    m_MpquicIsSet = false;
}
bool AtsssCapability::isRttWithoutPmf() const
{
    return m_RttWithoutPmf;
}

void AtsssCapability::setRttWithoutPmf(bool value)
{
    m_RttWithoutPmf = value;
    m_RttWithoutPmfIsSet = true;
}

bool AtsssCapability::rttWithoutPmfIsSet() const
{
    return m_RttWithoutPmfIsSet;
}

void AtsssCapability::unsetRttWithoutPmf()
{
    m_RttWithoutPmfIsSet = false;
}
}
}
}
}


