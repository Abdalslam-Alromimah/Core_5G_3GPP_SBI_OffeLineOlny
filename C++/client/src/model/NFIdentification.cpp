/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/NFIdentification.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



NFIdentification::NFIdentification()
{
    m_NFName = utility::conversions::to_string_t("");
    m_NFNameIsSet = false;
    m_NFIPv4Address = utility::conversions::to_string_t("");
    m_NFIPv4AddressIsSet = false;
    m_NFIPv6AddressIsSet = false;
    m_NFPLMNIDIsSet = false;
    m_NodeFunctionalityIsSet = false;
    m_NFFqdn = utility::conversions::to_string_t("");
    m_NFFqdnIsSet = false;
}

NFIdentification::~NFIdentification()
{
}

void NFIdentification::validate()
{
    // TODO: implement validation
}

web::json::value NFIdentification::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NFNameIsSet)
    {
        val[utility::conversions::to_string_t(U("nFName"))] = ModelBase::toJson(m_NFName);
    }
    if(m_NFIPv4AddressIsSet)
    {
        val[utility::conversions::to_string_t(U("nFIPv4Address"))] = ModelBase::toJson(m_NFIPv4Address);
    }
    if(m_NFIPv6AddressIsSet)
    {
        val[utility::conversions::to_string_t(U("nFIPv6Address"))] = ModelBase::toJson(m_NFIPv6Address);
    }
    if(m_NFPLMNIDIsSet)
    {
        val[utility::conversions::to_string_t(U("nFPLMNID"))] = ModelBase::toJson(m_NFPLMNID);
    }
    if(m_NodeFunctionalityIsSet)
    {
        val[utility::conversions::to_string_t(U("nodeFunctionality"))] = ModelBase::toJson(m_NodeFunctionality);
    }
    if(m_NFFqdnIsSet)
    {
        val[utility::conversions::to_string_t(U("nFFqdn"))] = ModelBase::toJson(m_NFFqdn);
    }

    return val;
}

bool NFIdentification::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("nFName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nFName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNFName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNFName);
            setNFName(refVal_setNFName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nFIPv4Address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nFIPv4Address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNFIPv4Address;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNFIPv4Address);
            setNFIPv4Address(refVal_setNFIPv4Address);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nFIPv6Address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nFIPv6Address")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Ipv6Addr> refVal_setNFIPv6Address;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNFIPv6Address);
            setNFIPv6Address(refVal_setNFIPv6Address);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nFPLMNID"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nFPLMNID")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PlmnId> refVal_setNFPLMNID;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNFPLMNID);
            setNFPLMNID(refVal_setNFPLMNID);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nodeFunctionality"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nodeFunctionality")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<NodeFunctionality> refVal_setNodeFunctionality;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNodeFunctionality);
            setNodeFunctionality(refVal_setNodeFunctionality);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nFFqdn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nFFqdn")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNFFqdn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNFFqdn);
            setNFFqdn(refVal_setNFFqdn);
        }
    }
    return ok;
}

void NFIdentification::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NFNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nFName")), m_NFName));
    }
    if(m_NFIPv4AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nFIPv4Address")), m_NFIPv4Address));
    }
    if(m_NFIPv6AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nFIPv6Address")), m_NFIPv6Address));
    }
    if(m_NFPLMNIDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nFPLMNID")), m_NFPLMNID));
    }
    if(m_NodeFunctionalityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nodeFunctionality")), m_NodeFunctionality));
    }
    if(m_NFFqdnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nFFqdn")), m_NFFqdn));
    }
}

bool NFIdentification::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("nFName"))))
    {
        utility::string_t refVal_setNFName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nFName"))), refVal_setNFName );
        setNFName(refVal_setNFName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nFIPv4Address"))))
    {
        utility::string_t refVal_setNFIPv4Address;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nFIPv4Address"))), refVal_setNFIPv4Address );
        setNFIPv4Address(refVal_setNFIPv4Address);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nFIPv6Address"))))
    {
        std::shared_ptr<Ipv6Addr> refVal_setNFIPv6Address;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nFIPv6Address"))), refVal_setNFIPv6Address );
        setNFIPv6Address(refVal_setNFIPv6Address);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nFPLMNID"))))
    {
        std::shared_ptr<PlmnId> refVal_setNFPLMNID;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nFPLMNID"))), refVal_setNFPLMNID );
        setNFPLMNID(refVal_setNFPLMNID);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nodeFunctionality"))))
    {
        std::shared_ptr<NodeFunctionality> refVal_setNodeFunctionality;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nodeFunctionality"))), refVal_setNodeFunctionality );
        setNodeFunctionality(refVal_setNodeFunctionality);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nFFqdn"))))
    {
        utility::string_t refVal_setNFFqdn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nFFqdn"))), refVal_setNFFqdn );
        setNFFqdn(refVal_setNFFqdn);
    }
    return ok;
}

utility::string_t NFIdentification::getNFName() const
{
    return m_NFName;
}

void NFIdentification::setNFName(const utility::string_t& value)
{
    m_NFName = value;
    m_NFNameIsSet = true;
}

bool NFIdentification::nFNameIsSet() const
{
    return m_NFNameIsSet;
}

void NFIdentification::unsetNFName()
{
    m_NFNameIsSet = false;
}
utility::string_t NFIdentification::getNFIPv4Address() const
{
    return m_NFIPv4Address;
}

void NFIdentification::setNFIPv4Address(const utility::string_t& value)
{
    m_NFIPv4Address = value;
    m_NFIPv4AddressIsSet = true;
}

bool NFIdentification::nFIPv4AddressIsSet() const
{
    return m_NFIPv4AddressIsSet;
}

void NFIdentification::unsetNFIPv4Address()
{
    m_NFIPv4AddressIsSet = false;
}
std::shared_ptr<Ipv6Addr> NFIdentification::getNFIPv6Address() const
{
    return m_NFIPv6Address;
}

void NFIdentification::setNFIPv6Address(const std::shared_ptr<Ipv6Addr>& value)
{
    m_NFIPv6Address = value;
    m_NFIPv6AddressIsSet = true;
}

bool NFIdentification::nFIPv6AddressIsSet() const
{
    return m_NFIPv6AddressIsSet;
}

void NFIdentification::unsetNFIPv6Address()
{
    m_NFIPv6AddressIsSet = false;
}
std::shared_ptr<PlmnId> NFIdentification::getNFPLMNID() const
{
    return m_NFPLMNID;
}

void NFIdentification::setNFPLMNID(const std::shared_ptr<PlmnId>& value)
{
    m_NFPLMNID = value;
    m_NFPLMNIDIsSet = true;
}

bool NFIdentification::nFPLMNIDIsSet() const
{
    return m_NFPLMNIDIsSet;
}

void NFIdentification::unsetNFPLMNID()
{
    m_NFPLMNIDIsSet = false;
}
std::shared_ptr<NodeFunctionality> NFIdentification::getNodeFunctionality() const
{
    return m_NodeFunctionality;
}

void NFIdentification::setNodeFunctionality(const std::shared_ptr<NodeFunctionality>& value)
{
    m_NodeFunctionality = value;
    m_NodeFunctionalityIsSet = true;
}

bool NFIdentification::nodeFunctionalityIsSet() const
{
    return m_NodeFunctionalityIsSet;
}

void NFIdentification::unsetNodeFunctionality()
{
    m_NodeFunctionalityIsSet = false;
}
utility::string_t NFIdentification::getNFFqdn() const
{
    return m_NFFqdn;
}

void NFIdentification::setNFFqdn(const utility::string_t& value)
{
    m_NFFqdn = value;
    m_NFFqdnIsSet = true;
}

bool NFIdentification::nFFqdnIsSet() const
{
    return m_NFFqdnIsSet;
}

void NFIdentification::unsetNFFqdn()
{
    m_NFFqdnIsSet = false;
}
}
}
}
}


