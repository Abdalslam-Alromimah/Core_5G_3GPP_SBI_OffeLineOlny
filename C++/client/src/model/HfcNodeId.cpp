/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/HfcNodeId.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



HfcNodeId::HfcNodeId()
{
    m_HfcNId = utility::conversions::to_string_t("");
    m_HfcNIdIsSet = false;
}

HfcNodeId::~HfcNodeId()
{
}

void HfcNodeId::validate()
{
    // TODO: implement validation
}

web::json::value HfcNodeId::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_HfcNIdIsSet)
    {
        val[utility::conversions::to_string_t(U("hfcNId"))] = ModelBase::toJson(m_HfcNId);
    }

    return val;
}

bool HfcNodeId::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("hfcNId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hfcNId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHfcNId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHfcNId);
            setHfcNId(refVal_setHfcNId);
        }
    }
    return ok;
}

void HfcNodeId::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_HfcNIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hfcNId")), m_HfcNId));
    }
}

bool HfcNodeId::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("hfcNId"))))
    {
        utility::string_t refVal_setHfcNId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hfcNId"))), refVal_setHfcNId );
        setHfcNId(refVal_setHfcNId);
    }
    return ok;
}

utility::string_t HfcNodeId::getHfcNId() const
{
    return m_HfcNId;
}

void HfcNodeId::setHfcNId(const utility::string_t& value)
{
    m_HfcNId = value;
    m_HfcNIdIsSet = true;
}

bool HfcNodeId::hfcNIdIsSet() const
{
    return m_HfcNIdIsSet;
}

void HfcNodeId::unsetHfcNId()
{
    m_HfcNIdIsSet = false;
}
}
}
}
}


