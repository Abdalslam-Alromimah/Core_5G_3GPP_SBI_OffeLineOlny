/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DefaultApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/ChargingDataRequest.h"
#include "CppRestOpenAPIClient/model/ChargingDataResponse.h"
#include "CppRestOpenAPIClient/model/ProblemDetails.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  DefaultApi 
{
public:

    explicit DefaultApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DefaultApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="offlineChargingDataRef">a unique identifier for a charging data resource in a PLMN</param>
    /// <param name="chargingDataRequest"></param>
    pplx::task<void> offlinechargingdataOfflineChargingDataRefReleasePost(
        utility::string_t offlineChargingDataRef,
        std::shared_ptr<ChargingDataRequest> chargingDataRequest
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="offlineChargingDataRef">a unique identifier for a charging data resource in a PLMN</param>
    /// <param name="chargingDataRequest"></param>
    pplx::task<std::shared_ptr<ChargingDataResponse>> offlinechargingdataOfflineChargingDataRefUpdatePost(
        utility::string_t offlineChargingDataRef,
        std::shared_ptr<ChargingDataRequest> chargingDataRequest
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="chargingDataRequest"></param>
    pplx::task<std::shared_ptr<ChargingDataResponse>> offlinechargingdataPost(
        std::shared_ptr<ChargingDataRequest> chargingDataRequest
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_ */

