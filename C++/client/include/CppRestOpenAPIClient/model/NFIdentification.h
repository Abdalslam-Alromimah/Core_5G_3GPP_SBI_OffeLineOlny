/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * NFIdentification.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_NFIdentification_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_NFIdentification_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Ipv6Addr.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/PlmnId.h"
#include "CppRestOpenAPIClient/model/NodeFunctionality.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class PlmnId;

/// <summary>
/// 
/// </summary>
class  NFIdentification
    : public ModelBase
{
public:
    NFIdentification();
    virtual ~NFIdentification();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// NFIdentification members

    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    utility::string_t getNFName() const;
    bool nFNameIsSet() const;
    void unsetNFName();

    void setNFName(const utility::string_t& value);

    /// <summary>
    /// String identifying a IPv4 address formatted in the &#39;dotted decimal&#39; notation as defined in RFC 1166. 
    /// </summary>
    utility::string_t getNFIPv4Address() const;
    bool nFIPv4AddressIsSet() const;
    void unsetNFIPv4Address();

    void setNFIPv4Address(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Ipv6Addr> getNFIPv6Address() const;
    bool nFIPv6AddressIsSet() const;
    void unsetNFIPv6Address();

    void setNFIPv6Address(const std::shared_ptr<Ipv6Addr>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PlmnId> getNFPLMNID() const;
    bool nFPLMNIDIsSet() const;
    void unsetNFPLMNID();

    void setNFPLMNID(const std::shared_ptr<PlmnId>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NodeFunctionality> getNodeFunctionality() const;
    bool nodeFunctionalityIsSet() const;
    void unsetNodeFunctionality();

    void setNodeFunctionality(const std::shared_ptr<NodeFunctionality>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNFFqdn() const;
    bool nFFqdnIsSet() const;
    void unsetNFFqdn();

    void setNFFqdn(const utility::string_t& value);


protected:
    utility::string_t m_NFName;
    bool m_NFNameIsSet;
    utility::string_t m_NFIPv4Address;
    bool m_NFIPv4AddressIsSet;
    std::shared_ptr<Ipv6Addr> m_NFIPv6Address;
    bool m_NFIPv6AddressIsSet;
    std::shared_ptr<PlmnId> m_NFPLMNID;
    bool m_NFPLMNIDIsSet;
    std::shared_ptr<NodeFunctionality> m_NodeFunctionality;
    bool m_NodeFunctionalityIsSet;
    utility::string_t m_NFFqdn;
    bool m_NFFqdnIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_NFIdentification_H_ */
