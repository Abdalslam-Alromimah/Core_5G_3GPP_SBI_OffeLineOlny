/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AuthorizedDefaultQos.h
 *
 * Represents the Authorized Default QoS.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_AuthorizedDefaultQos_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_AuthorizedDefaultQos_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Arp.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Arp;

/// <summary>
/// Represents the Authorized Default QoS.
/// </summary>
class  AuthorizedDefaultQos
    : public ModelBase
{
public:
    AuthorizedDefaultQos();
    virtual ~AuthorizedDefaultQos();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AuthorizedDefaultQos members

    /// <summary>
    /// Unsigned integer representing a 5G QoS Identifier (see clause 5.7.2.1 of 3GPP TS 23.501, within the range 0 to 255. 
    /// </summary>
    int32_t getR5qi() const;
    bool r5qiIsSet() const;
    void unsetr_5qi();

    void setR5qi(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Arp> getArp() const;
    bool arpIsSet() const;
    void unsetArp();

    void setArp(const std::shared_ptr<Arp>& value);

    /// <summary>
    /// This data type is defined in the same way as the &#39;5QiPriorityLevel&#39; data type, but with the OpenAPI &#39;nullable: true&#39; property. 
    /// </summary>
    int32_t getPriorityLevel() const;
    bool priorityLevelIsSet() const;
    void unsetPriorityLevel();

    void setPriorityLevel(int32_t value);

    /// <summary>
    /// This data type is defined in the same way as the &#39;AverWindow&#39; data type, but with the OpenAPI &#39;nullable: true&#39; property. 
    /// </summary>
    int32_t getAverWindow() const;
    bool averWindowIsSet() const;
    void unsetAverWindow();

    void setAverWindow(int32_t value);

    /// <summary>
    /// This data type is defined in the same way as the &#39;MaxDataBurstVol&#39; data type, but with the OpenAPI &#39;nullable: true&#39; property. 
    /// </summary>
    int32_t getMaxDataBurstVol() const;
    bool maxDataBurstVolIsSet() const;
    void unsetMaxDataBurstVol();

    void setMaxDataBurstVol(int32_t value);

    /// <summary>
    /// This data type is defined in the same way as the &#39;BitRate&#39; data type, but with the OpenAPI &#39;nullable: true&#39; property. 
    /// </summary>
    utility::string_t getMaxbrUl() const;
    bool maxbrUlIsSet() const;
    void unsetMaxbrUl();

    void setMaxbrUl(const utility::string_t& value);

    /// <summary>
    /// This data type is defined in the same way as the &#39;BitRate&#39; data type, but with the OpenAPI &#39;nullable: true&#39; property. 
    /// </summary>
    utility::string_t getMaxbrDl() const;
    bool maxbrDlIsSet() const;
    void unsetMaxbrDl();

    void setMaxbrDl(const utility::string_t& value);

    /// <summary>
    /// This data type is defined in the same way as the &#39;BitRate&#39; data type, but with the OpenAPI &#39;nullable: true&#39; property. 
    /// </summary>
    utility::string_t getGbrUl() const;
    bool gbrUlIsSet() const;
    void unsetGbrUl();

    void setGbrUl(const utility::string_t& value);

    /// <summary>
    /// This data type is defined in the same way as the &#39;BitRate&#39; data type, but with the OpenAPI &#39;nullable: true&#39; property. 
    /// </summary>
    utility::string_t getGbrDl() const;
    bool gbrDlIsSet() const;
    void unsetGbrDl();

    void setGbrDl(const utility::string_t& value);

    /// <summary>
    /// This data type is defined in the same way as the &#39;ExtMaxDataBurstVol&#39; data type, but with the OpenAPI &#39;nullable: true&#39; property. 
    /// </summary>
    int32_t getExtMaxDataBurstVol() const;
    bool extMaxDataBurstVolIsSet() const;
    void unsetExtMaxDataBurstVol();

    void setExtMaxDataBurstVol(int32_t value);


protected:
    int32_t m_r_5qi;
    bool m_r_5qiIsSet;
    std::shared_ptr<Arp> m_Arp;
    bool m_ArpIsSet;
    int32_t m_PriorityLevel;
    bool m_PriorityLevelIsSet;
    int32_t m_AverWindow;
    bool m_AverWindowIsSet;
    int32_t m_MaxDataBurstVol;
    bool m_MaxDataBurstVolIsSet;
    utility::string_t m_MaxbrUl;
    bool m_MaxbrUlIsSet;
    utility::string_t m_MaxbrDl;
    bool m_MaxbrDlIsSet;
    utility::string_t m_GbrUl;
    bool m_GbrUlIsSet;
    utility::string_t m_GbrDl;
    bool m_GbrDlIsSet;
    int32_t m_ExtMaxDataBurstVol;
    bool m_ExtMaxDataBurstVolIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_AuthorizedDefaultQos_H_ */
