/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GNbId.h
 *
 * Provides the G-NB identifier.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GNbId_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GNbId_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Provides the G-NB identifier.
/// </summary>
class  GNbId
    : public ModelBase
{
public:
    GNbId();
    virtual ~GNbId();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GNbId members

    /// <summary>
    /// Unsigned integer representing the bit length of the gNB ID as defined in clause 9.3.1.6 of 3GPP TS 38.413 [11], within the range 22 to 32. 
    /// </summary>
    int32_t getBitLength() const;
    bool bitLengthIsSet() const;
    void unsetBitLength();

    void setBitLength(int32_t value);

    /// <summary>
    /// This represents the identifier of the gNB. The value of the gNB ID shall be encoded in hexadecimal representation. Each character in the string shall take a value of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4 bits. The padding 0 shall be added to make multiple nibbles,  the most significant character representing the padding 0 if required together with the 4 most significant bits of the gNB ID shall appear first in the string, and the character representing the 4 least significant bit of the gNB ID shall appear last in the string. 
    /// </summary>
    utility::string_t getGNBValue() const;
    bool gNBValueIsSet() const;
    void unsetGNBValue();

    void setGNBValue(const utility::string_t& value);


protected:
    int32_t m_BitLength;
    bool m_BitLengthIsSet;
    utility::string_t m_GNBValue;
    bool m_GNBValueIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GNbId_H_ */
