/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Ncgi.h
 *
 * Contains the NCGI (NR Cell Global Identity), as described in 3GPP 23.003
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Ncgi_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Ncgi_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/PlmnId.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class PlmnId;

/// <summary>
/// Contains the NCGI (NR Cell Global Identity), as described in 3GPP 23.003
/// </summary>
class  Ncgi
    : public ModelBase
{
public:
    Ncgi();
    virtual ~Ncgi();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Ncgi members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PlmnId> getPlmnId() const;
    bool plmnIdIsSet() const;
    void unsetPlmnId();

    void setPlmnId(const std::shared_ptr<PlmnId>& value);

    /// <summary>
    /// 36-bit string identifying an NR Cell Id as specified in clause 9.3.1.7 of 3GPP TS 38.413,  in hexadecimal representation. Each character in the string shall take a value of \&quot;0\&quot; to \&quot;9\&quot;,  \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4 bits. The most significant character  representing the 4 most significant bits of the Cell Id shall appear first in the string, and  the character representing the 4 least significant bit of the Cell Id shall appear last in the  string.  
    /// </summary>
    utility::string_t getNrCellId() const;
    bool nrCellIdIsSet() const;
    void unsetNrCellId();

    void setNrCellId(const utility::string_t& value);

    /// <summary>
    /// This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1).  
    /// </summary>
    utility::string_t getNid() const;
    bool nidIsSet() const;
    void unsetNid();

    void setNid(const utility::string_t& value);


protected:
    std::shared_ptr<PlmnId> m_PlmnId;
    bool m_PlmnIdIsSet;
    utility::string_t m_NrCellId;
    bool m_NrCellIdIsSet;
    utility::string_t m_Nid;
    bool m_NidIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Ncgi_H_ */
