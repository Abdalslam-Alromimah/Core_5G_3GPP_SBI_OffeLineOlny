/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ChargingDataResponse.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ChargingDataResponse_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ChargingDataResponse_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/SessionFailover.h"
#include "CppRestOpenAPIClient/model/Trigger.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/PDUSessionChargingInformation.h"
#include "CppRestOpenAPIClient/model/InvocationResult.h"
#include "CppRestOpenAPIClient/model/RoamingQBCInformation.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class InvocationResult;
class Trigger;
class PDUSessionChargingInformation;
class RoamingQBCInformation;

/// <summary>
/// 
/// </summary>
class  ChargingDataResponse
    : public ModelBase
{
public:
    ChargingDataResponse();
    virtual ~ChargingDataResponse();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ChargingDataResponse members

    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    utility::datetime getInvocationTimeStamp() const;
    bool invocationTimeStampIsSet() const;
    void unsetInvocationTimeStamp();

    void setInvocationTimeStamp(const utility::datetime& value);

    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
    /// </summary>
    int32_t getInvocationSequenceNumber() const;
    bool invocationSequenceNumberIsSet() const;
    void unsetInvocationSequenceNumber();

    void setInvocationSequenceNumber(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<InvocationResult> getInvocationResult() const;
    bool invocationResultIsSet() const;
    void unsetInvocationResult();

    void setInvocationResult(const std::shared_ptr<InvocationResult>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SessionFailover> getSessionFailover() const;
    bool sessionFailoverIsSet() const;
    void unsetSessionFailover();

    void setSessionFailover(const std::shared_ptr<SessionFailover>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Trigger>>& getTriggers();
    bool triggersIsSet() const;
    void unsetTriggers();

    void setTriggers(const std::vector<std::shared_ptr<Trigger>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PDUSessionChargingInformation> getPDUSessionChargingInformation() const;
    bool pDUSessionChargingInformationIsSet() const;
    void unsetPDUSessionChargingInformation();

    void setPDUSessionChargingInformation(const std::shared_ptr<PDUSessionChargingInformation>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RoamingQBCInformation> getRoamingQBCInformation() const;
    bool roamingQBCInformationIsSet() const;
    void unsetRoamingQBCInformation();

    void setRoamingQBCInformation(const std::shared_ptr<RoamingQBCInformation>& value);


protected:
    utility::datetime m_InvocationTimeStamp;
    bool m_InvocationTimeStampIsSet;
    int32_t m_InvocationSequenceNumber;
    bool m_InvocationSequenceNumberIsSet;
    std::shared_ptr<InvocationResult> m_InvocationResult;
    bool m_InvocationResultIsSet;
    std::shared_ptr<SessionFailover> m_SessionFailover;
    bool m_SessionFailoverIsSet;
    std::vector<std::shared_ptr<Trigger>> m_Triggers;
    bool m_TriggersIsSet;
    std::shared_ptr<PDUSessionChargingInformation> m_PDUSessionChargingInformation;
    bool m_PDUSessionChargingInformationIsSet;
    std::shared_ptr<RoamingQBCInformation> m_RoamingQBCInformation;
    bool m_RoamingQBCInformationIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ChargingDataResponse_H_ */
