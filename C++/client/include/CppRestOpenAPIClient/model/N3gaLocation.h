/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * N3gaLocation.h
 *
 * Contains the Non-3GPP access user location.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_N3gaLocation_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_N3gaLocation_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/TransportProtocol.h"
#include "CppRestOpenAPIClient/model/TnapId.h"
#include "CppRestOpenAPIClient/model/TwapId.h"
#include "CppRestOpenAPIClient/model/Ipv6Addr.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/HfcNodeId.h"
#include "CppRestOpenAPIClient/model/Tai.h"
#include "CppRestOpenAPIClient/model/LineType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Tai;
class TnapId;
class TwapId;
class HfcNodeId;

/// <summary>
/// Contains the Non-3GPP access user location.
/// </summary>
class  N3gaLocation
    : public ModelBase
{
public:
    N3gaLocation();
    virtual ~N3gaLocation();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// N3gaLocation members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Tai> getN3gppTai() const;
    bool n3gppTaiIsSet() const;
    void unsetN3gppTai();

    void setN3gppTai(const std::shared_ptr<Tai>& value);

    /// <summary>
    /// This IE shall contain the N3IWF identifier received over NGAP and shall be encoded as a  string of hexadecimal characters. Each character in the string shall take a value of \&quot;0\&quot;  to \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the N3IWF ID shall appear first in  the string, and the character representing the 4 least significant bit of the N3IWF ID  shall appear last in the string.  
    /// </summary>
    utility::string_t getN3IwfId() const;
    bool n3IwfIdIsSet() const;
    void unsetN3IwfId();

    void setN3IwfId(const utility::string_t& value);

    /// <summary>
    /// String identifying a IPv4 address formatted in the &#39;dotted decimal&#39; notation as defined in RFC 1166. 
    /// </summary>
    utility::string_t getUeIpv4Addr() const;
    bool ueIpv4AddrIsSet() const;
    void unsetUeIpv4Addr();

    void setUeIpv4Addr(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Ipv6Addr> getUeIpv6Addr() const;
    bool ueIpv6AddrIsSet() const;
    void unsetUeIpv6Addr();

    void setUeIpv6Addr(const std::shared_ptr<Ipv6Addr>& value);

    /// <summary>
    /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
    /// </summary>
    int32_t getPortNumber() const;
    bool portNumberIsSet() const;
    void unsetPortNumber();

    void setPortNumber(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TransportProtocol> getProtocol() const;
    bool protocolIsSet() const;
    void unsetProtocol();

    void setProtocol(const std::shared_ptr<TransportProtocol>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TnapId> getTnapId() const;
    bool tnapIdIsSet() const;
    void unsetTnapId();

    void setTnapId(const std::shared_ptr<TnapId>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TwapId> getTwapId() const;
    bool twapIdIsSet() const;
    void unsetTwapId();

    void setTwapId(const std::shared_ptr<TwapId>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<HfcNodeId> getHfcNodeId() const;
    bool hfcNodeIdIsSet() const;
    void unsetHfcNodeId();

    void setHfcNodeId(const std::shared_ptr<HfcNodeId>& value);

    /// <summary>
    /// string with format &#39;bytes&#39; as defined in OpenAPI
    /// </summary>
    utility::string_t getGli() const;
    bool gliIsSet() const;
    void unsetGli();

    void setGli(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LineType> getW5gbanLineType() const;
    bool w5gbanLineTypeIsSet() const;
    void unsetW5gbanLineType();

    void setW5gbanLineType(const std::shared_ptr<LineType>& value);

    /// <summary>
    /// Global Cable Identifier uniquely identifying the connection between the 5G-CRG or FN-CRG to the 5GS. See clause 28.15.4 of 3GPP TS 23.003. This shall be encoded as a string per clause 28.15.4 of 3GPP TS 23.003, and compliant with the syntax specified  in clause 2.2  of IETF RFC 7542 for the username part of a NAI. The GCI value is specified in CableLabs WR-TR-5WWC-ARCH. 
    /// </summary>
    utility::string_t getGci() const;
    bool gciIsSet() const;
    void unsetGci();

    void setGci(const utility::string_t& value);


protected:
    std::shared_ptr<Tai> m_N3gppTai;
    bool m_N3gppTaiIsSet;
    utility::string_t m_N3IwfId;
    bool m_N3IwfIdIsSet;
    utility::string_t m_UeIpv4Addr;
    bool m_UeIpv4AddrIsSet;
    std::shared_ptr<Ipv6Addr> m_UeIpv6Addr;
    bool m_UeIpv6AddrIsSet;
    int32_t m_PortNumber;
    bool m_PortNumberIsSet;
    std::shared_ptr<TransportProtocol> m_Protocol;
    bool m_ProtocolIsSet;
    std::shared_ptr<TnapId> m_TnapId;
    bool m_TnapIdIsSet;
    std::shared_ptr<TwapId> m_TwapId;
    bool m_TwapIdIsSet;
    std::shared_ptr<HfcNodeId> m_HfcNodeId;
    bool m_HfcNodeIdIsSet;
    utility::string_t m_Gli;
    bool m_GliIsSet;
    std::shared_ptr<LineType> m_W5gbanLineType;
    bool m_W5gbanLineTypeIsSet;
    utility::string_t m_Gci;
    bool m_GciIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_N3gaLocation_H_ */
