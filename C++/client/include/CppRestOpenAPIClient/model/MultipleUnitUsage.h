/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MultipleUnitUsage.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_MultipleUnitUsage_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_MultipleUnitUsage_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/PDUAddress.h"
#include "CppRestOpenAPIClient/model/UsedUnitContainer.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class UsedUnitContainer;
class PDUAddress;

/// <summary>
/// 
/// </summary>
class  MultipleUnitUsage
    : public ModelBase
{
public:
    MultipleUnitUsage();
    virtual ~MultipleUnitUsage();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// MultipleUnitUsage members

    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
    /// </summary>
    int32_t getRatingGroup() const;
    bool ratingGroupIsSet() const;
    void unsetRatingGroup();

    void setRatingGroup(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<UsedUnitContainer>>& getUsedUnitContainer();
    bool usedUnitContainerIsSet() const;
    void unsetUsedUnitContainer();

    void setUsedUnitContainer(const std::vector<std::shared_ptr<UsedUnitContainer>>& value);

    /// <summary>
    /// String uniquely identifying a NF instance. The format of the NF Instance ID shall be a  Universally Unique Identifier (UUID) version 4, as described in IETF RFC 4122.  
    /// </summary>
    utility::string_t getUPFID() const;
    bool uPFIDIsSet() const;
    void unsetUPFID();

    void setUPFID(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PDUAddress> getMultihomedPDUAddress() const;
    bool multihomedPDUAddressIsSet() const;
    void unsetMultihomedPDUAddress();

    void setMultihomedPDUAddress(const std::shared_ptr<PDUAddress>& value);


protected:
    int32_t m_RatingGroup;
    bool m_RatingGroupIsSet;
    std::vector<std::shared_ptr<UsedUnitContainer>> m_UsedUnitContainer;
    bool m_UsedUnitContainerIsSet;
    utility::string_t m_UPFID;
    bool m_UPFIDIsSet;
    std::shared_ptr<PDUAddress> m_MultihomedPDUAddress;
    bool m_MultihomedPDUAddressIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_MultipleUnitUsage_H_ */
