/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RANSecondaryRATUsageReport.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_RANSecondaryRATUsageReport_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_RANSecondaryRATUsageReport_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/RatType.h"
#include "CppRestOpenAPIClient/model/QosFlowsUsageReport.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class QosFlowsUsageReport;

/// <summary>
/// 
/// </summary>
class  RANSecondaryRATUsageReport
    : public ModelBase
{
public:
    RANSecondaryRATUsageReport();
    virtual ~RANSecondaryRATUsageReport();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RANSecondaryRATUsageReport members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RatType> getRANSecondaryRATType() const;
    bool rANSecondaryRATTypeIsSet() const;
    void unsetRANSecondaryRATType();

    void setRANSecondaryRATType(const std::shared_ptr<RatType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<QosFlowsUsageReport>>& getQosFlowsUsageReports();
    bool qosFlowsUsageReportsIsSet() const;
    void unsetQosFlowsUsageReports();

    void setQosFlowsUsageReports(const std::vector<std::shared_ptr<QosFlowsUsageReport>>& value);


protected:
    std::shared_ptr<RatType> m_RANSecondaryRATType;
    bool m_RANSecondaryRATTypeIsSet;
    std::vector<std::shared_ptr<QosFlowsUsageReport>> m_QosFlowsUsageReports;
    bool m_QosFlowsUsageReportsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_RANSecondaryRATUsageReport_H_ */
