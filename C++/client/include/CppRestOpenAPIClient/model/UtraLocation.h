/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UtraLocation.h
 *
 * Exactly one of cgi, sai or lai shall be present.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UtraLocation_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UtraLocation_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/ServiceAreaId.h"
#include "CppRestOpenAPIClient/model/RoutingAreaId.h"
#include "CppRestOpenAPIClient/model/CellGlobalId.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/LocationAreaId.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class CellGlobalId;
class ServiceAreaId;
class LocationAreaId;
class RoutingAreaId;

/// <summary>
/// Exactly one of cgi, sai or lai shall be present.
/// </summary>
class  UtraLocation
    : public ModelBase
{
public:
    UtraLocation();
    virtual ~UtraLocation();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UtraLocation members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CellGlobalId> getCgi() const;
    bool cgiIsSet() const;
    void unsetCgi();

    void setCgi(const std::shared_ptr<CellGlobalId>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ServiceAreaId> getSai() const;
    bool saiIsSet() const;
    void unsetSai();

    void setSai(const std::shared_ptr<ServiceAreaId>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<LocationAreaId> getLai() const;
    bool laiIsSet() const;
    void unsetLai();

    void setLai(const std::shared_ptr<LocationAreaId>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RoutingAreaId> getRai() const;
    bool raiIsSet() const;
    void unsetRai();

    void setRai(const std::shared_ptr<RoutingAreaId>& value);

    /// <summary>
    /// The value represents the elapsed time in minutes since the last network contact of the mobile station.  Value \&quot;0\&quot; indicates that the location information was obtained after a successful paging procedure for  Active Location Retrieval when the UE is in idle mode  or after a successful location reporting procedure  the UE is in connected mode. Any other value than \&quot;0\&quot; indicates that the location information is the last known one.  See 3GPP TS 29.002 clause 17.7.8. 
    /// </summary>
    int32_t getAgeOfLocationInformation() const;
    bool ageOfLocationInformationIsSet() const;
    void unsetAgeOfLocationInformation();

    void setAgeOfLocationInformation(int32_t value);

    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    utility::datetime getUeLocationTimestamp() const;
    bool ueLocationTimestampIsSet() const;
    void unsetUeLocationTimestamp();

    void setUeLocationTimestamp(const utility::datetime& value);

    /// <summary>
    /// Refer to geographical Information.See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used. 
    /// </summary>
    utility::string_t getGeographicalInformation() const;
    bool geographicalInformationIsSet() const;
    void unsetGeographicalInformation();

    void setGeographicalInformation(const utility::string_t& value);

    /// <summary>
    /// Refers to Calling Geodetic Location. See ITU-T Recommendation Q.763 (1999) clause 3.88.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used. 
    /// </summary>
    utility::string_t getGeodeticInformation() const;
    bool geodeticInformationIsSet() const;
    void unsetGeodeticInformation();

    void setGeodeticInformation(const utility::string_t& value);


protected:
    std::shared_ptr<CellGlobalId> m_Cgi;
    bool m_CgiIsSet;
    std::shared_ptr<ServiceAreaId> m_Sai;
    bool m_SaiIsSet;
    std::shared_ptr<LocationAreaId> m_Lai;
    bool m_LaiIsSet;
    std::shared_ptr<RoutingAreaId> m_Rai;
    bool m_RaiIsSet;
    int32_t m_AgeOfLocationInformation;
    bool m_AgeOfLocationInformationIsSet;
    utility::datetime m_UeLocationTimestamp;
    bool m_UeLocationTimestampIsSet;
    utility::string_t m_GeographicalInformation;
    bool m_GeographicalInformationIsSet;
    utility::string_t m_GeodeticInformation;
    bool m_GeodeticInformationIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UtraLocation_H_ */
