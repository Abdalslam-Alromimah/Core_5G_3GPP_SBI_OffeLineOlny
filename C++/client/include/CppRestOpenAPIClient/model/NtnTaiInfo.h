/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * NtnTaiInfo.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_NtnTaiInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_NtnTaiInfo_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/PlmnIdNid.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class PlmnIdNid;

/// <summary>
/// 
/// </summary>
class  NtnTaiInfo
    : public ModelBase
{
public:
    NtnTaiInfo();
    virtual ~NtnTaiInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// NtnTaiInfo members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PlmnIdNid> getPlmnId() const;
    bool plmnIdIsSet() const;
    void unsetPlmnId();

    void setPlmnId(const std::shared_ptr<PlmnIdNid>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<utility::string_t>>& getTacList();
    bool tacListIsSet() const;
    void unsetTacList();

    void setTacList(const std::vector<std::shared_ptr<utility::string_t>>& value);

    /// <summary>
    /// 2 or 3-octet string identifying a tracking area code as specified in clause 9.3.3.10  of 3GPP TS 38.413, in hexadecimal representation. Each character in the string shall  take a value of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4 bits. The most significant character representing the 4 most significant bits of the TAC shall  appear first in the string, and the character representing the 4 least significant bit  of the TAC shall appear last in the string.  
    /// </summary>
    utility::string_t getDerivedTac() const;
    bool derivedTacIsSet() const;
    void unsetDerivedTac();

    void setDerivedTac(const utility::string_t& value);


protected:
    std::shared_ptr<PlmnIdNid> m_PlmnId;
    bool m_PlmnIdIsSet;
    std::vector<std::shared_ptr<utility::string_t>> m_TacList;
    bool m_TacListIsSet;
    utility::string_t m_DerivedTac;
    bool m_DerivedTacIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_NtnTaiInfo_H_ */
