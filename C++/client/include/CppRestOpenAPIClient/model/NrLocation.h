/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * NrLocation.h
 *
 * Contains the NR user location.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_NrLocation_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_NrLocation_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/GlobalRanNodeId.h"
#include "CppRestOpenAPIClient/model/NtnTaiInfo.h"
#include "CppRestOpenAPIClient/model/Ncgi.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/Tai.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Tai;
class Ncgi;
class GlobalRanNodeId;
class NtnTaiInfo;

/// <summary>
/// Contains the NR user location.
/// </summary>
class  NrLocation
    : public ModelBase
{
public:
    NrLocation();
    virtual ~NrLocation();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// NrLocation members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Tai> getTai() const;
    bool taiIsSet() const;
    void unsetTai();

    void setTai(const std::shared_ptr<Tai>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Ncgi> getNcgi() const;
    bool ncgiIsSet() const;
    void unsetNcgi();

    void setNcgi(const std::shared_ptr<Ncgi>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIgnoreNcgi() const;
    bool ignoreNcgiIsSet() const;
    void unsetIgnoreNcgi();

    void setIgnoreNcgi(bool value);

    /// <summary>
    /// The value represents the elapsed time in minutes since the last network contact of the mobile station. Value \&quot;0\&quot; indicates that the location information was obtained after a successful paging procedure for Active Location Retrieval when the UE is in idle mode or after a successful  NG-RAN location reporting procedure with the eNB when the UE is in connected mode. Any other value than \&quot;0\&quot; indicates that the location information is the last known one. See 3GPP TS 29.002 clause 17.7.8. 
    /// </summary>
    int32_t getAgeOfLocationInformation() const;
    bool ageOfLocationInformationIsSet() const;
    void unsetAgeOfLocationInformation();

    void setAgeOfLocationInformation(int32_t value);

    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    utility::datetime getUeLocationTimestamp() const;
    bool ueLocationTimestampIsSet() const;
    void unsetUeLocationTimestamp();

    void setUeLocationTimestamp(const utility::datetime& value);

    /// <summary>
    /// Refer to geographical Information. See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used. 
    /// </summary>
    utility::string_t getGeographicalInformation() const;
    bool geographicalInformationIsSet() const;
    void unsetGeographicalInformation();

    void setGeographicalInformation(const utility::string_t& value);

    /// <summary>
    /// Refers to Calling Geodetic Location. See ITU-T Recommendation Q.763 (1999) [24] clause 3.88.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used. 
    /// </summary>
    utility::string_t getGeodeticInformation() const;
    bool geodeticInformationIsSet() const;
    void unsetGeodeticInformation();

    void setGeodeticInformation(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GlobalRanNodeId> getGlobalGnbId() const;
    bool globalGnbIdIsSet() const;
    void unsetGlobalGnbId();

    void setGlobalGnbId(const std::shared_ptr<GlobalRanNodeId>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NtnTaiInfo> getNtnTaiInfo() const;
    bool ntnTaiInfoIsSet() const;
    void unsetNtnTaiInfo();

    void setNtnTaiInfo(const std::shared_ptr<NtnTaiInfo>& value);


protected:
    std::shared_ptr<Tai> m_Tai;
    bool m_TaiIsSet;
    std::shared_ptr<Ncgi> m_Ncgi;
    bool m_NcgiIsSet;
    bool m_IgnoreNcgi;
    bool m_IgnoreNcgiIsSet;
    int32_t m_AgeOfLocationInformation;
    bool m_AgeOfLocationInformationIsSet;
    utility::datetime m_UeLocationTimestamp;
    bool m_UeLocationTimestampIsSet;
    utility::string_t m_GeographicalInformation;
    bool m_GeographicalInformationIsSet;
    utility::string_t m_GeodeticInformation;
    bool m_GeodeticInformationIsSet;
    std::shared_ptr<GlobalRanNodeId> m_GlobalGnbId;
    bool m_GlobalGnbIdIsSet;
    std::shared_ptr<NtnTaiInfo> m_NtnTaiInfo;
    bool m_NtnTaiInfoIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_NrLocation_H_ */
