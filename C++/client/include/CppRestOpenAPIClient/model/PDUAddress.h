/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PDUAddress.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PDUAddress_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PDUAddress_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Ipv6Addr.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  PDUAddress
    : public ModelBase
{
public:
    PDUAddress();
    virtual ~PDUAddress();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PDUAddress members

    /// <summary>
    /// String identifying a IPv4 address formatted in the &#39;dotted decimal&#39; notation as defined in RFC 1166. 
    /// </summary>
    utility::string_t getPduIPv4Address() const;
    bool pduIPv4AddressIsSet() const;
    void unsetPduIPv4Address();

    void setPduIPv4Address(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Ipv6Addr> getPduIPv6AddresswithPrefix() const;
    bool pduIPv6AddresswithPrefixIsSet() const;
    void unsetPduIPv6AddresswithPrefix();

    void setPduIPv6AddresswithPrefix(const std::shared_ptr<Ipv6Addr>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPduAddressprefixlength() const;
    bool pduAddressprefixlengthIsSet() const;
    void unsetPduAddressprefixlength();

    void setPduAddressprefixlength(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isIPv4dynamicAddressFlag() const;
    bool iPv4dynamicAddressFlagIsSet() const;
    void unsetIPv4dynamicAddressFlag();

    void setIPv4dynamicAddressFlag(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIPv6dynamicPrefixFlag() const;
    bool iPv6dynamicPrefixFlagIsSet() const;
    void unsetIPv6dynamicPrefixFlag();

    void setIPv6dynamicPrefixFlag(bool value);


protected:
    utility::string_t m_PduIPv4Address;
    bool m_PduIPv4AddressIsSet;
    std::shared_ptr<Ipv6Addr> m_PduIPv6AddresswithPrefix;
    bool m_PduIPv6AddresswithPrefixIsSet;
    int32_t m_PduAddressprefixlength;
    bool m_PduAddressprefixlengthIsSet;
    bool m_IPv4dynamicAddressFlag;
    bool m_IPv4dynamicAddressFlagIsSet;
    bool m_IPv6dynamicPrefixFlag;
    bool m_IPv6dynamicPrefixFlagIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PDUAddress_H_ */
