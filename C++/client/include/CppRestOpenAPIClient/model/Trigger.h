/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Trigger.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Trigger_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Trigger_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/TriggerType.h"
#include "CppRestOpenAPIClient/model/TriggerCategory.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Trigger
    : public ModelBase
{
public:
    Trigger();
    virtual ~Trigger();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Trigger members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TriggerType> getTriggerType() const;
    bool triggerTypeIsSet() const;
    void unsetTriggerType();

    void setTriggerType(const std::shared_ptr<TriggerType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<TriggerCategory> getTriggerCategory() const;
    bool triggerCategoryIsSet() const;
    void unsetTriggerCategory();

    void setTriggerCategory(const std::shared_ptr<TriggerCategory>& value);

    /// <summary>
    /// indicating a time in seconds.
    /// </summary>
    int32_t getTimeLimit() const;
    bool timeLimitIsSet() const;
    void unsetTimeLimit();

    void setTimeLimit(int32_t value);

    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
    /// </summary>
    int32_t getVolumeLimit() const;
    bool volumeLimitIsSet() const;
    void unsetVolumeLimit();

    void setVolumeLimit(int32_t value);

    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 64-bit integer. 
    /// </summary>
    int32_t getVolumeLimit64() const;
    bool volumeLimit64IsSet() const;
    void unsetVolumeLimit64();

    void setVolumeLimit64(int32_t value);

    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
    /// </summary>
    int32_t getEventLimit() const;
    bool eventLimitIsSet() const;
    void unsetEventLimit();

    void setEventLimit(int32_t value);

    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
    /// </summary>
    int32_t getMaxNumberOfccc() const;
    bool maxNumberOfcccIsSet() const;
    void unsetMaxNumberOfccc();

    void setMaxNumberOfccc(int32_t value);


protected:
    std::shared_ptr<TriggerType> m_TriggerType;
    bool m_TriggerTypeIsSet;
    std::shared_ptr<TriggerCategory> m_TriggerCategory;
    bool m_TriggerCategoryIsSet;
    int32_t m_TimeLimit;
    bool m_TimeLimitIsSet;
    int32_t m_VolumeLimit;
    bool m_VolumeLimitIsSet;
    int32_t m_VolumeLimit64;
    bool m_VolumeLimit64IsSet;
    int32_t m_EventLimit;
    bool m_EventLimitIsSet;
    int32_t m_MaxNumberOfccc;
    bool m_MaxNumberOfcccIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Trigger_H_ */
