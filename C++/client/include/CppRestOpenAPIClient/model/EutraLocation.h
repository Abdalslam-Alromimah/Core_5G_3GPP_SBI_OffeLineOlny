/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EutraLocation.h
 *
 * Contains the E-UTRA user location.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_EutraLocation_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_EutraLocation_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/GlobalRanNodeId.h"
#include "CppRestOpenAPIClient/model/Ecgi.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/Tai.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Tai;
class Ecgi;
class GlobalRanNodeId;

/// <summary>
/// Contains the E-UTRA user location.
/// </summary>
class  EutraLocation
    : public ModelBase
{
public:
    EutraLocation();
    virtual ~EutraLocation();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// EutraLocation members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Tai> getTai() const;
    bool taiIsSet() const;
    void unsetTai();

    void setTai(const std::shared_ptr<Tai>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIgnoreTai() const;
    bool ignoreTaiIsSet() const;
    void unsetIgnoreTai();

    void setIgnoreTai(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Ecgi> getEcgi() const;
    bool ecgiIsSet() const;
    void unsetEcgi();

    void setEcgi(const std::shared_ptr<Ecgi>& value);

    /// <summary>
    /// This flag when present shall indicate that the Ecgi shall be ignored When present, it shall be set as follows: - true: ecgi shall be ignored. - false (default): ecgi shall not be ignored. 
    /// </summary>
    bool isIgnoreEcgi() const;
    bool ignoreEcgiIsSet() const;
    void unsetIgnoreEcgi();

    void setIgnoreEcgi(bool value);

    /// <summary>
    /// The value represents the elapsed time in minutes since the last network contact of the mobile station.  Value \&quot;0\&quot; indicates that the location information was obtained after a successful paging procedure for Active Location Retrieval when the UE is in idle mode or after a successful NG-RAN location reporting procedure with the eNB when the UE is in connected mode.  Any other value than \&quot;0\&quot; indicates that the location information is the last known one.  See 3GPP TS 29.002 clause 17.7.8. 
    /// </summary>
    int32_t getAgeOfLocationInformation() const;
    bool ageOfLocationInformationIsSet() const;
    void unsetAgeOfLocationInformation();

    void setAgeOfLocationInformation(int32_t value);

    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    utility::datetime getUeLocationTimestamp() const;
    bool ueLocationTimestampIsSet() const;
    void unsetUeLocationTimestamp();

    void setUeLocationTimestamp(const utility::datetime& value);

    /// <summary>
    /// Refer to geographical Information. See 3GPP TS 23.032 clause 7.3.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used. 
    /// </summary>
    utility::string_t getGeographicalInformation() const;
    bool geographicalInformationIsSet() const;
    void unsetGeographicalInformation();

    void setGeographicalInformation(const utility::string_t& value);

    /// <summary>
    /// Refers to Calling Geodetic Location. See ITU-T Recommendation Q.763 (1999) [24] clause 3.88.2. Only the description of an ellipsoid point with uncertainty circle is allowed to be used. 
    /// </summary>
    utility::string_t getGeodeticInformation() const;
    bool geodeticInformationIsSet() const;
    void unsetGeodeticInformation();

    void setGeodeticInformation(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GlobalRanNodeId> getGlobalNgenbId() const;
    bool globalNgenbIdIsSet() const;
    void unsetGlobalNgenbId();

    void setGlobalNgenbId(const std::shared_ptr<GlobalRanNodeId>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GlobalRanNodeId> getGlobalENbId() const;
    bool globalENbIdIsSet() const;
    void unsetGlobalENbId();

    void setGlobalENbId(const std::shared_ptr<GlobalRanNodeId>& value);


protected:
    std::shared_ptr<Tai> m_Tai;
    bool m_TaiIsSet;
    bool m_IgnoreTai;
    bool m_IgnoreTaiIsSet;
    std::shared_ptr<Ecgi> m_Ecgi;
    bool m_EcgiIsSet;
    bool m_IgnoreEcgi;
    bool m_IgnoreEcgiIsSet;
    int32_t m_AgeOfLocationInformation;
    bool m_AgeOfLocationInformationIsSet;
    utility::datetime m_UeLocationTimestamp;
    bool m_UeLocationTimestampIsSet;
    utility::string_t m_GeographicalInformation;
    bool m_GeographicalInformationIsSet;
    utility::string_t m_GeodeticInformation;
    bool m_GeodeticInformationIsSet;
    std::shared_ptr<GlobalRanNodeId> m_GlobalNgenbId;
    bool m_GlobalNgenbIdIsSet;
    std::shared_ptr<GlobalRanNodeId> m_GlobalENbId;
    bool m_GlobalENbIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_EutraLocation_H_ */
