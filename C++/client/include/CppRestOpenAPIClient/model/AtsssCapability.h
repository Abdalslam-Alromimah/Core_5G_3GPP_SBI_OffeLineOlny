/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AtsssCapability.h
 *
 * Containes Capability to support procedures related to Access Traffic Steering, Switching, Splitting. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_AtsssCapability_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_AtsssCapability_H_


#include "CppRestOpenAPIClient/ModelBase.h"


namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Containes Capability to support procedures related to Access Traffic Steering, Switching, Splitting. 
/// </summary>
class  AtsssCapability
    : public ModelBase
{
public:
    AtsssCapability();
    virtual ~AtsssCapability();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AtsssCapability members

    /// <summary>
    /// Indicates the support of Access Traffic Steering, Switching and Splitting procedures  using the ATSSS-LL steering functionality (see clauses 4.2.10, 5.32 of 3GPP TS 23.501). true: Supported false (default): Not Supported 
    /// </summary>
    bool isAtsssLL() const;
    bool atsssLLIsSet() const;
    void unsetAtsssLL();

    void setAtsssLL(bool value);

    /// <summary>
    /// Indicates the support of Access Traffic Steering, Switching and Splitting procedures using the MPTCP steering functionality (see clauses 4.2.10, 5.32 of 3GPP TS 23.501 true: Supported false (default): Not Supported 
    /// </summary>
    bool isMptcp() const;
    bool mptcpIsSet() const;
    void unsetMptcp();

    void setMptcp(bool value);

    /// <summary>
    /// Indicates the support of Access Traffic Steering, Switching and Splitting procedures  using the MPQUIC steering functionality (see clauses 4.2.10, 5.32 of 3GPP TS 23.501) true: Supported false (default): Not Supported 
    /// </summary>
    bool isMpquic() const;
    bool mpquicIsSet() const;
    void unsetMpquic();

    void setMpquic(bool value);

    /// <summary>
    /// This IE is only used by the UPF to indicate whether the UPF supports RTT measurement without PMF (see clauses 5.32.2, 6.3.3.3 of 3GPP TS 23.501 true: Supported false (default): Not Supported 
    /// </summary>
    bool isRttWithoutPmf() const;
    bool rttWithoutPmfIsSet() const;
    void unsetRttWithoutPmf();

    void setRttWithoutPmf(bool value);


protected:
    bool m_AtsssLL;
    bool m_AtsssLLIsSet;
    bool m_Mptcp;
    bool m_MptcpIsSet;
    bool m_Mpquic;
    bool m_MpquicIsSet;
    bool m_RttWithoutPmf;
    bool m_RttWithoutPmfIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_AtsssCapability_H_ */
