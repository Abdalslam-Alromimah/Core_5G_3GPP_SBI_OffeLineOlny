/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ServingNetworkFunctionID.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ServingNetworkFunctionID_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ServingNetworkFunctionID_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/NFIdentification.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class NFIdentification;

/// <summary>
/// 
/// </summary>
class  ServingNetworkFunctionID
    : public ModelBase
{
public:
    ServingNetworkFunctionID();
    virtual ~ServingNetworkFunctionID();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ServingNetworkFunctionID members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NFIdentification> getServingNetworkFunctionInformation() const;
    bool servingNetworkFunctionInformationIsSet() const;
    void unsetServingNetworkFunctionInformation();

    void setServingNetworkFunctionInformation(const std::shared_ptr<NFIdentification>& value);

    /// <summary>
    /// String identifying the AMF ID composed of AMF Region ID (8 bits), AMF Set ID (10 bits) and AMF  Pointer (6 bits) as specified in clause 2.10.1 of 3GPP TS 23.003. It is encoded as a string of  6 hexadecimal characters (i.e., 24 bits).  
    /// </summary>
    utility::string_t getAMFId() const;
    bool aMFIdIsSet() const;
    void unsetAMFId();

    void setAMFId(const utility::string_t& value);


protected:
    std::shared_ptr<NFIdentification> m_ServingNetworkFunctionInformation;
    bool m_ServingNetworkFunctionInformationIsSet;
    utility::string_t m_AMFId;
    bool m_AMFIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ServingNetworkFunctionID_H_ */
