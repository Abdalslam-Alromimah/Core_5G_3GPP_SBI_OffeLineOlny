/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PresenceInfo.h
 *
 * If the additionalPraId IE is present, this IE shall state the presence information of the UE for the individual PRA identified by the additionalPraId IE;  If the additionalPraId IE is not present, this IE shall state the presence information of the UE for the PRA identified by the praId IE. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PresenceInfo_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PresenceInfo_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/GlobalRanNodeId.h"
#include "CppRestOpenAPIClient/model/Ecgi.h"
#include "CppRestOpenAPIClient/model/PresenceState.h"
#include "CppRestOpenAPIClient/model/Ncgi.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/Tai.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Tai;
class Ecgi;
class Ncgi;
class GlobalRanNodeId;

/// <summary>
/// If the additionalPraId IE is present, this IE shall state the presence information of the UE for the individual PRA identified by the additionalPraId IE;  If the additionalPraId IE is not present, this IE shall state the presence information of the UE for the PRA identified by the praId IE. 
/// </summary>
class  PresenceInfo
    : public ModelBase
{
public:
    PresenceInfo();
    virtual ~PresenceInfo();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PresenceInfo members

    /// <summary>
    /// Represents an identifier of the Presence Reporting Area (see clause 28.10 of 3GPP  TS 23.003.  This IE shall be present  if the Area of Interest subscribed or reported is a Presence Reporting Area or a Set of Core Network predefined Presence Reporting Areas. When present, it shall be encoded as a string representing an integer in the following ranges: 0 to 8 388 607 for UE-dedicated PRA 8 388 608 to 16 777 215 for Core Network predefined PRA Examples: PRA ID 123 is encoded as \&quot;123\&quot; PRA ID 11 238 660 is encoded as \&quot;11238660\&quot; 
    /// </summary>
    utility::string_t getPraId() const;
    bool praIdIsSet() const;
    void unsetPraId();

    void setPraId(const utility::string_t& value);

    /// <summary>
    /// This IE may be present if the praId IE is present and if it contains a PRA identifier referring to a set of Core Network predefined Presence Reporting Areas. When present, this IE shall contain a PRA Identifier of an individual PRA within the Set of Core Network predefined Presence Reporting Areas indicated by the praId IE.  
    /// </summary>
    utility::string_t getAdditionalPraId() const;
    bool additionalPraIdIsSet() const;
    void unsetAdditionalPraId();

    void setAdditionalPraId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PresenceState> getPresenceState() const;
    bool presenceStateIsSet() const;
    void unsetPresenceState();

    void setPresenceState(const std::shared_ptr<PresenceState>& value);

    /// <summary>
    /// Represents the list of tracking areas that constitutes the area. This IE shall be present if the subscription or  the event report is for tracking UE presence in the tracking areas. For non 3GPP access the TAI shall be the N3GPP TAI.  
    /// </summary>
    std::vector<std::shared_ptr<Tai>>& getTrackingAreaList();
    bool trackingAreaListIsSet() const;
    void unsetTrackingAreaList();

    void setTrackingAreaList(const std::vector<std::shared_ptr<Tai>>& value);

    /// <summary>
    /// Represents the list of EUTRAN cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of EUTRAN cell Ids.  
    /// </summary>
    std::vector<std::shared_ptr<Ecgi>>& getEcgiList();
    bool ecgiListIsSet() const;
    void unsetEcgiList();

    void setEcgiList(const std::vector<std::shared_ptr<Ecgi>>& value);

    /// <summary>
    /// Represents the list of NR cell Ids that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NR cell Ids.  
    /// </summary>
    std::vector<std::shared_ptr<Ncgi>>& getNcgiList();
    bool ncgiListIsSet() const;
    void unsetNcgiList();

    void setNcgiList(const std::vector<std::shared_ptr<Ncgi>>& value);

    /// <summary>
    /// Represents the list of NG RAN node identifiers that constitutes the area. This IE shall be present if the Area of Interest subscribed is a list of NG RAN node identifiers.  
    /// </summary>
    std::vector<std::shared_ptr<GlobalRanNodeId>>& getGlobalRanNodeIdList();
    bool globalRanNodeIdListIsSet() const;
    void unsetGlobalRanNodeIdList();

    void setGlobalRanNodeIdList(const std::vector<std::shared_ptr<GlobalRanNodeId>>& value);

    /// <summary>
    /// Represents the list of eNodeB identifiers that constitutes the area. This IE shall be  present if the Area of Interest subscribed is a list of eNodeB identifiers. 
    /// </summary>
    std::vector<std::shared_ptr<GlobalRanNodeId>>& getGlobaleNbIdList();
    bool globaleNbIdListIsSet() const;
    void unsetGlobaleNbIdList();

    void setGlobaleNbIdList(const std::vector<std::shared_ptr<GlobalRanNodeId>>& value);


protected:
    utility::string_t m_PraId;
    bool m_PraIdIsSet;
    utility::string_t m_AdditionalPraId;
    bool m_AdditionalPraIdIsSet;
    std::shared_ptr<PresenceState> m_PresenceState;
    bool m_PresenceStateIsSet;
    std::vector<std::shared_ptr<Tai>> m_TrackingAreaList;
    bool m_TrackingAreaListIsSet;
    std::vector<std::shared_ptr<Ecgi>> m_EcgiList;
    bool m_EcgiListIsSet;
    std::vector<std::shared_ptr<Ncgi>> m_NcgiList;
    bool m_NcgiListIsSet;
    std::vector<std::shared_ptr<GlobalRanNodeId>> m_GlobalRanNodeIdList;
    bool m_GlobalRanNodeIdListIsSet;
    std::vector<std::shared_ptr<GlobalRanNodeId>> m_GlobaleNbIdList;
    bool m_GlobaleNbIdListIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PresenceInfo_H_ */
