/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UsedUnitContainer.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UsedUnitContainer_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UsedUnitContainer_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Trigger.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/PDUContainerInformation.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Trigger;
class PDUContainerInformation;

/// <summary>
/// 
/// </summary>
class  UsedUnitContainer
    : public ModelBase
{
public:
    UsedUnitContainer();
    virtual ~UsedUnitContainer();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UsedUnitContainer members

    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
    /// </summary>
    int32_t getServiceId() const;
    bool serviceIdIsSet() const;
    void unsetServiceId();

    void setServiceId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Trigger>>& getTriggers();
    bool triggersIsSet() const;
    void unsetTriggers();

    void setTriggers(const std::vector<std::shared_ptr<Trigger>>& value);

    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    utility::datetime getTriggerTimestamp() const;
    bool triggerTimestampIsSet() const;
    void unsetTriggerTimestamp();

    void setTriggerTimestamp(const utility::datetime& value);

    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 32-bit integer. 
    /// </summary>
    int32_t getTime() const;
    bool timeIsSet() const;
    void unsetTime();

    void setTime(int32_t value);

    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 64-bit integer. 
    /// </summary>
    int32_t getTotalVolume() const;
    bool totalVolumeIsSet() const;
    void unsetTotalVolume();

    void setTotalVolume(int32_t value);

    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 64-bit integer. 
    /// </summary>
    int32_t getUplinkVolume() const;
    bool uplinkVolumeIsSet() const;
    void unsetUplinkVolume();

    void setUplinkVolume(int32_t value);

    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 64-bit integer. 
    /// </summary>
    int32_t getDownlinkVolume() const;
    bool downlinkVolumeIsSet() const;
    void unsetDownlinkVolume();

    void setDownlinkVolume(int32_t value);

    /// <summary>
    /// Integer where the allowed values correspond to the value range of an unsigned 64-bit integer. 
    /// </summary>
    int32_t getServiceSpecificUnits() const;
    bool serviceSpecificUnitsIsSet() const;
    void unsetServiceSpecificUnits();

    void setServiceSpecificUnits(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<utility::datetime>>& getEventTimeStamps();
    bool eventTimeStampsIsSet() const;
    void unsetEventTimeStamps();

    void setEventTimeStamps(const std::vector<std::shared_ptr<utility::datetime>>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getLocalSequenceNumber() const;
    bool localSequenceNumberIsSet() const;
    void unsetLocalSequenceNumber();

    void setLocalSequenceNumber(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PDUContainerInformation> getPDUContainerInformation() const;
    bool pDUContainerInformationIsSet() const;
    void unsetPDUContainerInformation();

    void setPDUContainerInformation(const std::shared_ptr<PDUContainerInformation>& value);


protected:
    int32_t m_ServiceId;
    bool m_ServiceIdIsSet;
    std::vector<std::shared_ptr<Trigger>> m_Triggers;
    bool m_TriggersIsSet;
    utility::datetime m_TriggerTimestamp;
    bool m_TriggerTimestampIsSet;
    int32_t m_Time;
    bool m_TimeIsSet;
    int32_t m_TotalVolume;
    bool m_TotalVolumeIsSet;
    int32_t m_UplinkVolume;
    bool m_UplinkVolumeIsSet;
    int32_t m_DownlinkVolume;
    bool m_DownlinkVolumeIsSet;
    int32_t m_ServiceSpecificUnits;
    bool m_ServiceSpecificUnitsIsSet;
    std::vector<std::shared_ptr<utility::datetime>> m_EventTimeStamps;
    bool m_EventTimeStampsIsSet;
    int32_t m_LocalSequenceNumber;
    bool m_LocalSequenceNumberIsSet;
    std::shared_ptr<PDUContainerInformation> m_PDUContainerInformation;
    bool m_PDUContainerInformationIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UsedUnitContainer_H_ */
