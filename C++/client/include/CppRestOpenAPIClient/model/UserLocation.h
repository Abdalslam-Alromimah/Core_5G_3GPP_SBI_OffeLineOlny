/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UserLocation.h
 *
 * At least one of eutraLocation, nrLocation and n3gaLocation shall be present. Several of them may be present. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_UserLocation_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_UserLocation_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/EutraLocation.h"
#include "CppRestOpenAPIClient/model/NrLocation.h"
#include "CppRestOpenAPIClient/model/GeraLocation.h"
#include "CppRestOpenAPIClient/model/UtraLocation.h"
#include "CppRestOpenAPIClient/model/N3gaLocation.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class EutraLocation;
class NrLocation;
class N3gaLocation;
class UtraLocation;
class GeraLocation;

/// <summary>
/// At least one of eutraLocation, nrLocation and n3gaLocation shall be present. Several of them may be present. 
/// </summary>
class  UserLocation
    : public ModelBase
{
public:
    UserLocation();
    virtual ~UserLocation();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UserLocation members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EutraLocation> getEutraLocation() const;
    bool eutraLocationIsSet() const;
    void unsetEutraLocation();

    void setEutraLocation(const std::shared_ptr<EutraLocation>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NrLocation> getNrLocation() const;
    bool nrLocationIsSet() const;
    void unsetNrLocation();

    void setNrLocation(const std::shared_ptr<NrLocation>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<N3gaLocation> getN3gaLocation() const;
    bool n3gaLocationIsSet() const;
    void unsetN3gaLocation();

    void setN3gaLocation(const std::shared_ptr<N3gaLocation>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<UtraLocation> getUtraLocation() const;
    bool utraLocationIsSet() const;
    void unsetUtraLocation();

    void setUtraLocation(const std::shared_ptr<UtraLocation>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GeraLocation> getGeraLocation() const;
    bool geraLocationIsSet() const;
    void unsetGeraLocation();

    void setGeraLocation(const std::shared_ptr<GeraLocation>& value);


protected:
    std::shared_ptr<EutraLocation> m_EutraLocation;
    bool m_EutraLocationIsSet;
    std::shared_ptr<NrLocation> m_NrLocation;
    bool m_NrLocationIsSet;
    std::shared_ptr<N3gaLocation> m_N3gaLocation;
    bool m_N3gaLocationIsSet;
    std::shared_ptr<UtraLocation> m_UtraLocation;
    bool m_UtraLocationIsSet;
    std::shared_ptr<GeraLocation> m_GeraLocation;
    bool m_GeraLocationIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_UserLocation_H_ */
