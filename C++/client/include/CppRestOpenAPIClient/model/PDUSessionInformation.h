/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PDUSessionInformation.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PDUSessionInformation_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PDUSessionInformation_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/AuthorizedDefaultQos.h"
#include "CppRestOpenAPIClient/model/SubscribedDefaultQos.h"
#include "CppRestOpenAPIClient/model/MAPDUSessionInformation.h"
#include "CppRestOpenAPIClient/model/PlmnId.h"
#include "CppRestOpenAPIClient/model/SscMode.h"
#include <vector>
#include "CppRestOpenAPIClient/model/Ambr.h"
#include "CppRestOpenAPIClient/model/NetworkSlicingInfo.h"
#include "CppRestOpenAPIClient/model/RanNasRelCause.h"
#include "CppRestOpenAPIClient/model/ServingNetworkFunctionID.h"
#include "CppRestOpenAPIClient/model/R_3GPPPSDataOffStatus.h"
#include "CppRestOpenAPIClient/model/RatType.h"
#include "CppRestOpenAPIClient/model/PDUAddress.h"
#include "CppRestOpenAPIClient/model/PduSessionType.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/ChargingCharacteristicsSelectionMode.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class NetworkSlicingInfo;
class PlmnId;
class ServingNetworkFunctionID;
class PDUAddress;
class AuthorizedDefaultQos;
class SubscribedDefaultQos;
class Ambr;
class MAPDUSessionInformation;
class RanNasRelCause;

/// <summary>
/// 
/// </summary>
class  PDUSessionInformation
    : public ModelBase
{
public:
    PDUSessionInformation();
    virtual ~PDUSessionInformation();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PDUSessionInformation members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NetworkSlicingInfo> getNetworkSlicingInfo() const;
    bool networkSlicingInfoIsSet() const;
    void unsetNetworkSlicingInfo();

    void setNetworkSlicingInfo(const std::shared_ptr<NetworkSlicingInfo>& value);

    /// <summary>
    /// Unsigned integer identifying a PDU session, within the range 0 to 255, as specified in  clause 11.2.3.1b, bits 1 to 8, of 3GPP TS 24.007. If the PDU Session ID is allocated by the  Core Network for UEs not supporting N1 mode, reserved range 64 to 95 is used. PDU Session ID  within the reserved range is only visible in the Core Network.  
    /// </summary>
    int32_t getPduSessionID() const;
    bool pduSessionIDIsSet() const;
    void unsetPduSessionID();

    void setPduSessionID(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PduSessionType> getPduType() const;
    bool pduTypeIsSet() const;
    void unsetPduType();

    void setPduType(const std::shared_ptr<PduSessionType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SscMode> getSscMode() const;
    bool sscModeIsSet() const;
    void unsetSscMode();

    void setSscMode(const std::shared_ptr<SscMode>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PlmnId> getHPlmnId() const;
    bool hPlmnIdIsSet() const;
    void unsetHPlmnId();

    void setHPlmnId(const std::shared_ptr<PlmnId>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ServingNetworkFunctionID> getServingNetworkFunctionID() const;
    bool servingNetworkFunctionIDIsSet() const;
    void unsetServingNetworkFunctionID();

    void setServingNetworkFunctionID(const std::shared_ptr<ServingNetworkFunctionID>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RatType> getRatType() const;
    bool ratTypeIsSet() const;
    void unsetRatType();

    void setRatType(const std::shared_ptr<RatType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RatType> getMAPDUNon3GPPRATType() const;
    bool mAPDUNon3GPPRATTypeIsSet() const;
    void unsetMAPDUNon3GPPRATType();

    void setMAPDUNon3GPPRATType(const std::shared_ptr<RatType>& value);

    /// <summary>
    /// String representing a Data Network as defined in clause 9A of 3GPP TS 23.003;  it shall contain either a DNN Network Identifier, or a full DNN with both the Network  Identifier and Operator Identifier, as specified in 3GPP TS 23.003 clause 9.1.1 and 9.1.2. It shall be coded as string in which the labels are separated by dots  (e.g. \&quot;Label1.Label2.Label3\&quot;). 
    /// </summary>
    utility::string_t getDnnId() const;
    bool dnnIdIsSet() const;
    void unsetDnnId();

    void setDnnId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getChargingCharacteristics() const;
    bool chargingCharacteristicsIsSet() const;
    void unsetChargingCharacteristics();

    void setChargingCharacteristics(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ChargingCharacteristicsSelectionMode> getChargingCharacteristicsSelectionMode() const;
    bool chargingCharacteristicsSelectionModeIsSet() const;
    void unsetChargingCharacteristicsSelectionMode();

    void setChargingCharacteristicsSelectionMode(const std::shared_ptr<ChargingCharacteristicsSelectionMode>& value);

    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    utility::datetime getStartTime() const;
    bool startTimeIsSet() const;
    void unsetStartTime();

    void setStartTime(const utility::datetime& value);

    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    utility::datetime getStopTime() const;
    bool stopTimeIsSet() const;
    void unsetStopTime();

    void setStopTime(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<r_3GPPPSDataOffStatus> getR3gppPSDataOffStatus() const;
    bool r3gppPSDataOffStatusIsSet() const;
    void unsetr_3gppPSDataOffStatus();

    void setR3gppPSDataOffStatus(const std::shared_ptr<r_3GPPPSDataOffStatus>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isSessionStopIndicator() const;
    bool sessionStopIndicatorIsSet() const;
    void unsetSessionStopIndicator();

    void setSessionStopIndicator(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PDUAddress> getPduAddress() const;
    bool pduAddressIsSet() const;
    void unsetPduAddress();

    void setPduAddress(const std::shared_ptr<PDUAddress>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDiagnostics() const;
    bool diagnosticsIsSet() const;
    void unsetDiagnostics();

    void setDiagnostics(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AuthorizedDefaultQos> getAuthorizedQoSInformation() const;
    bool authorizedQoSInformationIsSet() const;
    void unsetAuthorizedQoSInformation();

    void setAuthorizedQoSInformation(const std::shared_ptr<AuthorizedDefaultQos>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SubscribedDefaultQos> getSubscribedQoSInformation() const;
    bool subscribedQoSInformationIsSet() const;
    void unsetSubscribedQoSInformation();

    void setSubscribedQoSInformation(const std::shared_ptr<SubscribedDefaultQos>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Ambr> getAuthorizedSessionAMBR() const;
    bool authorizedSessionAMBRIsSet() const;
    void unsetAuthorizedSessionAMBR();

    void setAuthorizedSessionAMBR(const std::shared_ptr<Ambr>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Ambr> getSubscribedSessionAMBR() const;
    bool subscribedSessionAMBRIsSet() const;
    void unsetSubscribedSessionAMBR();

    void setSubscribedSessionAMBR(const std::shared_ptr<Ambr>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PlmnId> getServingCNPlmnId() const;
    bool servingCNPlmnIdIsSet() const;
    void unsetServingCNPlmnId();

    void setServingCNPlmnId(const std::shared_ptr<PlmnId>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<MAPDUSessionInformation> getMAPDUSessionInformation() const;
    bool mAPDUSessionInformationIsSet() const;
    void unsetMAPDUSessionInformation();

    void setMAPDUSessionInformation(const std::shared_ptr<MAPDUSessionInformation>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<RanNasRelCause>>& getEnhancedDiagnostics();
    bool enhancedDiagnosticsIsSet() const;
    void unsetEnhancedDiagnostics();

    void setEnhancedDiagnostics(const std::vector<std::shared_ptr<RanNasRelCause>>& value);


protected:
    std::shared_ptr<NetworkSlicingInfo> m_NetworkSlicingInfo;
    bool m_NetworkSlicingInfoIsSet;
    int32_t m_PduSessionID;
    bool m_PduSessionIDIsSet;
    std::shared_ptr<PduSessionType> m_PduType;
    bool m_PduTypeIsSet;
    std::shared_ptr<SscMode> m_SscMode;
    bool m_SscModeIsSet;
    std::shared_ptr<PlmnId> m_HPlmnId;
    bool m_HPlmnIdIsSet;
    std::shared_ptr<ServingNetworkFunctionID> m_ServingNetworkFunctionID;
    bool m_ServingNetworkFunctionIDIsSet;
    std::shared_ptr<RatType> m_RatType;
    bool m_RatTypeIsSet;
    std::shared_ptr<RatType> m_MAPDUNon3GPPRATType;
    bool m_MAPDUNon3GPPRATTypeIsSet;
    utility::string_t m_DnnId;
    bool m_DnnIdIsSet;
    utility::string_t m_ChargingCharacteristics;
    bool m_ChargingCharacteristicsIsSet;
    std::shared_ptr<ChargingCharacteristicsSelectionMode> m_ChargingCharacteristicsSelectionMode;
    bool m_ChargingCharacteristicsSelectionModeIsSet;
    utility::datetime m_StartTime;
    bool m_StartTimeIsSet;
    utility::datetime m_StopTime;
    bool m_StopTimeIsSet;
    std::shared_ptr<r_3GPPPSDataOffStatus> m_r_3gppPSDataOffStatus;
    bool m_r_3gppPSDataOffStatusIsSet;
    bool m_SessionStopIndicator;
    bool m_SessionStopIndicatorIsSet;
    std::shared_ptr<PDUAddress> m_PduAddress;
    bool m_PduAddressIsSet;
    int32_t m_Diagnostics;
    bool m_DiagnosticsIsSet;
    std::shared_ptr<AuthorizedDefaultQos> m_AuthorizedQoSInformation;
    bool m_AuthorizedQoSInformationIsSet;
    std::shared_ptr<SubscribedDefaultQos> m_SubscribedQoSInformation;
    bool m_SubscribedQoSInformationIsSet;
    std::shared_ptr<Ambr> m_AuthorizedSessionAMBR;
    bool m_AuthorizedSessionAMBRIsSet;
    std::shared_ptr<Ambr> m_SubscribedSessionAMBR;
    bool m_SubscribedSessionAMBRIsSet;
    std::shared_ptr<PlmnId> m_ServingCNPlmnId;
    bool m_ServingCNPlmnIdIsSet;
    std::shared_ptr<MAPDUSessionInformation> m_MAPDUSessionInformation;
    bool m_MAPDUSessionInformationIsSet;
    std::vector<std::shared_ptr<RanNasRelCause>> m_EnhancedDiagnostics;
    bool m_EnhancedDiagnosticsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PDUSessionInformation_H_ */
