/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SteeringMode.h
 *
 * Contains the steering mode value and parameters determined by the PCF.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SteeringMode_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SteeringMode_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/AccessType.h"
#include "CppRestOpenAPIClient/model/ThresholdValue.h"
#include "CppRestOpenAPIClient/model/AccessTypeRm.h"
#include "CppRestOpenAPIClient/model/SteerModeValue.h"
#include "CppRestOpenAPIClient/model/SteerModeIndicator.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class ThresholdValue;

/// <summary>
/// Contains the steering mode value and parameters determined by the PCF.
/// </summary>
class  SteeringMode
    : public ModelBase
{
public:
    SteeringMode();
    virtual ~SteeringMode();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SteeringMode members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SteerModeValue> getSteerModeValue() const;
    bool steerModeValueIsSet() const;
    void unsetSteerModeValue();

    void setSteerModeValue(const std::shared_ptr<SteerModeValue>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AccessType> getActive() const;
    bool activeIsSet() const;
    void unsetActive();

    void setActive(const std::shared_ptr<AccessType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AccessTypeRm> getStandby() const;
    bool standbyIsSet() const;
    void unsetStandby();

    void setStandby(const std::shared_ptr<AccessTypeRm>& value);

    /// <summary>
    /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
    /// </summary>
    int32_t getR3gLoad() const;
    bool r3gLoadIsSet() const;
    void unsetr_3gLoad();

    void setR3gLoad(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AccessType> getPrioAcc() const;
    bool prioAccIsSet() const;
    void unsetPrioAcc();

    void setPrioAcc(const std::shared_ptr<AccessType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ThresholdValue> getThresValue() const;
    bool thresValueIsSet() const;
    void unsetThresValue();

    void setThresValue(const std::shared_ptr<ThresholdValue>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SteerModeIndicator> getSteerModeInd() const;
    bool steerModeIndIsSet() const;
    void unsetSteerModeInd();

    void setSteerModeInd(const std::shared_ptr<SteerModeIndicator>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<AccessTypeRm> getPrimary() const;
    bool primaryIsSet() const;
    void unsetPrimary();

    void setPrimary(const std::shared_ptr<AccessTypeRm>& value);


protected:
    std::shared_ptr<SteerModeValue> m_SteerModeValue;
    bool m_SteerModeValueIsSet;
    std::shared_ptr<AccessType> m_Active;
    bool m_ActiveIsSet;
    std::shared_ptr<AccessTypeRm> m_Standby;
    bool m_StandbyIsSet;
    int32_t m_r_3gLoad;
    bool m_r_3gLoadIsSet;
    std::shared_ptr<AccessType> m_PrioAcc;
    bool m_PrioAccIsSet;
    std::shared_ptr<ThresholdValue> m_ThresValue;
    bool m_ThresValueIsSet;
    std::shared_ptr<SteerModeIndicator> m_SteerModeInd;
    bool m_SteerModeIndIsSet;
    std::shared_ptr<AccessTypeRm> m_Primary;
    bool m_PrimaryIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SteeringMode_H_ */
