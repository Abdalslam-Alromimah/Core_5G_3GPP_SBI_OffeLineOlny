/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service © 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PDUContainerInformation.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PDUContainerInformation_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PDUContainerInformation_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/SteeringMode.h"
#include "CppRestOpenAPIClient/model/SteeringFunctionality.h"
#include "CppRestOpenAPIClient/model/PresenceInfo.h"
#include "CppRestOpenAPIClient/model/UserLocation.h"
#include "CppRestOpenAPIClient/model/ServingNetworkFunctionID.h"
#include "CppRestOpenAPIClient/model/R_3GPPPSDataOffStatus.h"
#include "CppRestOpenAPIClient/model/RatType.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/QosData.h"
#include <map>
#include "CppRestOpenAPIClient/model/QosCharacteristics.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class QosData;
class QosCharacteristics;
class UserLocation;
class ServingNetworkFunctionID;
class PresenceInfo;
class SteeringMode;

/// <summary>
/// 
/// </summary>
class  PDUContainerInformation
    : public ModelBase
{
public:
    PDUContainerInformation();
    virtual ~PDUContainerInformation();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PDUContainerInformation members

    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    utility::datetime getTimeofFirstUsage() const;
    bool timeofFirstUsageIsSet() const;
    void unsetTimeofFirstUsage();

    void setTimeofFirstUsage(const utility::datetime& value);

    /// <summary>
    /// string with format &#39;date-time&#39; as defined in OpenAPI.
    /// </summary>
    utility::datetime getTimeofLastUsage() const;
    bool timeofLastUsageIsSet() const;
    void unsetTimeofLastUsage();

    void setTimeofLastUsage(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<QosData> getQoSInformation() const;
    bool qoSInformationIsSet() const;
    void unsetQoSInformation();

    void setQoSInformation(const std::shared_ptr<QosData>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<QosCharacteristics> getQoSCharacteristics() const;
    bool qoSCharacteristicsIsSet() const;
    void unsetQoSCharacteristics();

    void setQoSCharacteristics(const std::shared_ptr<QosCharacteristics>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAFCorrelationInformation() const;
    bool aFCorrelationInformationIsSet() const;
    void unsetAFCorrelationInformation();

    void setAFCorrelationInformation(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<UserLocation> getUserLocationInformation() const;
    bool userLocationInformationIsSet() const;
    void unsetUserLocationInformation();

    void setUserLocationInformation(const std::shared_ptr<UserLocation>& value);

    /// <summary>
    /// String with format \&quot;time-numoffset\&quot; optionally appended by \&quot;daylightSavingTime\&quot;, where  - \&quot;time-numoffset\&quot; shall represent the time zone adjusted for daylight saving time and be    encoded as time-numoffset as defined in clause 5.6 of IETF RFC 3339;  - \&quot;daylightSavingTime\&quot; shall represent the adjustment that has been made and shall be    encoded as \&quot;+1\&quot; or \&quot;+2\&quot; for a +1 or +2 hours adjustment.   The example is for 8 hours behind UTC, +1 hour adjustment for Daylight Saving Time. 
    /// </summary>
    utility::string_t getUetimeZone() const;
    bool uetimeZoneIsSet() const;
    void unsetUetimeZone();

    void setUetimeZone(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RatType> getRATType() const;
    bool rATTypeIsSet() const;
    void unsetRATType();

    void setRATType(const std::shared_ptr<RatType>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<ServingNetworkFunctionID>>& getServingNodeID();
    bool servingNodeIDIsSet() const;
    void unsetServingNodeID();

    void setServingNodeID(const std::vector<std::shared_ptr<ServingNetworkFunctionID>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<PresenceInfo>>& getPresenceReportingAreaInformation();
    bool presenceReportingAreaInformationIsSet() const;
    void unsetPresenceReportingAreaInformation();

    void setPresenceReportingAreaInformation(const std::map<utility::string_t, std::shared_ptr<PresenceInfo>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<r_3GPPPSDataOffStatus> getR3gppPSDataOffStatus() const;
    bool r3gppPSDataOffStatusIsSet() const;
    void unsetr_3gppPSDataOffStatus();

    void setR3gppPSDataOffStatus(const std::shared_ptr<r_3GPPPSDataOffStatus>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSponsorIdentity() const;
    bool sponsorIdentityIsSet() const;
    void unsetSponsorIdentity();

    void setSponsorIdentity(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getApplicationserviceProviderIdentity() const;
    bool applicationserviceProviderIdentityIsSet() const;
    void unsetApplicationserviceProviderIdentity();

    void setApplicationserviceProviderIdentity(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getChargingRuleBaseName() const;
    bool chargingRuleBaseNameIsSet() const;
    void unsetChargingRuleBaseName();

    void setChargingRuleBaseName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SteeringFunctionality> getMAPDUSteeringFunctionality() const;
    bool mAPDUSteeringFunctionalityIsSet() const;
    void unsetMAPDUSteeringFunctionality();

    void setMAPDUSteeringFunctionality(const std::shared_ptr<SteeringFunctionality>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SteeringMode> getMAPDUSteeringMode() const;
    bool mAPDUSteeringModeIsSet() const;
    void unsetMAPDUSteeringMode();

    void setMAPDUSteeringMode(const std::shared_ptr<SteeringMode>& value);


protected:
    utility::datetime m_TimeofFirstUsage;
    bool m_TimeofFirstUsageIsSet;
    utility::datetime m_TimeofLastUsage;
    bool m_TimeofLastUsageIsSet;
    std::shared_ptr<QosData> m_QoSInformation;
    bool m_QoSInformationIsSet;
    std::shared_ptr<QosCharacteristics> m_QoSCharacteristics;
    bool m_QoSCharacteristicsIsSet;
    utility::string_t m_AFCorrelationInformation;
    bool m_AFCorrelationInformationIsSet;
    std::shared_ptr<UserLocation> m_UserLocationInformation;
    bool m_UserLocationInformationIsSet;
    utility::string_t m_UetimeZone;
    bool m_UetimeZoneIsSet;
    std::shared_ptr<RatType> m_RATType;
    bool m_RATTypeIsSet;
    std::vector<std::shared_ptr<ServingNetworkFunctionID>> m_ServingNodeID;
    bool m_ServingNodeIDIsSet;
    std::map<utility::string_t, std::shared_ptr<PresenceInfo>> m_PresenceReportingAreaInformation;
    bool m_PresenceReportingAreaInformationIsSet;
    std::shared_ptr<r_3GPPPSDataOffStatus> m_r_3gppPSDataOffStatus;
    bool m_r_3gppPSDataOffStatusIsSet;
    utility::string_t m_SponsorIdentity;
    bool m_SponsorIdentityIsSet;
    utility::string_t m_ApplicationserviceProviderIdentity;
    bool m_ApplicationserviceProviderIdentityIsSet;
    utility::string_t m_ChargingRuleBaseName;
    bool m_ChargingRuleBaseNameIsSet;
    std::shared_ptr<SteeringFunctionality> m_MAPDUSteeringFunctionality;
    bool m_MAPDUSteeringFunctionalityIsSet;
    std::shared_ptr<SteeringMode> m_MAPDUSteeringMode;
    bool m_MAPDUSteeringModeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PDUContainerInformation_H_ */
