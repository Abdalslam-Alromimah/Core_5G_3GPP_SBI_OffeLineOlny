/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TwapId.h
 *
 * Contain the TWAP Identifier as defined in clause 4.2.8.5.3 of 3GPP TS 23.501 or the WLAN location information as defined in clause 4.5.7.2.8 of 3GPP TS 23.402. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_TwapId_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_TwapId_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Contain the TWAP Identifier as defined in clause 4.2.8.5.3 of 3GPP TS 23.501 or the WLAN location information as defined in clause 4.5.7.2.8 of 3GPP TS 23.402. 
/// </summary>
class  TwapId
    : public ModelBase
{
public:
    TwapId();
    virtual ~TwapId();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// TwapId members

    /// <summary>
    /// This IE shall contain the SSID of the access point to which the UE is attached, that is received over NGAP, see IEEE Std 802.11-2012.  
    /// </summary>
    utility::string_t getSsId() const;
    bool ssIdIsSet() const;
    void unsetSsId();

    void setSsId(const utility::string_t& value);

    /// <summary>
    /// When present, it shall contain the BSSID of the access point to which the UE is attached, for trusted WLAN access, see IEEE Std 802.11-2012.  
    /// </summary>
    utility::string_t getBssId() const;
    bool bssIdIsSet() const;
    void unsetBssId();

    void setBssId(const utility::string_t& value);

    /// <summary>
    /// string with format &#39;bytes&#39; as defined in OpenAPI
    /// </summary>
    utility::string_t getCivicAddress() const;
    bool civicAddressIsSet() const;
    void unsetCivicAddress();

    void setCivicAddress(const utility::string_t& value);


protected:
    utility::string_t m_SsId;
    bool m_SsIdIsSet;
    utility::string_t m_BssId;
    bool m_BssIdIsSet;
    utility::string_t m_CivicAddress;
    bool m_CivicAddressIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_TwapId_H_ */
