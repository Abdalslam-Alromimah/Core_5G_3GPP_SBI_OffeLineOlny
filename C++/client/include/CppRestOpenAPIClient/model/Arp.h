/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Arp.h
 *
 * Contains Allocation and Retention Priority information.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Arp_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Arp_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/PreemptionVulnerability.h"
#include "CppRestOpenAPIClient/model/PreemptionCapability.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Contains Allocation and Retention Priority information.
/// </summary>
class  Arp
    : public ModelBase
{
public:
    Arp();
    virtual ~Arp();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Arp members

    /// <summary>
    /// nullable true shall not be used for this attribute. Unsigned integer indicating the ARP Priority Level (see clause 5.7.2.2 of 3GPP TS 23.501, within the range 1 to 15.Values are ordered in decreasing order of priority, i.e. with 1 as the highest priority and 15 as the lowest priority.  
    /// </summary>
    int32_t getPriorityLevel() const;
    bool priorityLevelIsSet() const;
    void unsetPriorityLevel();

    void setPriorityLevel(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PreemptionCapability> getPreemptCap() const;
    bool preemptCapIsSet() const;
    void unsetPreemptCap();

    void setPreemptCap(const std::shared_ptr<PreemptionCapability>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PreemptionVulnerability> getPreemptVuln() const;
    bool preemptVulnIsSet() const;
    void unsetPreemptVuln();

    void setPreemptVuln(const std::shared_ptr<PreemptionVulnerability>& value);


protected:
    int32_t m_PriorityLevel;
    bool m_PriorityLevelIsSet;
    std::shared_ptr<PreemptionCapability> m_PreemptCap;
    bool m_PreemptCapIsSet;
    std::shared_ptr<PreemptionVulnerability> m_PreemptVuln;
    bool m_PreemptVulnIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Arp_H_ */
