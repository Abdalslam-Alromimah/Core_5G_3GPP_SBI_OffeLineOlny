/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Ambr.h
 *
 * Contains the maximum aggregated uplink and downlink bit rates.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Ambr_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Ambr_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Contains the maximum aggregated uplink and downlink bit rates.
/// </summary>
class  Ambr
    : public ModelBase
{
public:
    Ambr();
    virtual ~Ambr();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Ambr members

    /// <summary>
    /// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \&quot;K\&quot; is used to represent the standard symbol \&quot;k\&quot;. 
    /// </summary>
    utility::string_t getUplink() const;
    bool uplinkIsSet() const;
    void unsetUplink();

    void setUplink(const utility::string_t& value);

    /// <summary>
    /// String representing a bit rate; the prefixes follow the standard symbols from The International System of Units, and represent x1000 multipliers, with the exception that prefix \&quot;K\&quot; is used to represent the standard symbol \&quot;k\&quot;. 
    /// </summary>
    utility::string_t getDownlink() const;
    bool downlinkIsSet() const;
    void unsetDownlink();

    void setDownlink(const utility::string_t& value);


protected:
    utility::string_t m_Uplink;
    bool m_UplinkIsSet;
    utility::string_t m_Downlink;
    bool m_DownlinkIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Ambr_H_ */
