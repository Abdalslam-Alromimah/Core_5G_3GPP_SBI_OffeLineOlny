/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GlobalRanNodeId.h
 *
 * One of the six attributes n3IwfId, gNbIdm, ngeNbId, wagfId, tngfId, eNbId shall be present. 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GlobalRanNodeId_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GlobalRanNodeId_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/GNbId.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/PlmnId.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class PlmnId;
class GNbId;

/// <summary>
/// One of the six attributes n3IwfId, gNbIdm, ngeNbId, wagfId, tngfId, eNbId shall be present. 
/// </summary>
class  GlobalRanNodeId
    : public ModelBase
{
public:
    GlobalRanNodeId();
    virtual ~GlobalRanNodeId();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GlobalRanNodeId members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PlmnId> getPlmnId() const;
    bool plmnIdIsSet() const;
    void unsetPlmnId();

    void setPlmnId(const std::shared_ptr<PlmnId>& value);

    /// <summary>
    /// This represents the identifier of the N3IWF ID as specified in clause 9.3.1.57 of  3GPP TS 38.413 in hexadecimal representation. Each character in the string shall take a value  of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the N3IWF ID shall appear first in the  string, and the character representing the 4 least significant bit of the N3IWF ID shall  appear last in the string.  
    /// </summary>
    utility::string_t getN3IwfId() const;
    bool n3IwfIdIsSet() const;
    void unsetN3IwfId();

    void setN3IwfId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GNbId> getGNbId() const;
    bool gNbIdIsSet() const;
    void unsetGNbId();

    void setGNbId(const std::shared_ptr<GNbId>& value);

    /// <summary>
    /// This represents the identifier of the ng-eNB ID as specified in clause 9.3.1.8 of  3GPP TS 38.413. The value of the ng-eNB ID shall be encoded in hexadecimal representation.  Each character in the string shall take a value of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and  shall represent 4 bits. The padding 0 shall be added to make multiple nibbles, so the most  significant character representing the padding 0 if required together with the 4 most  significant bits of the ng-eNB ID shall appear first in the string, and the character  representing the 4 least significant bit of the ng-eNB ID (to form a nibble) shall appear last  in the string.  
    /// </summary>
    utility::string_t getNgeNbId() const;
    bool ngeNbIdIsSet() const;
    void unsetNgeNbId();

    void setNgeNbId(const utility::string_t& value);

    /// <summary>
    /// This represents the identifier of the W-AGF ID as specified in clause 9.3.1.162 of  3GPP TS 38.413 in hexadecimal representation. Each character in the string shall take a value  of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4 bits. The most significant  character representing the 4 most significant bits of the W-AGF ID shall appear first in the  string, and the character representing the 4 least significant bit of the W-AGF ID shall  appear last in the string.  
    /// </summary>
    utility::string_t getWagfId() const;
    bool wagfIdIsSet() const;
    void unsetWagfId();

    void setWagfId(const utility::string_t& value);

    /// <summary>
    /// This represents the identifier of the TNGF ID as specified in clause 9.3.1.161 of  3GPP TS 38.413  in hexadecimal representation. Each character in the string shall take a value of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot;  to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4 bits. The most significant character representing the  4 most significant bits of the TNGF ID shall appear first in the string, and the character  representing the 4 least significant bit of the TNGF ID shall appear last in the string.  
    /// </summary>
    utility::string_t getTngfId() const;
    bool tngfIdIsSet() const;
    void unsetTngfId();

    void setTngfId(const utility::string_t& value);

    /// <summary>
    /// This represents the Network Identifier, which together with a PLMN ID is used to identify an SNPN (see 3GPP TS 23.003 and 3GPP TS 23.501 clause 5.30.2.1).  
    /// </summary>
    utility::string_t getNid() const;
    bool nidIsSet() const;
    void unsetNid();

    void setNid(const utility::string_t& value);

    /// <summary>
    /// This represents the identifier of the eNB ID as specified in clause 9.2.1.37 of  3GPP TS 36.413. The string shall be formatted with the following pattern  &#39;^(&#39;MacroeNB-[A-Fa-f0-9]{5}|LMacroeNB-[A-Fa-f0-9]{6}|SMacroeNB-[A-Fa-f0-9]{5} |HomeeNB-[A-Fa-f0-9]{7})$&#39;. The value of the eNB ID shall be encoded in hexadecimal representation. Each character in the  string shall take a value of \&quot;0\&quot; to \&quot;9\&quot;, \&quot;a\&quot; to \&quot;f\&quot; or \&quot;A\&quot; to \&quot;F\&quot; and shall represent 4 bits.  The padding 0 shall be added to make multiple nibbles, so the most significant character  representing the padding 0 if required together with the 4 most significant bits of the eNB ID  shall appear first in the string, and the character representing the 4 least significant bit  of the eNB ID (to form a nibble) shall appear last in the string. 
    /// </summary>
    utility::string_t getENbId() const;
    bool eNbIdIsSet() const;
    void unsetENbId();

    void setENbId(const utility::string_t& value);


protected:
    std::shared_ptr<PlmnId> m_PlmnId;
    bool m_PlmnIdIsSet;
    utility::string_t m_N3IwfId;
    bool m_N3IwfIdIsSet;
    std::shared_ptr<GNbId> m_GNbId;
    bool m_GNbIdIsSet;
    utility::string_t m_NgeNbId;
    bool m_NgeNbIdIsSet;
    utility::string_t m_WagfId;
    bool m_WagfIdIsSet;
    utility::string_t m_TngfId;
    bool m_TngfIdIsSet;
    utility::string_t m_Nid;
    bool m_NidIsSet;
    utility::string_t m_ENbId;
    bool m_ENbIdIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GlobalRanNodeId_H_ */
