/**
 * Nchf_OfflineOnlyCharging
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.6.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RanNasRelCause.h
 *
 * Contains the RAN/NAS release cause.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_RanNasRelCause_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_RanNasRelCause_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/NgApCause.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class NgApCause;

/// <summary>
/// Contains the RAN/NAS release cause.
/// </summary>
class  RanNasRelCause
    : public ModelBase
{
public:
    RanNasRelCause();
    virtual ~RanNasRelCause();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RanNasRelCause members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NgApCause> getNgApCause() const;
    bool ngApCauseIsSet() const;
    void unsetNgApCause();

    void setNgApCause(const std::shared_ptr<NgApCause>& value);

    /// <summary>
    /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
    /// </summary>
    int32_t getR5gMmCause() const;
    bool r5gMmCauseIsSet() const;
    void unsetr_5gMmCause();

    void setR5gMmCause(int32_t value);

    /// <summary>
    /// Unsigned Integer, i.e. only value 0 and integers above 0 are permissible.
    /// </summary>
    int32_t getR5gSmCause() const;
    bool r5gSmCauseIsSet() const;
    void unsetr_5gSmCause();

    void setR5gSmCause(int32_t value);

    /// <summary>
    /// Defines the EPS RAN/NAS release cause.
    /// </summary>
    utility::string_t getEpsCause() const;
    bool epsCauseIsSet() const;
    void unsetEpsCause();

    void setEpsCause(const utility::string_t& value);


protected:
    std::shared_ptr<NgApCause> m_NgApCause;
    bool m_NgApCauseIsSet;
    int32_t m_r_5gMmCause;
    bool m_r_5gMmCauseIsSet;
    int32_t m_r_5gSmCause;
    bool m_r_5gSmCauseIsSet;
    utility::string_t m_EpsCause;
    bool m_EpsCauseIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_RanNasRelCause_H_ */
